
ece5210-fir-repo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067fc  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080069f8  080069f8  000079f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b68  08006b68  0000819c  2**0
                  CONTENTS
  4 .ARM          00000000  08006b68  08006b68  0000819c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b68  08006b68  0000819c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b68  08006b68  00007b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b6c  08006b6c  00007b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08006b70  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c10  2000019c  08006d0c  0000819c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005dac  08006d0c  00008dac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000819c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c33b  00000000  00000000  000081ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a0  00000000  00000000  00014505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  000167a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000883  00000000  00000000  000172e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd8d  00000000  00000000  00017b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f960  00000000  00000000  000458f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d665  00000000  00000000  00055250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001628b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fbc  00000000  00000000  001628f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  001658b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000019c 	.word	0x2000019c
 8000214:	00000000 	.word	0x00000000
 8000218:	080069dc 	.word	0x080069dc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001a0 	.word	0x200001a0
 8000234:	080069dc 	.word	0x080069dc

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <init_firwin>:

   * @param void
   * @return void
   */
void init_firwin(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	ed2d 8b02 	vpush	{d8}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
    uint16_t M = NUM_TAPS - 1;
 80005ba:	2312      	movs	r3, #18
 80005bc:	807b      	strh	r3, [r7, #2]
    float sum = 0.f;
 80005be:	f04f 0300 	mov.w	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]

    for (uint16_t n = 0; n < NUM_TAPS; n++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	817b      	strh	r3, [r7, #10]
 80005c8:	e07e      	b.n	80006c8 <init_firwin+0x118>
    {
        if ((n == M/2) && (NUM_TAPS % 2))
 80005ca:	887b      	ldrh	r3, [r7, #2]
 80005cc:	085b      	lsrs	r3, r3, #1
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	897a      	ldrh	r2, [r7, #10]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d107      	bne.n	80005e6 <init_firwin+0x36>
        {
            h_lp[n] = W_C/PI;
 80005d6:	897b      	ldrh	r3, [r7, #10]
 80005d8:	4a5e      	ldr	r2, [pc, #376]	@ (8000754 <init_firwin+0x1a4>)
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	e035      	b.n	8000652 <init_firwin+0xa2>
        }
        else
        {
            h_lp[n] = sinf(W_C*(n - (float)M/2)) /
 80005e6:	897b      	ldrh	r3, [r7, #10]
 80005e8:	ee07 3a90 	vmov	s15, r3
 80005ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005f0:	887b      	ldrh	r3, [r7, #2]
 80005f2:	ee07 3a90 	vmov	s15, r3
 80005f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80005fa:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80005fe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000606:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8000758 <init_firwin+0x1a8>
 800060a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800060e:	eeb0 0a67 	vmov.f32	s0, s15
 8000612:	f006 f861 	bl	80066d8 <sinf>
 8000616:	eeb0 6a40 	vmov.f32	s12, s0
                (PI*(n - (float)M/2));
 800061a:	897b      	ldrh	r3, [r7, #10]
 800061c:	ee07 3a90 	vmov	s15, r3
 8000620:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000624:	887b      	ldrh	r3, [r7, #2]
 8000626:	ee07 3a90 	vmov	s15, r3
 800062a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800062e:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8000632:	eec6 7aa5 	vdiv.f32	s15, s13, s11
 8000636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800063a:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800075c <init_firwin+0x1ac>
 800063e:	ee27 7a87 	vmul.f32	s14, s15, s14
            h_lp[n] = sinf(W_C*(n - (float)M/2)) /
 8000642:	897b      	ldrh	r3, [r7, #10]
 8000644:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8000648:	4a42      	ldr	r2, [pc, #264]	@ (8000754 <init_firwin+0x1a4>)
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	edc3 7a00 	vstr	s15, [r3]
        }

        h_lp[n] *= 0.54f - 0.46f*cosf(2*PI*n/M);
 8000652:	897b      	ldrh	r3, [r7, #10]
 8000654:	4a3f      	ldr	r2, [pc, #252]	@ (8000754 <init_firwin+0x1a4>)
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4413      	add	r3, r2
 800065a:	ed93 8a00 	vldr	s16, [r3]
 800065e:	897b      	ldrh	r3, [r7, #10]
 8000660:	ee07 3a90 	vmov	s15, r3
 8000664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000668:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8000760 <init_firwin+0x1b0>
 800066c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000670:	887b      	ldrh	r3, [r7, #2]
 8000672:	ee07 3a90 	vmov	s15, r3
 8000676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800067a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800067e:	eeb0 0a66 	vmov.f32	s0, s13
 8000682:	f006 f8ed 	bl	8006860 <cosf>
 8000686:	eef0 7a40 	vmov.f32	s15, s0
 800068a:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8000764 <init_firwin+0x1b4>
 800068e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000692:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8000768 <init_firwin+0x1b8>
 8000696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800069a:	897b      	ldrh	r3, [r7, #10]
 800069c:	ee68 7a27 	vmul.f32	s15, s16, s15
 80006a0:	4a2c      	ldr	r2, [pc, #176]	@ (8000754 <init_firwin+0x1a4>)
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	4413      	add	r3, r2
 80006a6:	edc3 7a00 	vstr	s15, [r3]
        
        sum += h_lp[n];
 80006aa:	897b      	ldrh	r3, [r7, #10]
 80006ac:	4a29      	ldr	r2, [pc, #164]	@ (8000754 <init_firwin+0x1a4>)
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	edd3 7a00 	vldr	s15, [r3]
 80006b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80006ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006be:	edc7 7a03 	vstr	s15, [r7, #12]
    for (uint16_t n = 0; n < NUM_TAPS; n++)
 80006c2:	897b      	ldrh	r3, [r7, #10]
 80006c4:	3301      	adds	r3, #1
 80006c6:	817b      	strh	r3, [r7, #10]
 80006c8:	897b      	ldrh	r3, [r7, #10]
 80006ca:	2b12      	cmp	r3, #18
 80006cc:	f67f af7d 	bls.w	80005ca <init_firwin+0x1a>
    }

    for (int n = 0; n < NUM_TAPS; n++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	e033      	b.n	800073e <init_firwin+0x18e>
    {
        h_lp[n] /= sum;
 80006d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000754 <init_firwin+0x1a4>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	edd3 6a00 	vldr	s13, [r3]
 80006e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80006e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000754 <init_firwin+0x1a4>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	edc3 7a00 	vstr	s15, [r3]
        if (n % 2 == 1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	bfb8      	it	lt
 8000700:	425b      	neglt	r3, r3
 8000702:	2b01      	cmp	r3, #1
 8000704:	d10e      	bne.n	8000724 <init_firwin+0x174>
        {
            h_hp[n] = -h_lp[n];
 8000706:	4a13      	ldr	r2, [pc, #76]	@ (8000754 <init_firwin+0x1a4>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	edd3 7a00 	vldr	s15, [r3]
 8000712:	eef1 7a67 	vneg.f32	s15, s15
 8000716:	4a15      	ldr	r2, [pc, #84]	@ (800076c <init_firwin+0x1bc>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	edc3 7a00 	vstr	s15, [r3]
 8000722:	e009      	b.n	8000738 <init_firwin+0x188>
        }
        else
        {
            h_hp[n] = h_lp[n];
 8000724:	4a0b      	ldr	r2, [pc, #44]	@ (8000754 <init_firwin+0x1a4>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	490f      	ldr	r1, [pc, #60]	@ (800076c <init_firwin+0x1bc>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	440b      	add	r3, r1
 8000736:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < NUM_TAPS; n++)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3301      	adds	r3, #1
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b12      	cmp	r3, #18
 8000742:	ddc8      	ble.n	80006d6 <init_firwin+0x126>
        }
    }
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	ecbd 8b02 	vpop	{d8}
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000004c 	.word	0x2000004c
 8000758:	3fc90fdb 	.word	0x3fc90fdb
 800075c:	40490fdb 	.word	0x40490fdb
 8000760:	40c90fdb 	.word	0x40c90fdb
 8000764:	3eeb851f 	.word	0x3eeb851f
 8000768:	3f0a3d71 	.word	0x3f0a3d71
 800076c:	20000000 	.word	0x20000000

08000770 <lpf>:

float x_lp[NUM_TAPS] = {0.f};

float lpf(float x, float *h, uint8_t M) {
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	@ 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	ed87 0a03 	vstr	s0, [r7, #12]
 800077a:	60b8      	str	r0, [r7, #8]
 800077c:	460b      	mov	r3, r1
 800077e:	71fb      	strb	r3, [r7, #7]
    float y = 0.0f;
 8000780:	f04f 0300 	mov.w	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]

    x_lp[0] = x;
 8000786:	4a32      	ldr	r2, [pc, #200]	@ (8000850 <lpf+0xe0>)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < (M / 2); i++) {
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	e020      	b.n	80007d4 <lpf+0x64>

		y += h[i] * (x_lp[M-i] + x_lp[i]);
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	4413      	add	r3, r2
 800079a:	ed93 7a00 	vldr	s14, [r3]
 800079e:	79fa      	ldrb	r2, [r7, #7]
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000850 <lpf+0xe0>)
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	edd3 6a00 	vldr	s13, [r3]
 80007ae:	4a28      	ldr	r2, [pc, #160]	@ (8000850 <lpf+0xe0>)
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	edd3 7a00 	vldr	s15, [r3]
 80007ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80007be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80007c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007ca:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < (M / 2); i++) {
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	3301      	adds	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	085b      	lsrs	r3, r3, #1
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	461a      	mov	r2, r3
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	4293      	cmp	r3, r2
 80007e0:	dbd7      	blt.n	8000792 <lpf+0x22>
	}

	y += h[M/2] * x_lp[(M/2)];
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	4413      	add	r3, r2
 80007ee:	ed93 7a00 	vldr	s14, [r3]
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	4a15      	ldr	r2, [pc, #84]	@ (8000850 <lpf+0xe0>)
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	edd3 7a00 	vldr	s15, [r3]
 8000802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000806:	ed97 7a07 	vldr	s14, [r7, #28]
 800080a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800080e:	edc7 7a07 	vstr	s15, [r7, #28]

	for(int k=M; k>0; k--) {
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	e00d      	b.n	8000834 <lpf+0xc4>
		x_lp[k] = x_lp[k-1];
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	3b01      	subs	r3, #1
 800081c:	4a0c      	ldr	r2, [pc, #48]	@ (8000850 <lpf+0xe0>)
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	490a      	ldr	r1, [pc, #40]	@ (8000850 <lpf+0xe0>)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	440b      	add	r3, r1
 800082c:	601a      	str	r2, [r3, #0]
	for(int k=M; k>0; k--) {
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	3b01      	subs	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	2b00      	cmp	r3, #0
 8000838:	dcee      	bgt.n	8000818 <lpf+0xa8>
	}

	return y;
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	ee07 3a90 	vmov	s15, r3
}
 8000840:	eeb0 0a67 	vmov.f32	s0, s15
 8000844:	3724      	adds	r7, #36	@ 0x24
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	200001b8 	.word	0x200001b8

08000854 <hpf>:

float x_hp[NUM_TAPS] = {0.f};

float hpf(float x, float *h, uint8_t M) {
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	@ 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	ed87 0a03 	vstr	s0, [r7, #12]
 800085e:	60b8      	str	r0, [r7, #8]
 8000860:	460b      	mov	r3, r1
 8000862:	71fb      	strb	r3, [r7, #7]
    float y = 0.0f;
 8000864:	f04f 0300 	mov.w	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]

    x_hp[0] = x;
 800086a:	4a32      	ldr	r2, [pc, #200]	@ (8000934 <hpf+0xe0>)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < (M / 2); i++) {
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
 8000874:	e020      	b.n	80008b8 <hpf+0x64>

		y += h[i] * (x_hp[M-i] + x_hp[i]);
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	4413      	add	r3, r2
 800087e:	ed93 7a00 	vldr	s14, [r3]
 8000882:	79fa      	ldrb	r2, [r7, #7]
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	4a2a      	ldr	r2, [pc, #168]	@ (8000934 <hpf+0xe0>)
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	4413      	add	r3, r2
 800088e:	edd3 6a00 	vldr	s13, [r3]
 8000892:	4a28      	ldr	r2, [pc, #160]	@ (8000934 <hpf+0xe0>)
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	edd3 7a00 	vldr	s15, [r3]
 800089e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80008a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80008aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ae:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < (M / 2); i++) {
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	3301      	adds	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	085b      	lsrs	r3, r3, #1
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	4293      	cmp	r3, r2
 80008c4:	dbd7      	blt.n	8000876 <hpf+0x22>
	}

	y += h[M/2] * x_hp[(M/2)];
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	4413      	add	r3, r2
 80008d2:	ed93 7a00 	vldr	s14, [r3]
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4a15      	ldr	r2, [pc, #84]	@ (8000934 <hpf+0xe0>)
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	edd3 7a00 	vldr	s15, [r3]
 80008e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80008ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f2:	edc7 7a07 	vstr	s15, [r7, #28]

	for(int k=M; k>0; k--) {
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	e00d      	b.n	8000918 <hpf+0xc4>
		x_hp[k] = x_hp[k-1];
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	3b01      	subs	r3, #1
 8000900:	4a0c      	ldr	r2, [pc, #48]	@ (8000934 <hpf+0xe0>)
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4413      	add	r3, r2
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	490a      	ldr	r1, [pc, #40]	@ (8000934 <hpf+0xe0>)
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	440b      	add	r3, r1
 8000910:	601a      	str	r2, [r3, #0]
	for(int k=M; k>0; k--) {
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3b01      	subs	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	2b00      	cmp	r3, #0
 800091c:	dcee      	bgt.n	80008fc <hpf+0xa8>
	}

	return y;
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	ee07 3a90 	vmov	s15, r3
}
 8000924:	eeb0 0a67 	vmov.f32	s0, s15
 8000928:	3724      	adds	r7, #36	@ 0x24
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000204 	.word	0x20000204

08000938 <process_sample_left>:



int16_t process_sample_left(int16_t sample_in)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	80fb      	strh	r3, [r7, #6]
    int16_t sample_out = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	82fb      	strh	r3, [r7, #22]
    float sample_in_f = (float)sample_in;
 8000946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800094a:	ee07 3a90 	vmov	s15, r3
 800094e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000952:	edc7 7a04 	vstr	s15, [r7, #16]


    float sample_out_f = lpf(sample_in_f, h_low, NUM_TAPS-1);
 8000956:	2112      	movs	r1, #18
 8000958:	4809      	ldr	r0, [pc, #36]	@ (8000980 <process_sample_left+0x48>)
 800095a:	ed97 0a04 	vldr	s0, [r7, #16]
 800095e:	f7ff ff07 	bl	8000770 <lpf>
 8000962:	ed87 0a03 	vstr	s0, [r7, #12]
//    float sample_out_f = hpf(sample_in_f, h_high, NUM_TAPS-1);

    // Convert back to int16_t
    sample_out = (int16_t)sample_out_f;
 8000966:	edd7 7a03 	vldr	s15, [r7, #12]
 800096a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800096e:	ee17 3a90 	vmov	r3, s15
 8000972:	82fb      	strh	r3, [r7, #22]
    return sample_out;
 8000974:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000e4 	.word	0x200000e4

08000984 <process_sample_right>:


int16_t process_sample_right(int16_t sample_in)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	80fb      	strh	r3, [r7, #6]
    int16_t sample_out = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	82fb      	strh	r3, [r7, #22]
    float sample_in_f = (float)sample_in;
 8000992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000996:	ee07 3a90 	vmov	s15, r3
 800099a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800099e:	edc7 7a04 	vstr	s15, [r7, #16]

    float sample_out_f = hpf(sample_in_f, h_high, NUM_TAPS-1);
 80009a2:	2112      	movs	r1, #18
 80009a4:	4809      	ldr	r0, [pc, #36]	@ (80009cc <process_sample_right+0x48>)
 80009a6:	ed97 0a04 	vldr	s0, [r7, #16]
 80009aa:	f7ff ff53 	bl	8000854 <hpf>
 80009ae:	ed87 0a03 	vstr	s0, [r7, #12]

    // Convert back to int16_t
    sample_out = (int16_t)sample_out_f;
 80009b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80009b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009ba:	ee17 3a90 	vmov	r3, s15
 80009be:	82fb      	strh	r3, [r7, #22]
    return sample_out;
 80009c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000098 	.word	0x20000098

080009d0 <main>:
#include "myaudio.h"

void SystemClock_Config(void);

int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f001 ff07 	bl	80027e6 <HAL_Init>

  BSP_LED_Init(LED_RED);
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 fd29 	bl	8002430 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80009de:	2001      	movs	r0, #1
 80009e0:	f001 fd26 	bl	8002430 <BSP_LED_Init>
  BSP_LED_Off(LED_RED);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f001 fd6d 	bl	80024c4 <BSP_LED_Off>
  BSP_LED_On(LED_GREEN);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f001 fd50 	bl	8002490 <BSP_LED_On>

  /* Configure the system clock */
  SystemClock_Config();
 80009f0:	f000 f804 	bl	80009fc <SystemClock_Config>

  audio_init();
 80009f4:	f000 f8b6 	bl	8000b64 <audio_init>
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <main+0x28>

080009fc <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b0b8      	sub	sp, #224	@ 0xe0
 8000a00:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b4f      	ldr	r3, [pc, #316]	@ (8000b40 <SystemClock_Config+0x144>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	4a4e      	ldr	r2, [pc, #312]	@ (8000b40 <SystemClock_Config+0x144>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000b40 <SystemClock_Config+0x144>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8000b44 <SystemClock_Config+0x148>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a49      	ldr	r2, [pc, #292]	@ (8000b44 <SystemClock_Config+0x148>)
 8000a20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	4b47      	ldr	r3, [pc, #284]	@ (8000b44 <SystemClock_Config+0x148>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a40:	2302      	movs	r3, #2
 8000a42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a4e:	2319      	movs	r3, #25
 8000a50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000a54:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000a58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a62:	2304      	movs	r3, #4
 8000a64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f003 f9f9 	bl	8003e64 <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <SystemClock_Config+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000a78:	215f      	movs	r1, #95	@ 0x5f
 8000a7a:	4833      	ldr	r0, [pc, #204]	@ (8000b48 <SystemClock_Config+0x14c>)
 8000a7c:	f000 f86a 	bl	8000b54 <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a80:	f003 f9a0 	bl	8003dc4 <HAL_PWREx_EnableOverDrive>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <SystemClock_Config+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000a8a:	2166      	movs	r1, #102	@ 0x66
 8000a8c:	482e      	ldr	r0, [pc, #184]	@ (8000b48 <SystemClock_Config+0x14c>)
 8000a8e:	f000 f861 	bl	8000b54 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	230f      	movs	r3, #15
 8000a94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ab4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000ab8:	2107      	movs	r1, #7
 8000aba:	4618      	mov	r0, r3
 8000abc:	f003 fc8a 	bl	80043d4 <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <SystemClock_Config+0xd2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000ac6:	2174      	movs	r1, #116	@ 0x74
 8000ac8:	481f      	ldr	r0, [pc, #124]	@ (8000b48 <SystemClock_Config+0x14c>)
 8000aca:	f000 f843 	bl	8000b54 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8000ace:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <SystemClock_Config+0x150>)
 8000ad0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000ad2:	23c0      	movs	r3, #192	@ 0xc0
 8000ad4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8000ada:	2303      	movs	r3, #3
 8000adc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000aea:	2300      	movs	r3, #0
 8000aec:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000aee:	2300      	movs	r3, #0
 8000af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	4618      	mov	r0, r3
 8000afe:	f003 fdf5 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <SystemClock_Config+0x114>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000b08:	2184      	movs	r1, #132	@ 0x84
 8000b0a:	480f      	ldr	r0, [pc, #60]	@ (8000b48 <SystemClock_Config+0x14c>)
 8000b0c:	f000 f822 	bl	8000b54 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000b10:	f003 fde0 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 8000b14:	4603      	mov	r3, r0
 8000b16:	4a0e      	ldr	r2, [pc, #56]	@ (8000b50 <SystemClock_Config+0x154>)
 8000b18:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1c:	099b      	lsrs	r3, r3, #6
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 ffbd 	bl	8002a9e <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000b24:	2004      	movs	r0, #4
 8000b26:	f001 ffc7 	bl	8002ab8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b32:	f001 ff8a 	bl	8002a4a <HAL_NVIC_SetPriority>
}
 8000b36:	bf00      	nop
 8000b38:	37e0      	adds	r7, #224	@ 0xe0
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000
 8000b48:	080069f8 	.word	0x080069f8
 8000b4c:	08080040 	.word	0x08080040
 8000b50:	10624dd3 	.word	0x10624dd3

08000b54 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8000b5e:	bf00      	nop
 8000b60:	e7fd      	b.n	8000b5e <_Error_Handler+0xa>
	...

08000b64 <audio_init>:
///////////////////////////////////////////////////////////



void audio_init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af02      	add	r7, sp, #8
    // initialize the filter
    init_firwin();
 8000b6a:	f7ff fd21 	bl	80005b0 <init_firwin>
    
    haudio_out_sai.Instance = SAI1_Block_A;
 8000b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c68 <audio_init+0x104>)
 8000b70:	4a3e      	ldr	r2, [pc, #248]	@ (8000c6c <audio_init+0x108>)
 8000b72:	601a      	str	r2, [r3, #0]
    haudio_in_sai.Instance = SAI1_Block_B;
 8000b74:	4b3e      	ldr	r3, [pc, #248]	@ (8000c70 <audio_init+0x10c>)
 8000b76:	4a3f      	ldr	r2, [pc, #252]	@ (8000c74 <audio_init+0x110>)
 8000b78:	601a      	str	r2, [r3, #0]

    fill_buffer_with_square_wave(playbackBufferLeft,
 8000b7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b7e:	483e      	ldr	r0, [pc, #248]	@ (8000c78 <audio_init+0x114>)
 8000b80:	f000 f894 	bl	8000cac <fill_buffer_with_square_wave>
                                 MY_BUFFER_SIZE_SAMPLES);
    fill_buffer_with_square_wave(playbackBufferRight,
 8000b84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b88:	483c      	ldr	r0, [pc, #240]	@ (8000c7c <audio_init+0x118>)
 8000b8a:	f000 f88f 	bl	8000cac <fill_buffer_with_square_wave>
                                 MY_BUFFER_SIZE_SAMPLES);
    
    ConvertSampleBufferToDMABuffer(playbackBufferLeft,
 8000b8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	4b3a      	ldr	r3, [pc, #232]	@ (8000c80 <audio_init+0x11c>)
 8000b96:	4a39      	ldr	r2, [pc, #228]	@ (8000c7c <audio_init+0x118>)
 8000b98:	4937      	ldr	r1, [pc, #220]	@ (8000c78 <audio_init+0x114>)
 8000b9a:	4837      	ldr	r0, [pc, #220]	@ (8000c78 <audio_init+0x114>)
 8000b9c:	f000 f8be 	bl	8000d1c <ConvertSampleBufferToDMABuffer>
                                   playbackBufferLeft,
                                   playbackBufferRight,
                                   saiDMATransmitBuffer,
                                   MY_BUFFER_SIZE_SAMPLES);

    My_SAI_ClockConfig(frequency);
 8000ba0:	4b38      	ldr	r3, [pc, #224]	@ (8000c84 <audio_init+0x120>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f93f 	bl	8000e28 <My_SAI_ClockConfig>

    My_AUDIO_OUT_MspInit();
 8000baa:	f000 f97f 	bl	8000eac <My_AUDIO_OUT_MspInit>
    My_SAI_Out_Init(frequency);
 8000bae:	4b35      	ldr	r3, [pc, #212]	@ (8000c84 <audio_init+0x120>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fa16 	bl	8000fe4 <My_SAI_Out_Init>

    My_AUDIO_IN_MspInit();
 8000bb8:	f000 fa7c 	bl	80010b4 <My_AUDIO_IN_MspInit>
    My_SAI_In_Init(frequency);
 8000bbc:	4b31      	ldr	r3, [pc, #196]	@ (8000c84 <audio_init+0x120>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fafd 	bl	80011c0 <My_SAI_In_Init>

    wm8994_Init(AUDIO_I2C_ADDRESS,
 8000bc6:	4b30      	ldr	r3, [pc, #192]	@ (8000c88 <audio_init+0x124>)
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	4b2e      	ldr	r3, [pc, #184]	@ (8000c84 <audio_init+0x120>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f240 3102 	movw	r1, #770	@ 0x302
 8000bd2:	2034      	movs	r0, #52	@ 0x34
 8000bd4:	f000 fc3e 	bl	8001454 <wm8994_Init>
                INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_HEADPHONE,
                volume, frequency);
    
    HAL_SAI_Transmit_DMA(&haudio_out_sai,
 8000bd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bdc:	4928      	ldr	r1, [pc, #160]	@ (8000c80 <audio_init+0x11c>)
 8000bde:	4822      	ldr	r0, [pc, #136]	@ (8000c68 <audio_init+0x104>)
 8000be0:	f005 faca 	bl	8006178 <HAL_SAI_Transmit_DMA>
                         (uint8_t*) saiDMATransmitBuffer,
                         MY_DMA_BUFFER_SIZE_MSIZES);
    HAL_SAI_Receive_DMA(&haudio_in_sai,
 8000be4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000be8:	4928      	ldr	r1, [pc, #160]	@ (8000c8c <audio_init+0x128>)
 8000bea:	4821      	ldr	r0, [pc, #132]	@ (8000c70 <audio_init+0x10c>)
 8000bec:	f005 fb52 	bl	8006294 <HAL_SAI_Receive_DMA>
                        (uint8_t*) saiDMAReceiveBuffer,
                        MY_DMA_BUFFER_SIZE_MSIZES);
    
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000bf0:	4b27      	ldr	r3, [pc, #156]	@ (8000c90 <audio_init+0x12c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]

    while (1)
    {
        if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 8000bf6:	4b26      	ldr	r3, [pc, #152]	@ (8000c90 <audio_init+0x12c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0fb      	beq.n	8000bf6 <audio_init+0x92>
        {
            if (audio_rec_buffer_state == BUFFER_OFFSET_HALF)
 8000bfe:	4b24      	ldr	r3, [pc, #144]	@ (8000c90 <audio_init+0x12c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d116      	bne.n	8000c34 <audio_init+0xd0>
            {
                ExtractSamplesFromDMABuffer(
 8000c06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c0a:	4922      	ldr	r1, [pc, #136]	@ (8000c94 <audio_init+0x130>)
 8000c0c:	481f      	ldr	r0, [pc, #124]	@ (8000c8c <audio_init+0x128>)
 8000c0e:	f000 f8b3 	bl	8000d78 <ExtractSamplesFromDMABuffer>
                    &saiDMAReceiveBuffer[0],
                    &recordBuffer[0],
                    MY_BUFFER_SIZE_SAMPLES/2);

                CopySampleBuffer(
 8000c12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c16:	4a1f      	ldr	r2, [pc, #124]	@ (8000c94 <audio_init+0x130>)
 8000c18:	4918      	ldr	r1, [pc, #96]	@ (8000c7c <audio_init+0x118>)
 8000c1a:	4817      	ldr	r0, [pc, #92]	@ (8000c78 <audio_init+0x114>)
 8000c1c:	f000 f8d0 	bl	8000dc0 <CopySampleBuffer>
                    &playbackBufferLeft[0],
                    &playbackBufferRight[0],
                    &recordBuffer[0],
                    MY_BUFFER_SIZE_SAMPLES / 2);

                ConvertSampleBufferToDMABuffer(
 8000c20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <audio_init+0x11c>)
 8000c28:	4a14      	ldr	r2, [pc, #80]	@ (8000c7c <audio_init+0x118>)
 8000c2a:	4913      	ldr	r1, [pc, #76]	@ (8000c78 <audio_init+0x114>)
 8000c2c:	4819      	ldr	r0, [pc, #100]	@ (8000c94 <audio_init+0x130>)
 8000c2e:	f000 f875 	bl	8000d1c <ConvertSampleBufferToDMABuffer>
 8000c32:	e015      	b.n	8000c60 <audio_init+0xfc>
                    &saiDMATransmitBuffer[0],
                    MY_BUFFER_SIZE_SAMPLES / 2);
            }
            else
            {
                ExtractSamplesFromDMABuffer(
 8000c34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c38:	4917      	ldr	r1, [pc, #92]	@ (8000c98 <audio_init+0x134>)
 8000c3a:	4818      	ldr	r0, [pc, #96]	@ (8000c9c <audio_init+0x138>)
 8000c3c:	f000 f89c 	bl	8000d78 <ExtractSamplesFromDMABuffer>
                    &saiDMAReceiveBuffer[MY_DMA_BUFFER_SIZE_BYTES / 2],
                    &recordBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    MY_BUFFER_SIZE_SAMPLES/2);

                CopySampleBuffer(
 8000c40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c44:	4a14      	ldr	r2, [pc, #80]	@ (8000c98 <audio_init+0x134>)
 8000c46:	4916      	ldr	r1, [pc, #88]	@ (8000ca0 <audio_init+0x13c>)
 8000c48:	4816      	ldr	r0, [pc, #88]	@ (8000ca4 <audio_init+0x140>)
 8000c4a:	f000 f8b9 	bl	8000dc0 <CopySampleBuffer>
                    &playbackBufferLeft[MY_BUFFER_SIZE_SAMPLES / 2],
                    &playbackBufferRight[MY_BUFFER_SIZE_SAMPLES / 2],
                    &recordBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    MY_BUFFER_SIZE_SAMPLES / 2);

                ConvertSampleBufferToDMABuffer(
 8000c4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <audio_init+0x144>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <audio_init+0x13c>)
 8000c58:	4912      	ldr	r1, [pc, #72]	@ (8000ca4 <audio_init+0x140>)
 8000c5a:	480f      	ldr	r0, [pc, #60]	@ (8000c98 <audio_init+0x134>)
 8000c5c:	f000 f85e 	bl	8000d1c <ConvertSampleBufferToDMABuffer>
                    &playbackBufferRight[MY_BUFFER_SIZE_SAMPLES / 2],
                    &saiDMATransmitBuffer[MY_DMA_BUFFER_SIZE_BYTES / 2],
                    MY_BUFFER_SIZE_SAMPLES / 2);

            }
            audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000c60:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <audio_init+0x12c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
        if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 8000c66:	e7c6      	b.n	8000bf6 <audio_init+0x92>
 8000c68:	20005ad4 	.word	0x20005ad4
 8000c6c:	40015804 	.word	0x40015804
 8000c70:	20005a50 	.word	0x20005a50
 8000c74:	40015824 	.word	0x40015824
 8000c78:	20004250 	.word	0x20004250
 8000c7c:	20004a50 	.word	0x20004a50
 8000c80:	20000250 	.word	0x20000250
 8000c84:	20000130 	.word	0x20000130
 8000c88:	20000134 	.word	0x20000134
 8000c8c:	20002250 	.word	0x20002250
 8000c90:	20005b58 	.word	0x20005b58
 8000c94:	20005250 	.word	0x20005250
 8000c98:	20005650 	.word	0x20005650
 8000c9c:	20003250 	.word	0x20003250
 8000ca0:	20004e50 	.word	0x20004e50
 8000ca4:	20004650 	.word	0x20004650
 8000ca8:	20001250 	.word	0x20001250

08000cac <fill_buffer_with_square_wave>:



static void fill_buffer_with_square_wave(int16_t *buf,
                                         uint32_t num_samples)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
    // Fill up a 100hz square wave
    // 48khz sample rate --> 480 samples in 100 hz --> toggle every 240 samples

    int toggle_period = 240;
 8000cb6:	23f0      	movs	r3, #240	@ 0xf0
 8000cb8:	613b      	str	r3, [r7, #16]
    int count = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    int wave_state = 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61bb      	str	r3, [r7, #24]
    int magnitude = 30000;
 8000cc2:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000cc6:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < num_samples; i++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	e01b      	b.n	8000d06 <fill_buffer_with_square_wave+0x5a>
    {
        buf[i] = magnitude*wave_state;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	fb12 f303 	smulbb	r3, r2, r3
 8000cda:	b299      	uxth	r1, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b20a      	sxth	r2, r1
 8000ce6:	801a      	strh	r2, [r3, #0]
        count++;
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	3301      	adds	r3, #1
 8000cec:	61fb      	str	r3, [r7, #28]

        if (count >= toggle_period)
 8000cee:	69fa      	ldr	r2, [r7, #28]
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	db04      	blt.n	8000d00 <fill_buffer_with_square_wave+0x54>
        {
            count = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
            wave_state = wave_state*(-1); // toggle here
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	425b      	negs	r3, r3
 8000cfe:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < num_samples; i++)
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3301      	adds	r3, #1
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d8df      	bhi.n	8000cce <fill_buffer_with_square_wave+0x22>
        }
        
    }
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	3724      	adds	r7, #36	@ 0x24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <ConvertSampleBufferToDMABuffer>:
static void ConvertSampleBufferToDMABuffer(int16_t *sampleInBuffer,
                                           int16_t *processOutBufferLeft,
                                           int16_t *processOutBufferRight,
                                           uint8_t *dmaBuffer,
                                           uint32_t num_samples)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e018      	b.n	8000d62 <ConvertSampleBufferToDMABuffer+0x46>
    {
        // samples are spaced 8 bytes apart
        int16_t *p = (int16_t *) &dmaBuffer[i*8];
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        *p = processOutBufferLeft[i]; // left channel
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	4413      	add	r3, r2
 8000d42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	801a      	strh	r2, [r3, #0]

#ifdef PASSTHROUGH_RIGHT
        *(p+2) = sampleInBuffer[i]; // right channel
#else
        *(p+2) = processOutBufferRight[i];
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	441a      	add	r2, r3
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	3304      	adds	r3, #4
 8000d56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d5a:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	6a3b      	ldr	r3, [r7, #32]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d3e2      	bcc.n	8000d30 <ConvertSampleBufferToDMABuffer+0x14>
#endif
    }
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <ExtractSamplesFromDMABuffer>:
   for now just take 1 channel
*/
static void ExtractSamplesFromDMABuffer(uint8_t *dmaBuffer,
                                        int16_t *sampleBuffer,
                                        uint32_t num_samples)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < num_samples; ++i)
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	e00f      	b.n	8000daa <ExtractSamplesFromDMABuffer+0x32>
    {
        int16_t * samplePointer = (int16_t *) &dmaBuffer[i*8];
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	4413      	add	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        sampleBuffer[i] = *samplePointer;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000da2:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < num_samples; ++i)
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	3301      	adds	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3eb      	bcc.n	8000d8a <ExtractSamplesFromDMABuffer+0x12>
    }
}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	371c      	adds	r7, #28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <CopySampleBuffer>:

static void CopySampleBuffer(int16_t *dst_left,
                             int16_t *dst_right,
                             int16_t *src,
                             uint32_t num_samples)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	e020      	b.n	8000e16 <CopySampleBuffer+0x56>
          ece5210.c

          the default is for a straight passthrough, but you can 
          modify it to do some signal processing
        */
        dst_left[i] = process_sample_left(src[i]);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	18d4      	adds	r4, r2, r3
 8000de8:	4608      	mov	r0, r1
 8000dea:	f7ff fda5 	bl	8000938 <process_sample_left>
 8000dee:	4603      	mov	r3, r0
 8000df0:	8023      	strh	r3, [r4, #0]

#ifndef PASSTHROUGH_RIGHT
        dst_right[i] = process_sample_right(src[i]);
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	18d4      	adds	r4, r2, r3
 8000e06:	4608      	mov	r0, r1
 8000e08:	f7ff fdbc 	bl	8000984 <process_sample_right>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	8023      	strh	r3, [r4, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d3da      	bcc.n	8000dd4 <CopySampleBuffer+0x14>
#endif

    }
}
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	371c      	adds	r7, #28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd90      	pop	{r4, r7, pc}

08000e28 <My_SAI_ClockConfig>:


///////////////////////////////////////////////////////////

static void My_SAI_ClockConfig(uint32_t AudioFreq)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0a6      	sub	sp, #152	@ 0x98
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
    RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

    HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	4618      	mov	r0, r3
 8000e36:	f004 fd19 	bl	800586c <HAL_RCCEx_GetPeriphCLKConfig>

    /* Set the PLL configuration according to the audio frequency */
    if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d009      	beq.n	8000e58 <My_SAI_ClockConfig+0x30>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f245 6222 	movw	r2, #22050	@ 0x5622
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d004      	beq.n	8000e58 <My_SAI_ClockConfig+0x30>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d112      	bne.n	8000e7e <My_SAI_ClockConfig+0x56>
    {
        /* Configure PLLSAI prescalers */
        /* PLLSAI_VCO: VCO_429M
           SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
           SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz */
        rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000e58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000e5c:	60bb      	str	r3, [r7, #8]
        rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8000e5e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e62:	647b      	str	r3, [r7, #68]	@ 0x44
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8000e64:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8000e68:	60fb      	str	r3, [r7, #12]
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	617b      	str	r3, [r7, #20]
        rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8000e6e:	2313      	movs	r3, #19
 8000e70:	62fb      	str	r3, [r7, #44]	@ 0x2c

        HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 fc38 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 8000e7c:	e012      	b.n	8000ea4 <My_SAI_ClockConfig+0x7c>
    {
        /* SAI clock config
           PLLSAI_VCO: VCO_344M
           SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
           SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 49.142/1 = 49.142 Mhz */
        rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000e7e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000e82:	60bb      	str	r3, [r7, #8]
        rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8000e84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e88:	647b      	str	r3, [r7, #68]	@ 0x44
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8000e8a:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8000e8e:	60fb      	str	r3, [r7, #12]
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8000e90:	2307      	movs	r3, #7
 8000e92:	617b      	str	r3, [r7, #20]
        rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c

        HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fc25 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
    }
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	3798      	adds	r7, #152	@ 0x98
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <My_AUDIO_OUT_MspInit>:

static void My_AUDIO_OUT_MspInit(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	@ 0x28
 8000eb0:	af00      	add	r7, sp, #0
    static DMA_HandleTypeDef hdma_sai_tx;
    GPIO_InitTypeDef  gpio_init_structure;

    /* Enable SAI clock */
    AUDIO_OUT_SAIx_CLK_ENABLE();
 8000eb2:	4b46      	ldr	r3, [pc, #280]	@ (8000fcc <My_AUDIO_OUT_MspInit+0x120>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a45      	ldr	r2, [pc, #276]	@ (8000fcc <My_AUDIO_OUT_MspInit+0x120>)
 8000eb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b43      	ldr	r3, [pc, #268]	@ (8000fcc <My_AUDIO_OUT_MspInit+0x120>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]

    /* Enable GPIO clock */
    AUDIO_OUT_SAIx_MCLK_ENABLE();
 8000eca:	4b40      	ldr	r3, [pc, #256]	@ (8000fcc <My_AUDIO_OUT_MspInit+0x120>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a3f      	ldr	r2, [pc, #252]	@ (8000fcc <My_AUDIO_OUT_MspInit+0x120>)
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8000fcc <My_AUDIO_OUT_MspInit+0x120>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fcc <My_AUDIO_OUT_MspInit+0x120>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a39      	ldr	r2, [pc, #228]	@ (8000fcc <My_AUDIO_OUT_MspInit+0x120>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b37      	ldr	r3, [pc, #220]	@ (8000fcc <My_AUDIO_OUT_MspInit+0x120>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 8000efa:	2370      	movs	r3, #112	@ 0x70
 8000efc:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	482e      	ldr	r0, [pc, #184]	@ (8000fd0 <My_AUDIO_OUT_MspInit+0x124>)
 8000f16:	f002 f9c1 	bl	800329c <HAL_GPIO_Init>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8000f1a:	2380      	movs	r3, #128	@ 0x80
 8000f1c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	482b      	ldr	r0, [pc, #172]	@ (8000fd4 <My_AUDIO_OUT_MspInit+0x128>)
 8000f26:	f002 f9b9 	bl	800329c <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8000f2a:	4b28      	ldr	r3, [pc, #160]	@ (8000fcc <My_AUDIO_OUT_MspInit+0x120>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a27      	ldr	r2, [pc, #156]	@ (8000fcc <My_AUDIO_OUT_MspInit+0x120>)
 8000f30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b25      	ldr	r3, [pc, #148]	@ (8000fcc <My_AUDIO_OUT_MspInit+0x120>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]

    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8000f42:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000f48:	4b23      	ldr	r3, [pc, #140]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000f4a:	2240      	movs	r2, #64	@ 0x40
 8000f4c:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000f4e:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000f54:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000f56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f5a:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000f5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f62:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000f66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f6a:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000f6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f72:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000f74:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000f76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f7a:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000f84:	2203      	movs	r2, #3
 8000f86:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000f88:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8000f94:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000f96:	4a11      	ldr	r2, [pc, #68]	@ (8000fdc <My_AUDIO_OUT_MspInit+0x130>)
 8000f98:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_out_sai, hdmatx, hdma_sai_tx);
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <My_AUDIO_OUT_MspInit+0x134>)
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000f9e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe0 <My_AUDIO_OUT_MspInit+0x134>)
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8000fa6:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000fa8:	f001 fe5e 	bl	8002c68 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
 8000fac:	480a      	ldr	r0, [pc, #40]	@ (8000fd8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000fae:	f001 fdad 	bl	8002b0c <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	210e      	movs	r1, #14
 8000fb6:	2039      	movs	r0, #57	@ 0x39
 8000fb8:	f001 fd47 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8000fbc:	2039      	movs	r0, #57	@ 0x39
 8000fbe:	f001 fd60 	bl	8002a82 <HAL_NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	@ 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40021800 	.word	0x40021800
 8000fd8:	20005b5c 	.word	0x20005b5c
 8000fdc:	40026428 	.word	0x40026428
 8000fe0:	20005ad4 	.word	0x20005ad4

08000fe4 <My_SAI_Out_Init>:

static void My_SAI_Out_Init(uint32_t AudioFreq)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&haudio_out_sai);
 8000fec:	4b30      	ldr	r3, [pc, #192]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000ffa:	601a      	str	r2, [r3, #0]

    /* Configure SAI_Block_x
       LSBFirst: Disabled
       DataSize: 16 */
    haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24
    haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001002:	4a2b      	ldr	r2, [pc, #172]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	61d3      	str	r3, [r2, #28]
    haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8001008:	4b29      	ldr	r3, [pc, #164]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 800100a:	2200      	movs	r2, #0
 800100c:	605a      	str	r2, [r3, #4]
    haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800100e:	4b28      	ldr	r3, [pc, #160]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
    haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001014:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001016:	2200      	movs	r2, #0
 8001018:	631a      	str	r2, [r3, #48]	@ 0x30
    haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800101a:	4b25      	ldr	r3, [pc, #148]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 800101c:	2280      	movs	r2, #128	@ 0x80
 800101e:	635a      	str	r2, [r3, #52]	@ 0x34
    haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001020:	4b23      	ldr	r3, [pc, #140]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001022:	2200      	movs	r2, #0
 8001024:	639a      	str	r2, [r3, #56]	@ 0x38
    haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001026:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001028:	2200      	movs	r2, #0
 800102a:	63da      	str	r2, [r3, #60]	@ 0x3c
    haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800102c:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
    haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001032:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001034:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001038:	611a      	str	r2, [r3, #16]
    haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800103a:	4b1d      	ldr	r3, [pc, #116]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 800103c:	2201      	movs	r2, #1
 800103e:	619a      	str	r2, [r3, #24]
    haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8001040:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
    haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8001046:	4b1a      	ldr	r3, [pc, #104]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001048:	2200      	movs	r2, #0
 800104a:	629a      	str	r2, [r3, #40]	@ 0x28
    haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800104c:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 800104e:	2200      	movs	r2, #0
 8001050:	62da      	str	r2, [r3, #44]	@ 0x2c
    haudio_out_sai.Init.Mckdiv         = 0;
 8001052:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
       Frame Length: 64
       Frame active Length: 32
       FS Definition: Start frame + Channel Side identification
       FS Polarity: FS active Low
       FS Offset: FS asserted one bit before the first bit of slot 0 */
    haudio_out_sai.FrameInit.FrameLength = 64;
 8001058:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 800105a:	2240      	movs	r2, #64	@ 0x40
 800105c:	641a      	str	r2, [r3, #64]	@ 0x40
    haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001060:	2220      	movs	r2, #32
 8001062:	645a      	str	r2, [r3, #68]	@ 0x44
    haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001066:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800106a:	649a      	str	r2, [r3, #72]	@ 0x48
    haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800106c:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 800106e:	2200      	movs	r2, #0
 8001070:	64da      	str	r2, [r3, #76]	@ 0x4c
    haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001072:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001074:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001078:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Configure SAI Block_x Slot
       Slot First Bit Offset: 0
       Slot Size  : 16
       Slot Number: 4
       Slot Active: All slot actives */
    haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 800107c:	2200      	movs	r2, #0
 800107e:	655a      	str	r2, [r3, #84]	@ 0x54
    haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001080:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001082:	2200      	movs	r2, #0
 8001084:	659a      	str	r2, [r3, #88]	@ 0x58
    haudio_out_sai.SlotInit.SlotNumber = 4;
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001088:	2204      	movs	r2, #4
 800108a:	65da      	str	r2, [r3, #92]	@ 0x5c
    haudio_out_sai.SlotInit.SlotActive = 0xF;
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 800108e:	220f      	movs	r2, #15
 8001090:	661a      	str	r2, [r3, #96]	@ 0x60

    HAL_SAI_Init(&haudio_out_sai);
 8001092:	4807      	ldr	r0, [pc, #28]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 8001094:	f004 fef0 	bl	8005e78 <HAL_SAI_Init>

    /* Enable SAI peripheral to generate MCLK */
    __HAL_SAI_ENABLE(&haudio_out_sai);
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <My_SAI_Out_Init+0xcc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80010a6:	601a      	str	r2, [r3, #0]

}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20005ad4 	.word	0x20005ad4

080010b4 <My_AUDIO_IN_MspInit>:

static void My_AUDIO_IN_MspInit(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
    static DMA_HandleTypeDef hdma_sai_rx;
    GPIO_InitTypeDef  gpio_init_structure;

    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 80010ba:	4b3c      	ldr	r3, [pc, #240]	@ (80011ac <My_AUDIO_IN_MspInit+0xf8>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	4a3b      	ldr	r2, [pc, #236]	@ (80011ac <My_AUDIO_IN_MspInit+0xf8>)
 80010c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c6:	4b39      	ldr	r3, [pc, #228]	@ (80011ac <My_AUDIO_IN_MspInit+0xf8>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 80010d2:	4b36      	ldr	r3, [pc, #216]	@ (80011ac <My_AUDIO_IN_MspInit+0xf8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a35      	ldr	r2, [pc, #212]	@ (80011ac <My_AUDIO_IN_MspInit+0xf8>)
 80010d8:	f043 0310 	orr.w	r3, r3, #16
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b33      	ldr	r3, [pc, #204]	@ (80011ac <My_AUDIO_IN_MspInit+0xf8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80010ea:	2308      	movs	r3, #8
 80010ec:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 80010fa:	2306      	movs	r3, #6
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	4619      	mov	r1, r3
 8001104:	482a      	ldr	r0, [pc, #168]	@ (80011b0 <My_AUDIO_IN_MspInit+0xfc>)
 8001106:	f002 f8c9 	bl	800329c <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800110a:	4b28      	ldr	r3, [pc, #160]	@ (80011ac <My_AUDIO_IN_MspInit+0xf8>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a27      	ldr	r2, [pc, #156]	@ (80011ac <My_AUDIO_IN_MspInit+0xf8>)
 8001110:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <My_AUDIO_IN_MspInit+0xf8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8001122:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 8001124:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001128:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800112a:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001130:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001136:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 8001138:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800113c:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800113e:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 8001140:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001144:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8001146:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 8001148:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800114c:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 8001150:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001154:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 8001158:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800115c:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 8001160:	2200      	movs	r2, #0
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001164:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 8001166:	2203      	movs	r2, #3
 8001168:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 800116c:	2200      	movs	r2, #0
 800116e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8001170:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 8001172:	2200      	movs	r2, #0
 8001174:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001176:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 8001178:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <My_AUDIO_IN_MspInit+0x104>)
 800117a:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_in_sai, hdmarx, hdma_sai_rx);
 800117c:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <My_AUDIO_IN_MspInit+0x108>)
 800117e:	4a0d      	ldr	r2, [pc, #52]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 8001180:	671a      	str	r2, [r3, #112]	@ 0x70
 8001182:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 8001184:	4a0d      	ldr	r2, [pc, #52]	@ (80011bc <My_AUDIO_IN_MspInit+0x108>)
 8001186:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001188:	480a      	ldr	r0, [pc, #40]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 800118a:	f001 fd6d 	bl	8002c68 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 800118e:	4809      	ldr	r0, [pc, #36]	@ (80011b4 <My_AUDIO_IN_MspInit+0x100>)
 8001190:	f001 fcbc 	bl	8002b0c <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	210f      	movs	r1, #15
 8001198:	203c      	movs	r0, #60	@ 0x3c
 800119a:	f001 fc56 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800119e:	203c      	movs	r0, #60	@ 0x3c
 80011a0:	f001 fc6f 	bl	8002a82 <HAL_NVIC_EnableIRQ>
}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40021000 	.word	0x40021000
 80011b4:	20005bbc 	.word	0x20005bbc
 80011b8:	40026470 	.word	0x40026470
 80011bc:	20005a50 	.word	0x20005a50

080011c0 <My_SAI_In_Init>:

static void My_SAI_In_Init(uint32_t AudioFreq)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    /* Initialize SAI1 block B in SLAVE RX synchronous from SAI1 block A */
    /* Initialize the haudio_in_sai Instance parameter */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80011c8:	4b31      	ldr	r3, [pc, #196]	@ (8001290 <My_SAI_In_Init+0xd0>)
 80011ca:	4a32      	ldr	r2, [pc, #200]	@ (8001294 <My_SAI_In_Init+0xd4>)
 80011cc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&haudio_in_sai);
 80011ce:	4b30      	ldr	r3, [pc, #192]	@ (8001290 <My_SAI_In_Init+0xd0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001290 <My_SAI_In_Init+0xd0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80011dc:	601a      	str	r2, [r3, #0]

    /* Configure SAI_Block_x */
    haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 80011de:	4b2c      	ldr	r3, [pc, #176]	@ (8001290 <My_SAI_In_Init+0xd0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	@ 0x24
    haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80011e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001290 <My_SAI_In_Init+0xd0>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	61d3      	str	r3, [r2, #28]
    haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 80011ea:	4b29      	ldr	r3, [pc, #164]	@ (8001290 <My_SAI_In_Init+0xd0>)
 80011ec:	2203      	movs	r2, #3
 80011ee:	605a      	str	r2, [r3, #4]
    haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <My_SAI_In_Init+0xd0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
    haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 80011f6:	4b26      	ldr	r3, [pc, #152]	@ (8001290 <My_SAI_In_Init+0xd0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	631a      	str	r2, [r3, #48]	@ 0x30
    haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 80011fc:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <My_SAI_In_Init+0xd0>)
 80011fe:	2280      	movs	r2, #128	@ 0x80
 8001200:	635a      	str	r2, [r3, #52]	@ 0x34
    haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8001202:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <My_SAI_In_Init+0xd0>)
 8001204:	2200      	movs	r2, #0
 8001206:	639a      	str	r2, [r3, #56]	@ 0x38
    haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001208:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <My_SAI_In_Init+0xd0>)
 800120a:	2200      	movs	r2, #0
 800120c:	63da      	str	r2, [r3, #60]	@ 0x3c
    haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 800120e:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <My_SAI_In_Init+0xd0>)
 8001210:	2201      	movs	r2, #1
 8001212:	609a      	str	r2, [r3, #8]
    haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 8001214:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <My_SAI_In_Init+0xd0>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
    haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800121a:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <My_SAI_In_Init+0xd0>)
 800121c:	2201      	movs	r2, #1
 800121e:	619a      	str	r2, [r3, #24]
    haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8001220:	4b1b      	ldr	r3, [pc, #108]	@ (8001290 <My_SAI_In_Init+0xd0>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
    haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8001226:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <My_SAI_In_Init+0xd0>)
 8001228:	2200      	movs	r2, #0
 800122a:	629a      	str	r2, [r3, #40]	@ 0x28
    haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <My_SAI_In_Init+0xd0>)
 800122e:	2210      	movs	r2, #16
 8001230:	62da      	str	r2, [r3, #44]	@ 0x2c
    haudio_in_sai.Init.Mckdiv         = 0;
 8001232:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <My_SAI_In_Init+0xd0>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]

    /* Configure SAI_Block_x Frame */
    haudio_in_sai.FrameInit.FrameLength       = 64;
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <My_SAI_In_Init+0xd0>)
 800123a:	2240      	movs	r2, #64	@ 0x40
 800123c:	641a      	str	r2, [r3, #64]	@ 0x40
    haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800123e:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <My_SAI_In_Init+0xd0>)
 8001240:	2220      	movs	r2, #32
 8001242:	645a      	str	r2, [r3, #68]	@ 0x44
    haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <My_SAI_In_Init+0xd0>)
 8001246:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800124a:	649a      	str	r2, [r3, #72]	@ 0x48
    haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800124c:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <My_SAI_In_Init+0xd0>)
 800124e:	2200      	movs	r2, #0
 8001250:	64da      	str	r2, [r3, #76]	@ 0x4c
    haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <My_SAI_In_Init+0xd0>)
 8001254:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001258:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Configure SAI Block_x Slot */
    haudio_in_sai.SlotInit.FirstBitOffset = 0;
 800125a:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <My_SAI_In_Init+0xd0>)
 800125c:	2200      	movs	r2, #0
 800125e:	655a      	str	r2, [r3, #84]	@ 0x54
    haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <My_SAI_In_Init+0xd0>)
 8001262:	2200      	movs	r2, #0
 8001264:	659a      	str	r2, [r3, #88]	@ 0x58
    haudio_in_sai.SlotInit.SlotNumber     = 4;
 8001266:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <My_SAI_In_Init+0xd0>)
 8001268:	2204      	movs	r2, #4
 800126a:	65da      	str	r2, [r3, #92]	@ 0x5c
    haudio_in_sai.SlotInit.SlotActive     = 0xF;
 800126c:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <My_SAI_In_Init+0xd0>)
 800126e:	220f      	movs	r2, #15
 8001270:	661a      	str	r2, [r3, #96]	@ 0x60

    HAL_SAI_Init(&haudio_in_sai);
 8001272:	4807      	ldr	r0, [pc, #28]	@ (8001290 <My_SAI_In_Init+0xd0>)
 8001274:	f004 fe00 	bl	8005e78 <HAL_SAI_Init>

    /* Enable SAI peripheral */
    __HAL_SAI_ENABLE(&haudio_in_sai);
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <My_SAI_In_Init+0xd0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <My_SAI_In_Init+0xd0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001286:	601a      	str	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20005a50 	.word	0x20005a50
 8001294:	40015824 	.word	0x40015824

08001298 <BSP_AUDIO_IN_TransferComplete_CallBack>:

void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
    audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 800129e:	2202      	movs	r2, #2
 80012a0:	601a      	str	r2, [r3, #0]
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	20005b58 	.word	0x20005b58

080012b0 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
    audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 80012b4:	4b03      	ldr	r3, [pc, #12]	@ (80012c4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	601a      	str	r2, [r3, #0]
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	20005b58 	.word	0x20005b58

080012c8 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32769i_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80012d0:	f7ff ffee 	bl	80012b0 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80012e4:	f7ff ffd8 	bl	8001298 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <DMA2_Stream4_IRQHandler+0x14>)
 80012f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 fd61 	bl	8002dc0 <HAL_DMA_IRQHandler>
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20005a50 	.word	0x20005a50

08001308 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <DMA2_Stream1_IRQHandler+0x14>)
 800130e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001310:	4618      	mov	r0, r3
 8001312:	f001 fd55 	bl	8002dc0 <HAL_DMA_IRQHandler>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20005ad4 	.word	0x20005ad4

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001324:	2003      	movs	r0, #3
 8001326:	f001 fb85 	bl	8002a34 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	f06f 000b 	mvn.w	r0, #11
 8001332:	f001 fb8a 	bl	8002a4a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	f06f 000a 	mvn.w	r0, #10
 800133e:	f001 fb84 	bl	8002a4a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	f06f 0009 	mvn.w	r0, #9
 800134a:	f001 fb7e 	bl	8002a4a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	f06f 0004 	mvn.w	r0, #4
 8001356:	f001 fb78 	bl	8002a4a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	f06f 0003 	mvn.w	r0, #3
 8001362:	f001 fb72 	bl	8002a4a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	f06f 0001 	mvn.w	r0, #1
 800136e:	f001 fb6c 	bl	8002a4a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800137a:	f001 fb66 	bl	8002a4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}

08001382 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001386:	f001 fa57 	bl	8002838 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800138a:	f001 fbb1 	bl	8002af0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001398:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <SystemInit+0x5c>)
 800139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800139e:	4a14      	ldr	r2, [pc, #80]	@ (80013f0 <SystemInit+0x5c>)
 80013a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013a8:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <SystemInit+0x60>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a11      	ldr	r2, [pc, #68]	@ (80013f4 <SystemInit+0x60>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <SystemInit+0x60>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <SystemInit+0x60>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	490d      	ldr	r1, [pc, #52]	@ (80013f4 <SystemInit+0x60>)
 80013c0:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <SystemInit+0x64>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <SystemInit+0x60>)
 80013c8:	4a0c      	ldr	r2, [pc, #48]	@ (80013fc <SystemInit+0x68>)
 80013ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <SystemInit+0x60>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a08      	ldr	r2, [pc, #32]	@ (80013f4 <SystemInit+0x60>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <SystemInit+0x60>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013de:	4b04      	ldr	r3, [pc, #16]	@ (80013f0 <SystemInit+0x5c>)
 80013e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80013e4:	609a      	str	r2, [r3, #8]
#endif
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00
 80013f4:	40023800 	.word	0x40023800
 80013f8:	fef6ffff 	.word	0xfef6ffff
 80013fc:	24003010 	.word	0x24003010

08001400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001438 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001404:	480d      	ldr	r0, [pc, #52]	@ (800143c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001406:	490e      	ldr	r1, [pc, #56]	@ (8001440 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001408:	4a0e      	ldr	r2, [pc, #56]	@ (8001444 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800140c:	e002      	b.n	8001414 <LoopCopyDataInit>

0800140e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001412:	3304      	adds	r3, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001418:	d3f9      	bcc.n	800140e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141a:	4a0b      	ldr	r2, [pc, #44]	@ (8001448 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800141c:	4c0b      	ldr	r4, [pc, #44]	@ (800144c <LoopFillZerobss+0x26>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001420:	e001      	b.n	8001426 <LoopFillZerobss>

08001422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001424:	3204      	adds	r2, #4

08001426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001428:	d3fb      	bcc.n	8001422 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800142a:	f7ff ffb3 	bl	8001394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142e:	f005 f903 	bl	8006638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001432:	f7ff facd 	bl	80009d0 <main>
  bx  lr    
 8001436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001438:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8001444:	08006b70 	.word	0x08006b70
  ldr r2, =_sbss
 8001448:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 800144c:	20005dac 	.word	0x20005dac

08001450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC_IRQHandler>
	...

08001454 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	4603      	mov	r3, r0
 800145e:	81fb      	strh	r3, [r7, #14]
 8001460:	460b      	mov	r3, r1
 8001462:	81bb      	strh	r3, [r7, #12]
 8001464:	4613      	mov	r3, r2
 8001466:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 800146c:	89bb      	ldrh	r3, [r7, #12]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001472:	89bb      	ldrh	r3, [r7, #12]
 8001474:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001478:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800147e:	f001 f973 	bl	8002768 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001482:	89fb      	ldrh	r3, [r7, #14]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2203      	movs	r2, #3
 8001488:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800148c:	4618      	mov	r0, r3
 800148e:	f000 ffb7 	bl	8002400 <CODEC_IO_Write>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	4413      	add	r3, r2
 800149a:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 800149c:	89fb      	ldrh	r3, [r7, #14]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2200      	movs	r2, #0
 80014a2:	f640 0117 	movw	r1, #2071	@ 0x817
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 ffaa 	bl	8002400 <CODEC_IO_Write>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	4413      	add	r3, r2
 80014b4:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80014b6:	89fb      	ldrh	r3, [r7, #14]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 ff9d 	bl	8002400 <CODEC_IO_Write>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	4413      	add	r3, r2
 80014ce:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80014d0:	89fb      	ldrh	r3, [r7, #14]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	226c      	movs	r2, #108	@ 0x6c
 80014d6:	2139      	movs	r1, #57	@ 0x39
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 ff91 	bl	8002400 <CODEC_IO_Write>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	4413      	add	r3, r2
 80014e6:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80014e8:	8afb      	ldrh	r3, [r7, #22]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00c      	beq.n	8001508 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80014ee:	89fb      	ldrh	r3, [r7, #14]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2213      	movs	r2, #19
 80014f4:	2101      	movs	r1, #1
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 ff82 	bl	8002400 <CODEC_IO_Write>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	4413      	add	r3, r2
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	e00b      	b.n	8001520 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8001508:	89fb      	ldrh	r3, [r7, #14]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2203      	movs	r2, #3
 800150e:	2101      	movs	r1, #1
 8001510:	4618      	mov	r0, r3
 8001512:	f000 ff75 	bl	8002400 <CODEC_IO_Write>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	4413      	add	r3, r2
 800151e:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8001520:	2032      	movs	r0, #50	@ 0x32
 8001522:	f001 f955 	bl	80027d0 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8001526:	8b3b      	ldrh	r3, [r7, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 815f 	beq.w	80017ec <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 800152e:	4bae      	ldr	r3, [pc, #696]	@ (80017e8 <wm8994_Init+0x394>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8001534:	8b3b      	ldrh	r3, [r7, #24]
 8001536:	2b03      	cmp	r3, #3
 8001538:	f000 808c 	beq.w	8001654 <wm8994_Init+0x200>
 800153c:	2b03      	cmp	r3, #3
 800153e:	f300 8111 	bgt.w	8001764 <wm8994_Init+0x310>
 8001542:	2b01      	cmp	r3, #1
 8001544:	d002      	beq.n	800154c <wm8994_Init+0xf8>
 8001546:	2b02      	cmp	r3, #2
 8001548:	d042      	beq.n	80015d0 <wm8994_Init+0x17c>
 800154a:	e10b      	b.n	8001764 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800154c:	89fb      	ldrh	r3, [r7, #14]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8001554:	2105      	movs	r1, #5
 8001556:	4618      	mov	r0, r3
 8001558:	f000 ff52 	bl	8002400 <CODEC_IO_Write>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	4413      	add	r3, r2
 8001564:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2200      	movs	r2, #0
 800156c:	f240 6101 	movw	r1, #1537	@ 0x601
 8001570:	4618      	mov	r0, r3
 8001572:	f000 ff45 	bl	8002400 <CODEC_IO_Write>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	4413      	add	r3, r2
 800157e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8001580:	89fb      	ldrh	r3, [r7, #14]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2200      	movs	r2, #0
 8001586:	f240 6102 	movw	r1, #1538	@ 0x602
 800158a:	4618      	mov	r0, r3
 800158c:	f000 ff38 	bl	8002400 <CODEC_IO_Write>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	4413      	add	r3, r2
 8001598:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800159a:	89fb      	ldrh	r3, [r7, #14]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2202      	movs	r2, #2
 80015a0:	f240 6104 	movw	r1, #1540	@ 0x604
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 ff2b 	bl	8002400 <CODEC_IO_Write>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	4413      	add	r3, r2
 80015b2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80015b4:	89fb      	ldrh	r3, [r7, #14]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2202      	movs	r2, #2
 80015ba:	f240 6105 	movw	r1, #1541	@ 0x605
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 ff1e 	bl	8002400 <CODEC_IO_Write>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	4413      	add	r3, r2
 80015cc:	61fb      	str	r3, [r7, #28]
      break;
 80015ce:	e110      	b.n	80017f2 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80015d0:	89fb      	ldrh	r3, [r7, #14]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f240 3203 	movw	r2, #771	@ 0x303
 80015d8:	2105      	movs	r1, #5
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 ff10 	bl	8002400 <CODEC_IO_Write>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461a      	mov	r2, r3
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	4413      	add	r3, r2
 80015e8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80015ea:	89fb      	ldrh	r3, [r7, #14]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2201      	movs	r2, #1
 80015f0:	f240 6101 	movw	r1, #1537	@ 0x601
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 ff03 	bl	8002400 <CODEC_IO_Write>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	4413      	add	r3, r2
 8001602:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001604:	89fb      	ldrh	r3, [r7, #14]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2201      	movs	r2, #1
 800160a:	f240 6102 	movw	r1, #1538	@ 0x602
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fef6 	bl	8002400 <CODEC_IO_Write>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2200      	movs	r2, #0
 8001624:	f240 6104 	movw	r1, #1540	@ 0x604
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fee9 	bl	8002400 <CODEC_IO_Write>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	4413      	add	r3, r2
 8001636:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001638:	89fb      	ldrh	r3, [r7, #14]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2200      	movs	r2, #0
 800163e:	f240 6105 	movw	r1, #1541	@ 0x605
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fedc 	bl	8002400 <CODEC_IO_Write>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	4413      	add	r3, r2
 8001650:	61fb      	str	r3, [r7, #28]
      break;
 8001652:	e0ce      	b.n	80017f2 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001654:	8afb      	ldrh	r3, [r7, #22]
 8001656:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800165a:	d141      	bne.n	80016e0 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800165c:	89fb      	ldrh	r3, [r7, #14]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8001664:	2105      	movs	r1, #5
 8001666:	4618      	mov	r0, r3
 8001668:	f000 feca 	bl	8002400 <CODEC_IO_Write>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4413      	add	r3, r2
 8001674:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8001676:	89fb      	ldrh	r3, [r7, #14]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2203      	movs	r2, #3
 800167c:	f240 6101 	movw	r1, #1537	@ 0x601
 8001680:	4618      	mov	r0, r3
 8001682:	f000 febd 	bl	8002400 <CODEC_IO_Write>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	4413      	add	r3, r2
 800168e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2203      	movs	r2, #3
 8001696:	f240 6102 	movw	r1, #1538	@ 0x602
 800169a:	4618      	mov	r0, r3
 800169c:	f000 feb0 	bl	8002400 <CODEC_IO_Write>
 80016a0:	4603      	mov	r3, r0
 80016a2:	461a      	mov	r2, r3
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	4413      	add	r3, r2
 80016a8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80016aa:	89fb      	ldrh	r3, [r7, #14]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2203      	movs	r2, #3
 80016b0:	f240 6104 	movw	r1, #1540	@ 0x604
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 fea3 	bl	8002400 <CODEC_IO_Write>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	4413      	add	r3, r2
 80016c2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80016c4:	89fb      	ldrh	r3, [r7, #14]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2203      	movs	r2, #3
 80016ca:	f240 6105 	movw	r1, #1541	@ 0x605
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fe96 	bl	8002400 <CODEC_IO_Write>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80016de:	e088      	b.n	80017f2 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80016e0:	89fb      	ldrh	r3, [r7, #14]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80016e8:	2105      	movs	r1, #5
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fe88 	bl	8002400 <CODEC_IO_Write>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	4413      	add	r3, r2
 80016f8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80016fa:	89fb      	ldrh	r3, [r7, #14]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2201      	movs	r2, #1
 8001700:	f240 6101 	movw	r1, #1537	@ 0x601
 8001704:	4618      	mov	r0, r3
 8001706:	f000 fe7b 	bl	8002400 <CODEC_IO_Write>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001714:	89fb      	ldrh	r3, [r7, #14]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2201      	movs	r2, #1
 800171a:	f240 6102 	movw	r1, #1538	@ 0x602
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fe6e 	bl	8002400 <CODEC_IO_Write>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	4413      	add	r3, r2
 800172c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2202      	movs	r2, #2
 8001734:	f240 6104 	movw	r1, #1540	@ 0x604
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fe61 	bl	8002400 <CODEC_IO_Write>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	4413      	add	r3, r2
 8001746:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2202      	movs	r2, #2
 800174e:	f240 6105 	movw	r1, #1541	@ 0x605
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fe54 	bl	8002400 <CODEC_IO_Write>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	4413      	add	r3, r2
 8001760:	61fb      	str	r3, [r7, #28]
      break;
 8001762:	e046      	b.n	80017f2 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001764:	89fb      	ldrh	r3, [r7, #14]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f240 3203 	movw	r2, #771	@ 0x303
 800176c:	2105      	movs	r1, #5
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fe46 	bl	8002400 <CODEC_IO_Write>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	4413      	add	r3, r2
 800177c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800177e:	89fb      	ldrh	r3, [r7, #14]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2201      	movs	r2, #1
 8001784:	f240 6101 	movw	r1, #1537	@ 0x601
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fe39 	bl	8002400 <CODEC_IO_Write>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001798:	89fb      	ldrh	r3, [r7, #14]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2201      	movs	r2, #1
 800179e:	f240 6102 	movw	r1, #1538	@ 0x602
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fe2c 	bl	8002400 <CODEC_IO_Write>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	4413      	add	r3, r2
 80017b0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80017b2:	89fb      	ldrh	r3, [r7, #14]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2200      	movs	r2, #0
 80017b8:	f240 6104 	movw	r1, #1540	@ 0x604
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fe1f 	bl	8002400 <CODEC_IO_Write>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80017cc:	89fb      	ldrh	r3, [r7, #14]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2200      	movs	r2, #0
 80017d2:	f240 6105 	movw	r1, #1541	@ 0x605
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fe12 	bl	8002400 <CODEC_IO_Write>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4413      	add	r3, r2
 80017e4:	61fb      	str	r3, [r7, #28]
      break;
 80017e6:	e004      	b.n	80017f2 <wm8994_Init+0x39e>
 80017e8:	20005c1c 	.word	0x20005c1c
    }
  }
  else
  {
    outputEnabled = 0;
 80017ec:	4b99      	ldr	r3, [pc, #612]	@ (8001a54 <wm8994_Init+0x600>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80017f2:	8afb      	ldrh	r3, [r7, #22]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 81ab 	beq.w	8001b50 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 80017fa:	4b97      	ldr	r3, [pc, #604]	@ (8001a58 <wm8994_Init+0x604>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8001800:	8afb      	ldrh	r3, [r7, #22]
 8001802:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001806:	f000 8129 	beq.w	8001a5c <wm8994_Init+0x608>
 800180a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800180e:	f300 819b 	bgt.w	8001b48 <wm8994_Init+0x6f4>
 8001812:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001816:	d05a      	beq.n	80018ce <wm8994_Init+0x47a>
 8001818:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800181c:	f300 8194 	bgt.w	8001b48 <wm8994_Init+0x6f4>
 8001820:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001824:	f000 80c6 	beq.w	80019b4 <wm8994_Init+0x560>
 8001828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800182c:	f040 818c 	bne.w	8001b48 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8001830:	89fb      	ldrh	r3, [r7, #14]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8001838:	2104      	movs	r1, #4
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fde0 	bl	8002400 <CODEC_IO_Write>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	4413      	add	r3, r2
 8001848:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800184a:	89fb      	ldrh	r3, [r7, #14]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	22db      	movs	r2, #219	@ 0xdb
 8001850:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fdd3 	bl	8002400 <CODEC_IO_Write>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8001864:	89fb      	ldrh	r3, [r7, #14]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 800186c:	2102      	movs	r1, #2
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fdc6 	bl	8002400 <CODEC_IO_Write>
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4413      	add	r3, r2
 800187c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800187e:	89fb      	ldrh	r3, [r7, #14]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2202      	movs	r2, #2
 8001884:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fdb9 	bl	8002400 <CODEC_IO_Write>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8001898:	89fb      	ldrh	r3, [r7, #14]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2202      	movs	r2, #2
 800189e:	f240 6109 	movw	r1, #1545	@ 0x609
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fdac 	bl	8002400 <CODEC_IO_Write>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	4413      	add	r3, r2
 80018b0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80018b2:	89fb      	ldrh	r3, [r7, #14]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	220e      	movs	r2, #14
 80018b8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fd9f 	bl	8002400 <CODEC_IO_Write>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	61fb      	str	r3, [r7, #28]
      break;
 80018cc:	e143      	b.n	8001b56 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80018ce:	89fb      	ldrh	r3, [r7, #14]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2211      	movs	r2, #17
 80018d4:	2128      	movs	r1, #40	@ 0x28
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 fd92 	bl	8002400 <CODEC_IO_Write>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	4413      	add	r3, r2
 80018e4:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      //counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);

      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 80018e6:	89fb      	ldrh	r3, [r7, #14]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2220      	movs	r2, #32
 80018ec:	2129      	movs	r1, #41	@ 0x29
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fd86 	bl	8002400 <CODEC_IO_Write>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	4413      	add	r3, r2
 80018fc:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);

      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 80018fe:	89fb      	ldrh	r3, [r7, #14]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2220      	movs	r2, #32
 8001904:	212a      	movs	r1, #42	@ 0x2a
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fd7a 	bl	8002400 <CODEC_IO_Write>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	4413      	add	r3, r2
 8001914:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8001916:	89fb      	ldrh	r3, [r7, #14]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f240 3203 	movw	r2, #771	@ 0x303
 800191e:	2104      	movs	r1, #4
 8001920:	4618      	mov	r0, r3
 8001922:	f000 fd6d 	bl	8002400 <CODEC_IO_Write>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	4413      	add	r3, r2
 800192e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001930:	89fb      	ldrh	r3, [r7, #14]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	22db      	movs	r2, #219	@ 0xdb
 8001936:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fd60 	bl	8002400 <CODEC_IO_Write>
 8001940:	4603      	mov	r3, r0
 8001942:	461a      	mov	r2, r3
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	4413      	add	r3, r2
 8001948:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800194a:	89fb      	ldrh	r3, [r7, #14]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f246 3250 	movw	r2, #25424	@ 0x6350
 8001952:	2102      	movs	r1, #2
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fd53 	bl	8002400 <CODEC_IO_Write>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	4413      	add	r3, r2
 8001962:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001964:	89fb      	ldrh	r3, [r7, #14]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2202      	movs	r2, #2
 800196a:	f240 6106 	movw	r1, #1542	@ 0x606
 800196e:	4618      	mov	r0, r3
 8001970:	f000 fd46 	bl	8002400 <CODEC_IO_Write>
 8001974:	4603      	mov	r3, r0
 8001976:	461a      	mov	r2, r3
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	4413      	add	r3, r2
 800197c:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800197e:	89fb      	ldrh	r3, [r7, #14]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2202      	movs	r2, #2
 8001984:	f240 6107 	movw	r1, #1543	@ 0x607
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fd39 	bl	8002400 <CODEC_IO_Write>
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001998:	89fb      	ldrh	r3, [r7, #14]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	220d      	movs	r2, #13
 800199e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd2c 	bl	8002400 <CODEC_IO_Write>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	4413      	add	r3, r2
 80019b0:	61fb      	str	r3, [r7, #28]
      break;
 80019b2:	e0d0      	b.n	8001b56 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80019b4:	89fb      	ldrh	r3, [r7, #14]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80019bc:	2104      	movs	r1, #4
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fd1e 	bl	8002400 <CODEC_IO_Write>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	4413      	add	r3, r2
 80019cc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80019ce:	89fb      	ldrh	r3, [r7, #14]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	22db      	movs	r2, #219	@ 0xdb
 80019d4:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fd11 	bl	8002400 <CODEC_IO_Write>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	4413      	add	r3, r2
 80019e6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80019e8:	89fb      	ldrh	r3, [r7, #14]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	f246 3250 	movw	r2, #25424	@ 0x6350
 80019f0:	2102      	movs	r1, #2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fd04 	bl	8002400 <CODEC_IO_Write>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	4413      	add	r3, r2
 8001a00:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001a02:	89fb      	ldrh	r3, [r7, #14]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2202      	movs	r2, #2
 8001a08:	f240 6106 	movw	r1, #1542	@ 0x606
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 fcf7 	bl	8002400 <CODEC_IO_Write>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	4413      	add	r3, r2
 8001a1a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001a1c:	89fb      	ldrh	r3, [r7, #14]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2202      	movs	r2, #2
 8001a22:	f240 6107 	movw	r1, #1543	@ 0x607
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fcea 	bl	8002400 <CODEC_IO_Write>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	4413      	add	r3, r2
 8001a34:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001a36:	89fb      	ldrh	r3, [r7, #14]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	220d      	movs	r2, #13
 8001a3c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 fcdd 	bl	8002400 <CODEC_IO_Write>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	61fb      	str	r3, [r7, #28]
      break; 
 8001a50:	e081      	b.n	8001b56 <wm8994_Init+0x702>
 8001a52:	bf00      	nop
 8001a54:	20005c1c 	.word	0x20005c1c
 8001a58:	20005c20 	.word	0x20005c20
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8001a5c:	89fb      	ldrh	r3, [r7, #14]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8001a64:	2104      	movs	r1, #4
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 fcca 	bl	8002400 <CODEC_IO_Write>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	4413      	add	r3, r2
 8001a74:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8001a76:	89fb      	ldrh	r3, [r7, #14]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	22db      	movs	r2, #219	@ 0xdb
 8001a7c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fcbd 	bl	8002400 <CODEC_IO_Write>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	22db      	movs	r2, #219	@ 0xdb
 8001a96:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fcb0 	bl	8002400 <CODEC_IO_Write>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8001aaa:	89fb      	ldrh	r3, [r7, #14]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 fca3 	bl	8002400 <CODEC_IO_Write>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001ac4:	89fb      	ldrh	r3, [r7, #14]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2202      	movs	r2, #2
 8001aca:	f240 6106 	movw	r1, #1542	@ 0x606
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fc96 	bl	8002400 <CODEC_IO_Write>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	4413      	add	r3, r2
 8001adc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001ade:	89fb      	ldrh	r3, [r7, #14]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f240 6107 	movw	r1, #1543	@ 0x607
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 fc89 	bl	8002400 <CODEC_IO_Write>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	4413      	add	r3, r2
 8001af6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8001af8:	89fb      	ldrh	r3, [r7, #14]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2202      	movs	r2, #2
 8001afe:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fc7c 	bl	8002400 <CODEC_IO_Write>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	4413      	add	r3, r2
 8001b10:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2202      	movs	r2, #2
 8001b18:	f240 6109 	movw	r1, #1545	@ 0x609
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fc6f 	bl	8002400 <CODEC_IO_Write>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	4413      	add	r3, r2
 8001b2a:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001b2c:	89fb      	ldrh	r3, [r7, #14]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	220d      	movs	r2, #13
 8001b32:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fc62 	bl	8002400 <CODEC_IO_Write>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	4413      	add	r3, r2
 8001b44:	61fb      	str	r3, [r7, #28]
      break;    
 8001b46:	e006      	b.n	8001b56 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	61fb      	str	r3, [r7, #28]
      break;
 8001b4e:	e002      	b.n	8001b56 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8001b50:	4bb1      	ldr	r3, [pc, #708]	@ (8001e18 <wm8994_Init+0x9c4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4ab0      	ldr	r2, [pc, #704]	@ (8001e1c <wm8994_Init+0x9c8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d079      	beq.n	8001c52 <wm8994_Init+0x7fe>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4aae      	ldr	r2, [pc, #696]	@ (8001e1c <wm8994_Init+0x9c8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	f200 80ad 	bhi.w	8001cc2 <wm8994_Init+0x86e>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d061      	beq.n	8001c36 <wm8994_Init+0x7e2>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	f200 80a2 	bhi.w	8001cc2 <wm8994_Init+0x86e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001b84:	4293      	cmp	r3, r2
 8001b86:	f000 808e 	beq.w	8001ca6 <wm8994_Init+0x852>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001b90:	4293      	cmp	r3, r2
 8001b92:	f200 8096 	bhi.w	8001cc2 <wm8994_Init+0x86e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001b9c:	d03d      	beq.n	8001c1a <wm8994_Init+0x7c6>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001ba4:	f200 808d 	bhi.w	8001cc2 <wm8994_Init+0x86e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d06b      	beq.n	8001c8a <wm8994_Init+0x836>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	f200 8082 	bhi.w	8001cc2 <wm8994_Init+0x86e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001bc4:	d01b      	beq.n	8001bfe <wm8994_Init+0x7aa>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001bcc:	d879      	bhi.n	8001cc2 <wm8994_Init+0x86e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001bd4:	d005      	beq.n	8001be2 <wm8994_Init+0x78e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d046      	beq.n	8001c6e <wm8994_Init+0x81a>
 8001be0:	e06f      	b.n	8001cc2 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8001be2:	89fb      	ldrh	r3, [r7, #14]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2203      	movs	r2, #3
 8001be8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fc07 	bl	8002400 <CODEC_IO_Write>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	61fb      	str	r3, [r7, #28]
    break;
 8001bfc:	e06f      	b.n	8001cde <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8001bfe:	89fb      	ldrh	r3, [r7, #14]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2233      	movs	r2, #51	@ 0x33
 8001c04:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 fbf9 	bl	8002400 <CODEC_IO_Write>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	4413      	add	r3, r2
 8001c16:	61fb      	str	r3, [r7, #28]
    break;
 8001c18:	e061      	b.n	8001cde <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8001c1a:	89fb      	ldrh	r3, [r7, #14]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2263      	movs	r2, #99	@ 0x63
 8001c20:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fbeb 	bl	8002400 <CODEC_IO_Write>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	4413      	add	r3, r2
 8001c32:	61fb      	str	r3, [r7, #28]
    break;
 8001c34:	e053      	b.n	8001cde <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001c36:	89fb      	ldrh	r3, [r7, #14]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2283      	movs	r2, #131	@ 0x83
 8001c3c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 fbdd 	bl	8002400 <CODEC_IO_Write>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	61fb      	str	r3, [r7, #28]
    break;
 8001c50:	e045      	b.n	8001cde <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8001c52:	89fb      	ldrh	r3, [r7, #14]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	22a3      	movs	r2, #163	@ 0xa3
 8001c58:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 fbcf 	bl	8002400 <CODEC_IO_Write>
 8001c62:	4603      	mov	r3, r0
 8001c64:	461a      	mov	r2, r3
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	4413      	add	r3, r2
 8001c6a:	61fb      	str	r3, [r7, #28]
    break;
 8001c6c:	e037      	b.n	8001cde <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8001c6e:	89fb      	ldrh	r3, [r7, #14]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2213      	movs	r2, #19
 8001c74:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fbc1 	bl	8002400 <CODEC_IO_Write>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	4413      	add	r3, r2
 8001c86:	61fb      	str	r3, [r7, #28]
    break;
 8001c88:	e029      	b.n	8001cde <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8001c8a:	89fb      	ldrh	r3, [r7, #14]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2243      	movs	r2, #67	@ 0x43
 8001c90:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fbb3 	bl	8002400 <CODEC_IO_Write>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	61fb      	str	r3, [r7, #28]
    break;
 8001ca4:	e01b      	b.n	8001cde <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8001ca6:	89fb      	ldrh	r3, [r7, #14]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2273      	movs	r2, #115	@ 0x73
 8001cac:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fba5 	bl	8002400 <CODEC_IO_Write>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	61fb      	str	r3, [r7, #28]
    break; 
 8001cc0:	e00d      	b.n	8001cde <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001cc2:	89fb      	ldrh	r3, [r7, #14]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2283      	movs	r2, #131	@ 0x83
 8001cc8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 fb97 	bl	8002400 <CODEC_IO_Write>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	4413      	add	r3, r2
 8001cda:	61fb      	str	r3, [r7, #28]
    break; 
 8001cdc:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001cde:	8afb      	ldrh	r3, [r7, #22]
 8001ce0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ce4:	d10e      	bne.n	8001d04 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8001ce6:	89fb      	ldrh	r3, [r7, #14]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f244 0218 	movw	r2, #16408	@ 0x4018
 8001cee:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fb84 	bl	8002400 <CODEC_IO_Write>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	4413      	add	r3, r2
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	e00d      	b.n	8001d20 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8001d04:	89fb      	ldrh	r3, [r7, #14]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	f244 0210 	movw	r2, #16400	@ 0x4010
 8001d0c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fb75 	bl	8002400 <CODEC_IO_Write>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8001d20:	89fb      	ldrh	r3, [r7, #14]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2200      	movs	r2, #0
 8001d26:	f240 3102 	movw	r1, #770	@ 0x302
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fb68 	bl	8002400 <CODEC_IO_Write>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	4413      	add	r3, r2
 8001d38:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8001d3a:	89fb      	ldrh	r3, [r7, #14]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	220a      	movs	r2, #10
 8001d40:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fb5b 	bl	8002400 <CODEC_IO_Write>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	4413      	add	r3, r2
 8001d52:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8001d54:	89fb      	ldrh	r3, [r7, #14]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fb4e 	bl	8002400 <CODEC_IO_Write>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8001d6e:	8b3b      	ldrh	r3, [r7, #24]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8123 	beq.w	8001fbc <wm8994_Init+0xb68>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8001d76:	89fb      	ldrh	r3, [r7, #14]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001d7e:	2103      	movs	r1, #3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 fb3d 	bl	8002400 <CODEC_IO_Write>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8001d90:	89fb      	ldrh	r3, [r7, #14]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	2122      	movs	r1, #34	@ 0x22
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 fb31 	bl	8002400 <CODEC_IO_Write>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	4413      	add	r3, r2
 8001da6:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8001da8:	89fb      	ldrh	r3, [r7, #14]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2200      	movs	r2, #0
 8001dae:	2123      	movs	r1, #35	@ 0x23
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fb25 	bl	8002400 <CODEC_IO_Write>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8001dc0:	89fb      	ldrh	r3, [r7, #14]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001dc8:	2136      	movs	r1, #54	@ 0x36
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 fb18 	bl	8002400 <CODEC_IO_Write>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f243 0203 	movw	r2, #12291	@ 0x3003
 8001de2:	2101      	movs	r1, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 fb0b 	bl	8002400 <CODEC_IO_Write>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4413      	add	r3, r2
 8001df2:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001df4:	8afb      	ldrh	r3, [r7, #22]
 8001df6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001dfa:	d111      	bne.n	8001e20 <wm8994_Init+0x9cc>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8001dfc:	89fb      	ldrh	r3, [r7, #14]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f240 2205 	movw	r2, #517	@ 0x205
 8001e04:	2151      	movs	r1, #81	@ 0x51
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fafa 	bl	8002400 <CODEC_IO_Write>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	4413      	add	r3, r2
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	e00f      	b.n	8001e38 <wm8994_Init+0x9e4>
 8001e18:	20005c20 	.word	0x20005c20
 8001e1c:	00017700 	.word	0x00017700
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8001e20:	89fb      	ldrh	r3, [r7, #14]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2205      	movs	r2, #5
 8001e26:	2151      	movs	r1, #81	@ 0x51
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fae9 	bl	8002400 <CODEC_IO_Write>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461a      	mov	r2, r3
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	4413      	add	r3, r2
 8001e36:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8001e38:	8b7b      	ldrh	r3, [r7, #26]
 8001e3a:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8001e3e:	f043 0303 	orr.w	r3, r3, #3
 8001e42:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	8b7a      	ldrh	r2, [r7, #26]
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fad7 	bl	8002400 <CODEC_IO_Write>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	4413      	add	r3, r2
 8001e5a:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2222      	movs	r2, #34	@ 0x22
 8001e62:	2160      	movs	r1, #96	@ 0x60
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 facb 	bl	8002400 <CODEC_IO_Write>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	4413      	add	r3, r2
 8001e72:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8001e74:	89fb      	ldrh	r3, [r7, #14]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8001e7c:	214c      	movs	r1, #76	@ 0x4c
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fabe 	bl	8002400 <CODEC_IO_Write>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8001e8e:	200f      	movs	r0, #15
 8001e90:	f000 fc9e 	bl	80027d0 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8001e94:	89fb      	ldrh	r3, [r7, #14]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2201      	movs	r2, #1
 8001e9a:	212d      	movs	r1, #45	@ 0x2d
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 faaf 	bl	8002400 <CODEC_IO_Write>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8001eac:	89fb      	ldrh	r3, [r7, #14]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	212e      	movs	r1, #46	@ 0x2e
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 faa3 	bl	8002400 <CODEC_IO_Write>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8001ecc:	2103      	movs	r1, #3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fa96 	bl	8002400 <CODEC_IO_Write>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	4413      	add	r3, r2
 8001edc:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8001ede:	89fb      	ldrh	r3, [r7, #14]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2233      	movs	r2, #51	@ 0x33
 8001ee4:	2154      	movs	r1, #84	@ 0x54
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fa8a 	bl	8002400 <CODEC_IO_Write>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(250);
 8001ef6:	20fa      	movs	r0, #250	@ 0xfa
 8001ef8:	f000 fc6a 	bl	80027d0 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8001efc:	89fb      	ldrh	r3, [r7, #14]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	22ee      	movs	r2, #238	@ 0xee
 8001f02:	2160      	movs	r1, #96	@ 0x60
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fa7b 	bl	8002400 <CODEC_IO_Write>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	4413      	add	r3, r2
 8001f12:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8001f14:	89fb      	ldrh	r3, [r7, #14]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	22c0      	movs	r2, #192	@ 0xc0
 8001f1a:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fa6e 	bl	8002400 <CODEC_IO_Write>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8001f2e:	89fb      	ldrh	r3, [r7, #14]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	22c0      	movs	r2, #192	@ 0xc0
 8001f34:	f240 6111 	movw	r1, #1553	@ 0x611
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fa61 	bl	8002400 <CODEC_IO_Write>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	4413      	add	r3, r2
 8001f46:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8001f48:	89fb      	ldrh	r3, [r7, #14]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fa54 	bl	8002400 <CODEC_IO_Write>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	4413      	add	r3, r2
 8001f60:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8001f62:	89fb      	ldrh	r3, [r7, #14]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	22c0      	movs	r2, #192	@ 0xc0
 8001f68:	f240 6112 	movw	r1, #1554	@ 0x612
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fa47 	bl	8002400 <CODEC_IO_Write>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8001f7c:	89fb      	ldrh	r3, [r7, #14]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	22c0      	movs	r2, #192	@ 0xc0
 8001f82:	f240 6113 	movw	r1, #1555	@ 0x613
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fa3a 	bl	8002400 <CODEC_IO_Write>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	4413      	add	r3, r2
 8001f94:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8001f96:	89fb      	ldrh	r3, [r7, #14]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f240 4122 	movw	r1, #1058	@ 0x422
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fa2d 	bl	8002400 <CODEC_IO_Write>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	4413      	add	r3, r2
 8001fae:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001fb0:	7afa      	ldrb	r2, [r7, #11]
 8001fb2:	89fb      	ldrh	r3, [r7, #14]
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f8b0 	bl	800211c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8001fbc:	8afb      	ldrh	r3, [r7, #22]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80a6 	beq.w	8002110 <wm8994_Init+0xcbc>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8001fc4:	8afb      	ldrh	r3, [r7, #22]
 8001fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fca:	d003      	beq.n	8001fd4 <wm8994_Init+0xb80>
 8001fcc:	8afb      	ldrh	r3, [r7, #22]
 8001fce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fd2:	d12b      	bne.n	800202c <wm8994_Init+0xbd8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001fd4:	8b7b      	ldrh	r3, [r7, #26]
 8001fd6:	f043 0313 	orr.w	r3, r3, #19
 8001fda:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001fdc:	89fb      	ldrh	r3, [r7, #14]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	8b7a      	ldrh	r2, [r7, #26]
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fa0b 	bl	8002400 <CODEC_IO_Write>
 8001fea:	4603      	mov	r3, r0
 8001fec:	461a      	mov	r2, r3
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001ff4:	89fb      	ldrh	r3, [r7, #14]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f9fe 	bl	8002400 <CODEC_IO_Write>
 8002004:	4603      	mov	r3, r0
 8002006:	461a      	mov	r2, r3
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	4413      	add	r3, r2
 800200c:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800200e:	89fb      	ldrh	r3, [r7, #14]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002016:	f240 4111 	movw	r1, #1041	@ 0x411
 800201a:	4618      	mov	r0, r3
 800201c:	f000 f9f0 	bl	8002400 <CODEC_IO_Write>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	4413      	add	r3, r2
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	e06b      	b.n	8002104 <wm8994_Init+0xcb0>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800202c:	8afb      	ldrh	r3, [r7, #22]
 800202e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002032:	d139      	bne.n	80020a8 <wm8994_Init+0xc54>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002034:	8b7b      	ldrh	r3, [r7, #26]
 8002036:	f043 0313 	orr.w	r3, r3, #19
 800203a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800203c:	89fb      	ldrh	r3, [r7, #14]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	8b7a      	ldrh	r2, [r7, #26]
 8002042:	2101      	movs	r1, #1
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f9db 	bl	8002400 <CODEC_IO_Write>
 800204a:	4603      	mov	r3, r0
 800204c:	461a      	mov	r2, r3
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	4413      	add	r3, r2
 8002052:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002054:	89fb      	ldrh	r3, [r7, #14]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2202      	movs	r2, #2
 800205a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f9ce 	bl	8002400 <CODEC_IO_Write>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	4413      	add	r3, r2
 800206c:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800206e:	89fb      	ldrh	r3, [r7, #14]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002076:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f9c0 	bl	8002400 <CODEC_IO_Write>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	4413      	add	r3, r2
 8002088:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800208a:	89fb      	ldrh	r3, [r7, #14]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002092:	f240 4111 	movw	r1, #1041	@ 0x411
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f9b2 	bl	8002400 <CODEC_IO_Write>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	4413      	add	r3, r2
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	e02d      	b.n	8002104 <wm8994_Init+0xcb0>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80020a8:	8afb      	ldrh	r3, [r7, #22]
 80020aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020ae:	d003      	beq.n	80020b8 <wm8994_Init+0xc64>
 80020b0:	8afb      	ldrh	r3, [r7, #22]
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020b6:	d125      	bne.n	8002104 <wm8994_Init+0xcb0>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80020b8:	89fb      	ldrh	r3, [r7, #14]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	220b      	movs	r2, #11
 80020be:	2118      	movs	r1, #24
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 f99d 	bl	8002400 <CODEC_IO_Write>
 80020c6:	4603      	mov	r3, r0
 80020c8:	461a      	mov	r2, r3
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	4413      	add	r3, r2
 80020ce:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 80020d0:	89fb      	ldrh	r3, [r7, #14]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	220b      	movs	r2, #11
 80020d6:	211a      	movs	r1, #26
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 f991 	bl	8002400 <CODEC_IO_Write>
 80020de:	4603      	mov	r3, r0
 80020e0:	461a      	mov	r2, r3
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	4413      	add	r3, r2
 80020e6:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80020f0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f983 	bl	8002400 <CODEC_IO_Write>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	4413      	add	r3, r2
 8002102:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002104:	7afa      	ldrb	r2, [r7, #11]
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f806 	bl	800211c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8002110:	69fb      	ldr	r3, [r7, #28]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3720      	adds	r7, #32
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop

0800211c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	460a      	mov	r2, r1
 8002126:	80fb      	strh	r3, [r7, #6]
 8002128:	4613      	mov	r3, r2
 800212a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8002130:	797b      	ldrb	r3, [r7, #5]
 8002132:	2b64      	cmp	r3, #100	@ 0x64
 8002134:	d80b      	bhi.n	800214e <wm8994_SetVolume+0x32>
 8002136:	797a      	ldrb	r2, [r7, #5]
 8002138:	4613      	mov	r3, r2
 800213a:	019b      	lsls	r3, r3, #6
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	4a86      	ldr	r2, [pc, #536]	@ (8002358 <wm8994_SetVolume+0x23c>)
 8002140:	fb82 1203 	smull	r1, r2, r2, r3
 8002144:	1152      	asrs	r2, r2, #5
 8002146:	17db      	asrs	r3, r3, #31
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	e000      	b.n	8002150 <wm8994_SetVolume+0x34>
 800214e:	2364      	movs	r3, #100	@ 0x64
 8002150:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8002152:	4b82      	ldr	r3, [pc, #520]	@ (800235c <wm8994_SetVolume+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 809b 	beq.w	8002292 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 800215c:	7afb      	ldrb	r3, [r7, #11]
 800215e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002160:	d93d      	bls.n	80021de <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f8fc 	bl	8002364 <wm8994_SetMute>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4413      	add	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	f240 127f 	movw	r2, #383	@ 0x17f
 800217c:	211c      	movs	r1, #28
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f93e 	bl	8002400 <CODEC_IO_Write>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f240 127f 	movw	r2, #383	@ 0x17f
 8002196:	211d      	movs	r1, #29
 8002198:	4618      	mov	r0, r3
 800219a:	f000 f931 	bl	8002400 <CODEC_IO_Write>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4413      	add	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f240 127f 	movw	r2, #383	@ 0x17f
 80021b0:	2126      	movs	r1, #38	@ 0x26
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f924 	bl	8002400 <CODEC_IO_Write>
 80021b8:	4603      	mov	r3, r0
 80021ba:	461a      	mov	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f240 127f 	movw	r2, #383	@ 0x17f
 80021ca:	2127      	movs	r1, #39	@ 0x27
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 f917 	bl	8002400 <CODEC_IO_Write>
 80021d2:	4603      	mov	r3, r0
 80021d4:	461a      	mov	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4413      	add	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e059      	b.n	8002292 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80021de:	797b      	ldrb	r3, [r7, #5]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	2101      	movs	r1, #1
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 f8bb 	bl	8002364 <wm8994_SetMute>
 80021ee:	4602      	mov	r2, r0
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e04c      	b.n	8002292 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 f8b1 	bl	8002364 <wm8994_SetMute>
 8002202:	4602      	mov	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	b2d8      	uxtb	r0, r3
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	b21b      	sxth	r3, r3
 8002212:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002216:	b21b      	sxth	r3, r3
 8002218:	b29b      	uxth	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	211c      	movs	r1, #28
 800221e:	f000 f8ef 	bl	8002400 <CODEC_IO_Write>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4413      	add	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	b2d8      	uxtb	r0, r3
 8002230:	7afb      	ldrb	r3, [r7, #11]
 8002232:	b21b      	sxth	r3, r3
 8002234:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002238:	b21b      	sxth	r3, r3
 800223a:	b29b      	uxth	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	211d      	movs	r1, #29
 8002240:	f000 f8de 	bl	8002400 <CODEC_IO_Write>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	b2d8      	uxtb	r0, r3
 8002252:	7afb      	ldrb	r3, [r7, #11]
 8002254:	b21b      	sxth	r3, r3
 8002256:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800225a:	b21b      	sxth	r3, r3
 800225c:	b29b      	uxth	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	2126      	movs	r1, #38	@ 0x26
 8002262:	f000 f8cd 	bl	8002400 <CODEC_IO_Write>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4413      	add	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	b2d8      	uxtb	r0, r3
 8002274:	7afb      	ldrb	r3, [r7, #11]
 8002276:	b21b      	sxth	r3, r3
 8002278:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800227c:	b21b      	sxth	r3, r3
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	2127      	movs	r1, #39	@ 0x27
 8002284:	f000 f8bc 	bl	8002400 <CODEC_IO_Write>
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8002292:	4b33      	ldr	r3, [pc, #204]	@ (8002360 <wm8994_SetVolume+0x244>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d059      	beq.n	800234e <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800229a:	797b      	ldrb	r3, [r7, #5]
 800229c:	2b63      	cmp	r3, #99	@ 0x63
 800229e:	d80c      	bhi.n	80022ba <wm8994_SetVolume+0x19e>
 80022a0:	797a      	ldrb	r2, [r7, #5]
 80022a2:	4613      	mov	r3, r2
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	4a2b      	ldr	r2, [pc, #172]	@ (8002358 <wm8994_SetVolume+0x23c>)
 80022ac:	fb82 1203 	smull	r1, r2, r2, r3
 80022b0:	1152      	asrs	r2, r2, #5
 80022b2:	17db      	asrs	r3, r3, #31
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	e000      	b.n	80022bc <wm8994_SetVolume+0x1a0>
 80022ba:	23ef      	movs	r3, #239	@ 0xef
 80022bc:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	b2d8      	uxtb	r0, r3
 80022c2:	7afb      	ldrb	r3, [r7, #11]
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022d4:	f000 f894 	bl	8002400 <CODEC_IO_Write>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	b2d8      	uxtb	r0, r3
 80022e6:	7afb      	ldrb	r3, [r7, #11]
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ee:	b21b      	sxth	r3, r3
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	f240 4101 	movw	r1, #1025	@ 0x401
 80022f8:	f000 f882 	bl	8002400 <CODEC_IO_Write>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	b2d8      	uxtb	r0, r3
 800230a:	7afb      	ldrb	r3, [r7, #11]
 800230c:	b21b      	sxth	r3, r3
 800230e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002312:	b21b      	sxth	r3, r3
 8002314:	b29b      	uxth	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	f240 4104 	movw	r1, #1028	@ 0x404
 800231c:	f000 f870 	bl	8002400 <CODEC_IO_Write>
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	b2d8      	uxtb	r0, r3
 800232e:	7afb      	ldrb	r3, [r7, #11]
 8002330:	b21b      	sxth	r3, r3
 8002332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002336:	b21b      	sxth	r3, r3
 8002338:	b29b      	uxth	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	f240 4105 	movw	r1, #1029	@ 0x405
 8002340:	f000 f85e 	bl	8002400 <CODEC_IO_Write>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	51eb851f 	.word	0x51eb851f
 800235c:	20005c1c 	.word	0x20005c1c
 8002360:	20005c20 	.word	0x20005c20

08002364 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8002374:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <wm8994_SetMute+0x98>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d039      	beq.n	80023f0 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d11c      	bne.n	80023bc <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800238a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f836 	bl	8002400 <CODEC_IO_Write>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023a6:	f240 4122 	movw	r1, #1058	@ 0x422
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f828 	bl	8002400 <CODEC_IO_Write>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4413      	add	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	e019      	b.n	80023f0 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2200      	movs	r2, #0
 80023c2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 f81a 	bl	8002400 <CODEC_IO_Write>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2200      	movs	r2, #0
 80023dc:	f240 4122 	movw	r1, #1058	@ 0x422
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 f80d 	bl	8002400 <CODEC_IO_Write>
 80023e6:	4603      	mov	r3, r0
 80023e8:	461a      	mov	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4413      	add	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80023f0:	68fb      	ldr	r3, [r7, #12]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20005c1c 	.word	0x20005c1c

08002400 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
 800240a:	460b      	mov	r3, r1
 800240c:	80bb      	strh	r3, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	88b9      	ldrh	r1, [r7, #4]
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f9ad 	bl	800277c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	b2db      	uxtb	r3, r3
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 800243a:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <BSP_LED_Init+0x54>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	4a11      	ldr	r2, [pc, #68]	@ (8002484 <BSP_LED_Init+0x54>)
 8002440:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002444:	6313      	str	r3, [r2, #48]	@ 0x30
 8002446:	4b0f      	ldr	r3, [pc, #60]	@ (8002484 <BSP_LED_Init+0x54>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	4a0c      	ldr	r2, [pc, #48]	@ (8002488 <BSP_LED_Init+0x58>)
 8002456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800245c:	2301      	movs	r3, #1
 800245e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8002460:	2301      	movs	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	4a08      	ldr	r2, [pc, #32]	@ (800248c <BSP_LED_Init+0x5c>)
 800246c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002470:	f107 020c 	add.w	r2, r7, #12
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f000 ff10 	bl	800329c <HAL_GPIO_Init>

}
 800247c:	bf00      	nop
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	2000013c 	.word	0x2000013c
 800248c:	20000144 	.word	0x20000144

08002490 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	4a07      	ldr	r2, [pc, #28]	@ (80024bc <BSP_LED_On+0x2c>)
 800249e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	4a06      	ldr	r2, [pc, #24]	@ (80024c0 <BSP_LED_On+0x30>)
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2201      	movs	r2, #1
 80024ae:	4619      	mov	r1, r3
 80024b0:	f001 f8a0 	bl	80035f4 <HAL_GPIO_WritePin>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000144 	.word	0x20000144
 80024c0:	2000013c 	.word	0x2000013c

080024c4 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	4a07      	ldr	r2, [pc, #28]	@ (80024f0 <BSP_LED_Off+0x2c>)
 80024d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	4a06      	ldr	r2, [pc, #24]	@ (80024f4 <BSP_LED_Off+0x30>)
 80024da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2200      	movs	r2, #0
 80024e2:	4619      	mov	r1, r3
 80024e4:	f001 f886 	bl	80035f4 <HAL_GPIO_WritePin>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000144 	.word	0x20000144
 80024f4:	2000013c 	.word	0x2000013c

080024f8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08c      	sub	sp, #48	@ 0x30
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a58      	ldr	r2, [pc, #352]	@ (8002664 <I2Cx_MspInit+0x16c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d15b      	bne.n	80025c0 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002508:	4b57      	ldr	r3, [pc, #348]	@ (8002668 <I2Cx_MspInit+0x170>)
 800250a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250c:	4a56      	ldr	r2, [pc, #344]	@ (8002668 <I2Cx_MspInit+0x170>)
 800250e:	f043 0308 	orr.w	r3, r3, #8
 8002512:	6313      	str	r3, [r2, #48]	@ 0x30
 8002514:	4b54      	ldr	r3, [pc, #336]	@ (8002668 <I2Cx_MspInit+0x170>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002520:	4b51      	ldr	r3, [pc, #324]	@ (8002668 <I2Cx_MspInit+0x170>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002524:	4a50      	ldr	r2, [pc, #320]	@ (8002668 <I2Cx_MspInit+0x170>)
 8002526:	f043 0302 	orr.w	r3, r3, #2
 800252a:	6313      	str	r3, [r2, #48]	@ 0x30
 800252c:	4b4e      	ldr	r3, [pc, #312]	@ (8002668 <I2Cx_MspInit+0x170>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002538:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800253c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800253e:	2312      	movs	r3, #18
 8002540:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002546:	2302      	movs	r3, #2
 8002548:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 800254a:	2304      	movs	r3, #4
 800254c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 800254e:	f107 031c 	add.w	r3, r7, #28
 8002552:	4619      	mov	r1, r3
 8002554:	4845      	ldr	r0, [pc, #276]	@ (800266c <I2Cx_MspInit+0x174>)
 8002556:	f000 fea1 	bl	800329c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 800255e:	230b      	movs	r3, #11
 8002560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4619      	mov	r1, r3
 8002568:	4841      	ldr	r0, [pc, #260]	@ (8002670 <I2Cx_MspInit+0x178>)
 800256a:	f000 fe97 	bl	800329c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800256e:	4b3e      	ldr	r3, [pc, #248]	@ (8002668 <I2Cx_MspInit+0x170>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	4a3d      	ldr	r2, [pc, #244]	@ (8002668 <I2Cx_MspInit+0x170>)
 8002574:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002578:	6413      	str	r3, [r2, #64]	@ 0x40
 800257a:	4b3b      	ldr	r3, [pc, #236]	@ (8002668 <I2Cx_MspInit+0x170>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002586:	4b38      	ldr	r3, [pc, #224]	@ (8002668 <I2Cx_MspInit+0x170>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	4a37      	ldr	r2, [pc, #220]	@ (8002668 <I2Cx_MspInit+0x170>)
 800258c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002590:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002592:	4b35      	ldr	r3, [pc, #212]	@ (8002668 <I2Cx_MspInit+0x170>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a34      	ldr	r2, [pc, #208]	@ (8002668 <I2Cx_MspInit+0x170>)
 8002598:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800259c:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	210f      	movs	r1, #15
 80025a2:	205f      	movs	r0, #95	@ 0x5f
 80025a4:	f000 fa51 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80025a8:	205f      	movs	r0, #95	@ 0x5f
 80025aa:	f000 fa6a 	bl	8002a82 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	210f      	movs	r1, #15
 80025b2:	2060      	movs	r0, #96	@ 0x60
 80025b4:	f000 fa49 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 80025b8:	2060      	movs	r0, #96	@ 0x60
 80025ba:	f000 fa62 	bl	8002a82 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80025be:	e04d      	b.n	800265c <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80025c0:	4b29      	ldr	r3, [pc, #164]	@ (8002668 <I2Cx_MspInit+0x170>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c4:	4a28      	ldr	r2, [pc, #160]	@ (8002668 <I2Cx_MspInit+0x170>)
 80025c6:	f043 0302 	orr.w	r3, r3, #2
 80025ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80025cc:	4b26      	ldr	r3, [pc, #152]	@ (8002668 <I2Cx_MspInit+0x170>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80025d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025dc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80025de:	2312      	movs	r3, #18
 80025e0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025e6:	2302      	movs	r3, #2
 80025e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80025ea:	2304      	movs	r3, #4
 80025ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025ee:	f107 031c 	add.w	r3, r7, #28
 80025f2:	4619      	mov	r1, r3
 80025f4:	481e      	ldr	r0, [pc, #120]	@ (8002670 <I2Cx_MspInit+0x178>)
 80025f6:	f000 fe51 	bl	800329c <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80025fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	4619      	mov	r1, r3
 8002606:	481a      	ldr	r0, [pc, #104]	@ (8002670 <I2Cx_MspInit+0x178>)
 8002608:	f000 fe48 	bl	800329c <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800260c:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <I2Cx_MspInit+0x170>)
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	4a15      	ldr	r2, [pc, #84]	@ (8002668 <I2Cx_MspInit+0x170>)
 8002612:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002616:	6413      	str	r3, [r2, #64]	@ 0x40
 8002618:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <I2Cx_MspInit+0x170>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002624:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <I2Cx_MspInit+0x170>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	4a0f      	ldr	r2, [pc, #60]	@ (8002668 <I2Cx_MspInit+0x170>)
 800262a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800262e:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002630:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <I2Cx_MspInit+0x170>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4a0c      	ldr	r2, [pc, #48]	@ (8002668 <I2Cx_MspInit+0x170>)
 8002636:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800263a:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	210f      	movs	r1, #15
 8002640:	201f      	movs	r0, #31
 8002642:	f000 fa02 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002646:	201f      	movs	r0, #31
 8002648:	f000 fa1b 	bl	8002a82 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800264c:	2200      	movs	r2, #0
 800264e:	210f      	movs	r1, #15
 8002650:	2020      	movs	r0, #32
 8002652:	f000 f9fa 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002656:	2020      	movs	r0, #32
 8002658:	f000 fa13 	bl	8002a82 <HAL_NVIC_EnableIRQ>
}
 800265c:	bf00      	nop
 800265e:	3730      	adds	r7, #48	@ 0x30
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20005c24 	.word	0x20005c24
 8002668:	40023800 	.word	0x40023800
 800266c:	40020c00 	.word	0x40020c00
 8002670:	40020400 	.word	0x40020400

08002674 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f001 f9cd 	bl	8003a1c <HAL_I2C_GetState>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d125      	bne.n	80026d4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a14      	ldr	r2, [pc, #80]	@ (80026dc <I2Cx_Init+0x68>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d103      	bne.n	8002698 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a13      	ldr	r2, [pc, #76]	@ (80026e0 <I2Cx_Init+0x6c>)
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e002      	b.n	800269e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a12      	ldr	r2, [pc, #72]	@ (80026e4 <I2Cx_Init+0x70>)
 800269c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a11      	ldr	r2, [pc, #68]	@ (80026e8 <I2Cx_Init+0x74>)
 80026a2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff15 	bl	80024f8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 ffaa 	bl	8003628 <HAL_I2C_Init>
  }
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20005c24 	.word	0x20005c24
 80026e0:	40006000 	.word	0x40006000
 80026e4:	40005400 	.word	0x40005400
 80026e8:	40912732 	.word	0x40912732

080026ec <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	@ 0x28
 80026f0:	af04      	add	r7, sp, #16
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	4608      	mov	r0, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	461a      	mov	r2, r3
 80026fa:	4603      	mov	r3, r0
 80026fc:	72fb      	strb	r3, [r7, #11]
 80026fe:	460b      	mov	r3, r1
 8002700:	813b      	strh	r3, [r7, #8]
 8002702:	4613      	mov	r3, r2
 8002704:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800270a:	7afb      	ldrb	r3, [r7, #11]
 800270c:	b299      	uxth	r1, r3
 800270e:	88f8      	ldrh	r0, [r7, #6]
 8002710:	893a      	ldrh	r2, [r7, #8]
 8002712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002716:	9302      	str	r3, [sp, #8]
 8002718:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	4603      	mov	r3, r0
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f001 f854 	bl	80037d0 <HAL_I2C_Mem_Write>
 8002728:	4603      	mov	r3, r0
 800272a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	4619      	mov	r1, r3
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f805 	bl	8002746 <I2Cx_Error>
  }
  return status;
 800273c:	7dfb      	ldrb	r3, [r7, #23]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fff8 	bl	8003748 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ff8b 	bl	8002674 <I2Cx_Init>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <AUDIO_IO_Init+0x10>)
 800276e:	f7ff ff81 	bl	8002674 <I2Cx_Init>
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20005c24 	.word	0x20005c24

0800277c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af02      	add	r7, sp, #8
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	460b      	mov	r3, r1
 8002788:	80bb      	strh	r3, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8002792:	89fb      	ldrh	r3, [r7, #14]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	b29b      	uxth	r3, r3
 8002798:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800279a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	b21a      	sxth	r2, r3
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	b21b      	sxth	r3, r3
 80027a6:	4313      	orrs	r3, r2
 80027a8:	b21b      	sxth	r3, r3
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80027ae:	88ba      	ldrh	r2, [r7, #4]
 80027b0:	79f9      	ldrb	r1, [r7, #7]
 80027b2:	2302      	movs	r3, #2
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	1cbb      	adds	r3, r7, #2
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	2302      	movs	r3, #2
 80027bc:	4803      	ldr	r0, [pc, #12]	@ (80027cc <AUDIO_IO_Write+0x50>)
 80027be:	f7ff ff95 	bl	80026ec <I2Cx_WriteMultiple>
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20005c24 	.word	0x20005c24

080027d0 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f847 	bl	800286c <HAL_Delay>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	af00      	add	r7, sp, #0
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ea:	2003      	movs	r0, #3
 80027ec:	f000 f922 	bl	8002a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f000 f805 	bl	8002800 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80027f6:	f7fe fd93 	bl	8001320 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8002808:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <HAL_InitTick+0x30>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a09      	ldr	r2, [pc, #36]	@ (8002834 <HAL_InitTick+0x34>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	4618      	mov	r0, r3
 8002816:	f000 f942 	bl	8002a9e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800281a:	2200      	movs	r2, #0
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002822:	f000 f912 	bl	8002a4a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000138 	.word	0x20000138
 8002834:	10624dd3 	.word	0x10624dd3

08002838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  uwTick++;
 800283c:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <HAL_IncTick+0x18>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	4a03      	ldr	r2, [pc, #12]	@ (8002850 <HAL_IncTick+0x18>)
 8002844:	6013      	str	r3, [r2, #0]
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	20005c70 	.word	0x20005c70

08002854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return uwTick;
 8002858:	4b03      	ldr	r3, [pc, #12]	@ (8002868 <HAL_GetTick+0x14>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20005c70 	.word	0x20005c70

0800286c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8002878:	f7ff ffec 	bl	8002854 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800287e:	bf00      	nop
 8002880:	f7ff ffe8 	bl	8002854 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad2      	subs	r2, r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	429a      	cmp	r2, r3
 800288e:	d3f7      	bcc.n	8002880 <HAL_Delay+0x14>
  {
  }
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ac:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <NVIC_SetPriorityGrouping+0x40>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028b8:	4013      	ands	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028c4:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <NVIC_SetPriorityGrouping+0x44>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ca:	4a04      	ldr	r2, [pc, #16]	@ (80028dc <NVIC_SetPriorityGrouping+0x40>)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	60d3      	str	r3, [r2, #12]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000ed00 	.word	0xe000ed00
 80028e0:	05fa0000 	.word	0x05fa0000

080028e4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e8:	4b04      	ldr	r3, [pc, #16]	@ (80028fc <NVIC_GetPriorityGrouping+0x18>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	0a1b      	lsrs	r3, r3, #8
 80028ee:	f003 0307 	and.w	r3, r3, #7
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	4907      	ldr	r1, [pc, #28]	@ (8002930 <NVIC_EnableIRQ+0x30>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2001      	movs	r0, #1
 800291a:	fa00 f202 	lsl.w	r2, r0, r2
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000e100 	.word	0xe000e100

08002934 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002944:	2b00      	cmp	r3, #0
 8002946:	da0b      	bge.n	8002960 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	490c      	ldr	r1, [pc, #48]	@ (8002980 <NVIC_SetPriority+0x4c>)
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	3b04      	subs	r3, #4
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	440b      	add	r3, r1
 800295c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800295e:	e009      	b.n	8002974 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	4907      	ldr	r1, [pc, #28]	@ (8002984 <NVIC_SetPriority+0x50>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	440b      	add	r3, r1
 8002970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00
 8002984:	e000e100 	.word	0xe000e100

08002988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	@ 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f1c3 0307 	rsb	r3, r3, #7
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	bf28      	it	cs
 80029a6:	2304      	movcs	r3, #4
 80029a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d902      	bls.n	80029b8 <NVIC_EncodePriority+0x30>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3b03      	subs	r3, #3
 80029b6:	e000      	b.n	80029ba <NVIC_EncodePriority+0x32>
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43da      	mvns	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	401a      	ands	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43d9      	mvns	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	4313      	orrs	r3, r2
         );
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3724      	adds	r7, #36	@ 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a00:	d301      	bcc.n	8002a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00f      	b.n	8002a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a06:	4a0a      	ldr	r2, [pc, #40]	@ (8002a30 <SysTick_Config+0x40>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0e:	210f      	movs	r1, #15
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a14:	f7ff ff8e 	bl	8002934 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a18:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <SysTick_Config+0x40>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1e:	4b04      	ldr	r3, [pc, #16]	@ (8002a30 <SysTick_Config+0x40>)
 8002a20:	2207      	movs	r2, #7
 8002a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	e000e010 	.word	0xe000e010

08002a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ff2d 	bl	800289c <NVIC_SetPriorityGrouping>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a5c:	f7ff ff42 	bl	80028e4 <NVIC_GetPriorityGrouping>
 8002a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	6978      	ldr	r0, [r7, #20]
 8002a68:	f7ff ff8e 	bl	8002988 <NVIC_EncodePriority>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff5d 	bl	8002934 <NVIC_SetPriority>
}
 8002a7a:	bf00      	nop
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff35 	bl	8002900 <NVIC_EnableIRQ>
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff ffa2 	bl	80029f0 <SysTick_Config>
 8002aac:	4603      	mov	r3, r0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d106      	bne.n	8002ad4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002ac6:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a08      	ldr	r2, [pc, #32]	@ (8002aec <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002ad2:	e005      	b.n	8002ae0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a04      	ldr	r2, [pc, #16]	@ (8002aec <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002ada:	f023 0304 	bic.w	r3, r3, #4
 8002ade:	6013      	str	r3, [r2, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002af4:	f000 f802 	bl	8002afc <HAL_SYSTICK_Callback>
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b18:	f7ff fe9c 	bl	8002854 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e099      	b.n	8002c5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b48:	e00f      	b.n	8002b6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b4a:	f7ff fe83 	bl	8002854 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b05      	cmp	r3, #5
 8002b56:	d908      	bls.n	8002b6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2203      	movs	r2, #3
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e078      	b.n	8002c5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e8      	bne.n	8002b4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	4b38      	ldr	r3, [pc, #224]	@ (8002c64 <HAL_DMA_Init+0x158>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d107      	bne.n	8002bd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f023 0307 	bic.w	r3, r3, #7
 8002bea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d117      	bne.n	8002c2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00e      	beq.n	8002c2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fac7 	bl	80031a4 <DMA_CheckFifoParam>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2240      	movs	r2, #64	@ 0x40
 8002c20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e016      	b.n	8002c5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fa7e 	bl	8003138 <DMA_CalcBaseAndBitshift>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c44:	223f      	movs	r2, #63	@ 0x3f
 8002c46:	409a      	lsls	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	e010803f 	.word	0xe010803f

08002c68 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e03e      	b.n	8002cf8 <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d101      	bne.n	8002c8a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002c86:	2302      	movs	r3, #2
 8002c88:	e036      	b.n	8002cf8 <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0201 	bic.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2221      	movs	r2, #33	@ 0x21
 8002cc8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fa34 	bl	8003138 <DMA_CalcBaseAndBitshift>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd8:	223f      	movs	r2, #63	@ 0x3f
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_DMA_Start_IT+0x26>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e048      	b.n	8002db8 <HAL_DMA_Start_IT+0xb8>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d137      	bne.n	8002daa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f9c4 	bl	80030dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d58:	223f      	movs	r2, #63	@ 0x3f
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0216 	orr.w	r2, r2, #22
 8002d6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d7e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d007      	beq.n	8002d98 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0208 	orr.w	r2, r2, #8
 8002d96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e005      	b.n	8002db6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
 8002db4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002dcc:	4b8e      	ldr	r3, [pc, #568]	@ (8003008 <HAL_DMA_IRQHandler+0x248>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a8e      	ldr	r2, [pc, #568]	@ (800300c <HAL_DMA_IRQHandler+0x24c>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0a9b      	lsrs	r3, r3, #10
 8002dd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dea:	2208      	movs	r2, #8
 8002dec:	409a      	lsls	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01a      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0204 	bic.w	r2, r2, #4
 8002e12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e18:	2208      	movs	r2, #8
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e24:	f043 0201 	orr.w	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e30:	4a77      	ldr	r2, [pc, #476]	@ (8003010 <HAL_DMA_IRQHandler+0x250>)
 8002e32:	409a      	lsls	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d012      	beq.n	8002e62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4e:	4a70      	ldr	r2, [pc, #448]	@ (8003010 <HAL_DMA_IRQHandler+0x250>)
 8002e50:	409a      	lsls	r2, r3
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5a:	f043 0202 	orr.w	r2, r3, #2
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e66:	4a6b      	ldr	r2, [pc, #428]	@ (8003014 <HAL_DMA_IRQHandler+0x254>)
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d012      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00b      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e84:	4a63      	ldr	r2, [pc, #396]	@ (8003014 <HAL_DMA_IRQHandler+0x254>)
 8002e86:	409a      	lsls	r2, r3
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e90:	f043 0204 	orr.w	r2, r3, #4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9c:	2210      	movs	r2, #16
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d043      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d03c      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eba:	2210      	movs	r2, #16
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d018      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d108      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d024      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
 8002eee:	e01f      	b.n	8002f30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d01b      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
 8002f00:	e016      	b.n	8002f30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d107      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0208 	bic.w	r2, r2, #8
 8002f1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f34:	2220      	movs	r2, #32
 8002f36:	409a      	lsls	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 8093 	beq.w	8003068 <HAL_DMA_IRQHandler+0x2a8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 808b 	beq.w	8003068 <HAL_DMA_IRQHandler+0x2a8>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f56:	2220      	movs	r2, #32
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b05      	cmp	r3, #5
 8002f68:	d137      	bne.n	8002fda <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0216 	bic.w	r2, r2, #22
 8002f78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d103      	bne.n	8002f9a <HAL_DMA_IRQHandler+0x1da>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0208 	bic.w	r2, r2, #8
 8002fa8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fae:	223f      	movs	r2, #63	@ 0x3f
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8082 	beq.w	80030d4 <HAL_DMA_IRQHandler+0x314>
        {
          hdma->XferAbortCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
        }
        return;
 8002fd8:	e07c      	b.n	80030d4 <HAL_DMA_IRQHandler+0x314>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d020      	beq.n	800302a <HAL_DMA_IRQHandler+0x26a>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d110      	bne.n	8003018 <HAL_DMA_IRQHandler+0x258>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d034      	beq.n	8003068 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	4798      	blx	r3
 8003006:	e02f      	b.n	8003068 <HAL_DMA_IRQHandler+0x2a8>
 8003008:	20000138 	.word	0x20000138
 800300c:	1b4e81b5 	.word	0x1b4e81b5
 8003010:	00800001 	.word	0x00800001
 8003014:	00800004 	.word	0x00800004
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d023      	beq.n	8003068 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	4798      	blx	r3
 8003028:	e01e      	b.n	8003068 <HAL_DMA_IRQHandler+0x2a8>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10f      	bne.n	8003058 <HAL_DMA_IRQHandler+0x298>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0210 	bic.w	r2, r2, #16
 8003046:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_DMA_IRQHandler+0x2a8>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306c:	2b00      	cmp	r3, #0
 800306e:	d032      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x316>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d022      	beq.n	80030c2 <HAL_DMA_IRQHandler+0x302>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2205      	movs	r2, #5
 8003080:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	3301      	adds	r3, #1
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	429a      	cmp	r2, r3
 800309e:	d307      	bcc.n	80030b0 <HAL_DMA_IRQHandler+0x2f0>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f2      	bne.n	8003094 <HAL_DMA_IRQHandler+0x2d4>
 80030ae:	e000      	b.n	80030b2 <HAL_DMA_IRQHandler+0x2f2>
          break;
 80030b0:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x316>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
 80030d2:	e000      	b.n	80030d6 <HAL_DMA_IRQHandler+0x316>
        return;
 80030d4:	bf00      	nop
    }
  }
}
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b40      	cmp	r3, #64	@ 0x40
 8003108:	d108      	bne.n	800311c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800311a:	e007      	b.n	800312c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	60da      	str	r2, [r3, #12]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	3b10      	subs	r3, #16
 8003148:	4a13      	ldr	r2, [pc, #76]	@ (8003198 <DMA_CalcBaseAndBitshift+0x60>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003152:	4a12      	ldr	r2, [pc, #72]	@ (800319c <DMA_CalcBaseAndBitshift+0x64>)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d908      	bls.n	8003178 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <DMA_CalcBaseAndBitshift+0x68>)
 800316e:	4013      	ands	r3, r2
 8003170:	1d1a      	adds	r2, r3, #4
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	659a      	str	r2, [r3, #88]	@ 0x58
 8003176:	e006      	b.n	8003186 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <DMA_CalcBaseAndBitshift+0x68>)
 8003180:	4013      	ands	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	aaaaaaab 	.word	0xaaaaaaab
 800319c:	08006a1c 	.word	0x08006a1c
 80031a0:	fffffc00 	.word	0xfffffc00

080031a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d11f      	bne.n	80031fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d856      	bhi.n	8003272 <DMA_CheckFifoParam+0xce>
 80031c4:	a201      	add	r2, pc, #4	@ (adr r2, 80031cc <DMA_CheckFifoParam+0x28>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	080031dd 	.word	0x080031dd
 80031d0:	080031ef 	.word	0x080031ef
 80031d4:	080031dd 	.word	0x080031dd
 80031d8:	08003273 	.word	0x08003273
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d046      	beq.n	8003276 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ec:	e043      	b.n	8003276 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031f6:	d140      	bne.n	800327a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fc:	e03d      	b.n	800327a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003206:	d121      	bne.n	800324c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b03      	cmp	r3, #3
 800320c:	d837      	bhi.n	800327e <DMA_CheckFifoParam+0xda>
 800320e:	a201      	add	r2, pc, #4	@ (adr r2, 8003214 <DMA_CheckFifoParam+0x70>)
 8003210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003214:	08003225 	.word	0x08003225
 8003218:	0800322b 	.word	0x0800322b
 800321c:	08003225 	.word	0x08003225
 8003220:	0800323d 	.word	0x0800323d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
      break;
 8003228:	e030      	b.n	800328c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d025      	beq.n	8003282 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800323a:	e022      	b.n	8003282 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003244:	d11f      	bne.n	8003286 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800324a:	e01c      	b.n	8003286 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d903      	bls.n	800325a <DMA_CheckFifoParam+0xb6>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b03      	cmp	r3, #3
 8003256:	d003      	beq.n	8003260 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003258:	e018      	b.n	800328c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
      break;
 800325e:	e015      	b.n	800328c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003264:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00e      	beq.n	800328a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      break;
 8003270:	e00b      	b.n	800328a <DMA_CheckFifoParam+0xe6>
      break;
 8003272:	bf00      	nop
 8003274:	e00a      	b.n	800328c <DMA_CheckFifoParam+0xe8>
      break;
 8003276:	bf00      	nop
 8003278:	e008      	b.n	800328c <DMA_CheckFifoParam+0xe8>
      break;
 800327a:	bf00      	nop
 800327c:	e006      	b.n	800328c <DMA_CheckFifoParam+0xe8>
      break;
 800327e:	bf00      	nop
 8003280:	e004      	b.n	800328c <DMA_CheckFifoParam+0xe8>
      break;
 8003282:	bf00      	nop
 8003284:	e002      	b.n	800328c <DMA_CheckFifoParam+0xe8>
      break;   
 8003286:	bf00      	nop
 8003288:	e000      	b.n	800328c <DMA_CheckFifoParam+0xe8>
      break;
 800328a:	bf00      	nop
    }
  } 
  
  return status; 
 800328c:	7bfb      	ldrb	r3, [r7, #15]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop

0800329c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800329c:	b480      	push	{r7}
 800329e:	b089      	sub	sp, #36	@ 0x24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e175      	b.n	80035a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80032bc:	2201      	movs	r2, #1
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	f040 8164 	bne.w	80035a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x4e>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b12      	cmp	r3, #18
 80032e8:	d123      	bne.n	8003332 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	08da      	lsrs	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3208      	adds	r2, #8
 80032f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	220f      	movs	r2, #15
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	691a      	ldr	r2, [r3, #16]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	08da      	lsrs	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3208      	adds	r2, #8
 800332c:	69b9      	ldr	r1, [r7, #24]
 800332e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	2203      	movs	r2, #3
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0203 	and.w	r2, r3, #3
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d00b      	beq.n	8003386 <HAL_GPIO_Init+0xea>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d007      	beq.n	8003386 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800337a:	2b11      	cmp	r3, #17
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b12      	cmp	r3, #18
 8003384:	d130      	bne.n	80033e8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	2203      	movs	r2, #3
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033bc:	2201      	movs	r2, #1
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 0201 	and.w	r2, r3, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	2203      	movs	r2, #3
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80be 	beq.w	80035a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003426:	4b66      	ldr	r3, [pc, #408]	@ (80035c0 <HAL_GPIO_Init+0x324>)
 8003428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342a:	4a65      	ldr	r2, [pc, #404]	@ (80035c0 <HAL_GPIO_Init+0x324>)
 800342c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003430:	6453      	str	r3, [r2, #68]	@ 0x44
 8003432:	4b63      	ldr	r3, [pc, #396]	@ (80035c0 <HAL_GPIO_Init+0x324>)
 8003434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800343e:	4a61      	ldr	r2, [pc, #388]	@ (80035c4 <HAL_GPIO_Init+0x328>)
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	089b      	lsrs	r3, r3, #2
 8003444:	3302      	adds	r3, #2
 8003446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	220f      	movs	r2, #15
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a58      	ldr	r2, [pc, #352]	@ (80035c8 <HAL_GPIO_Init+0x32c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d037      	beq.n	80034da <HAL_GPIO_Init+0x23e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a57      	ldr	r2, [pc, #348]	@ (80035cc <HAL_GPIO_Init+0x330>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d031      	beq.n	80034d6 <HAL_GPIO_Init+0x23a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a56      	ldr	r2, [pc, #344]	@ (80035d0 <HAL_GPIO_Init+0x334>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d02b      	beq.n	80034d2 <HAL_GPIO_Init+0x236>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a55      	ldr	r2, [pc, #340]	@ (80035d4 <HAL_GPIO_Init+0x338>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d025      	beq.n	80034ce <HAL_GPIO_Init+0x232>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a54      	ldr	r2, [pc, #336]	@ (80035d8 <HAL_GPIO_Init+0x33c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d01f      	beq.n	80034ca <HAL_GPIO_Init+0x22e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a53      	ldr	r2, [pc, #332]	@ (80035dc <HAL_GPIO_Init+0x340>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d019      	beq.n	80034c6 <HAL_GPIO_Init+0x22a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a52      	ldr	r2, [pc, #328]	@ (80035e0 <HAL_GPIO_Init+0x344>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <HAL_GPIO_Init+0x226>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a51      	ldr	r2, [pc, #324]	@ (80035e4 <HAL_GPIO_Init+0x348>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00d      	beq.n	80034be <HAL_GPIO_Init+0x222>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a50      	ldr	r2, [pc, #320]	@ (80035e8 <HAL_GPIO_Init+0x34c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d007      	beq.n	80034ba <HAL_GPIO_Init+0x21e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4f      	ldr	r2, [pc, #316]	@ (80035ec <HAL_GPIO_Init+0x350>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d101      	bne.n	80034b6 <HAL_GPIO_Init+0x21a>
 80034b2:	2309      	movs	r3, #9
 80034b4:	e012      	b.n	80034dc <HAL_GPIO_Init+0x240>
 80034b6:	230a      	movs	r3, #10
 80034b8:	e010      	b.n	80034dc <HAL_GPIO_Init+0x240>
 80034ba:	2308      	movs	r3, #8
 80034bc:	e00e      	b.n	80034dc <HAL_GPIO_Init+0x240>
 80034be:	2307      	movs	r3, #7
 80034c0:	e00c      	b.n	80034dc <HAL_GPIO_Init+0x240>
 80034c2:	2306      	movs	r3, #6
 80034c4:	e00a      	b.n	80034dc <HAL_GPIO_Init+0x240>
 80034c6:	2305      	movs	r3, #5
 80034c8:	e008      	b.n	80034dc <HAL_GPIO_Init+0x240>
 80034ca:	2304      	movs	r3, #4
 80034cc:	e006      	b.n	80034dc <HAL_GPIO_Init+0x240>
 80034ce:	2303      	movs	r3, #3
 80034d0:	e004      	b.n	80034dc <HAL_GPIO_Init+0x240>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e002      	b.n	80034dc <HAL_GPIO_Init+0x240>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_GPIO_Init+0x240>
 80034da:	2300      	movs	r3, #0
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	f002 0203 	and.w	r2, r2, #3
 80034e2:	0092      	lsls	r2, r2, #2
 80034e4:	4093      	lsls	r3, r2
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80034ec:	4935      	ldr	r1, [pc, #212]	@ (80035c4 <HAL_GPIO_Init+0x328>)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	3302      	adds	r3, #2
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034fa:	4b3d      	ldr	r3, [pc, #244]	@ (80035f0 <HAL_GPIO_Init+0x354>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800351e:	4a34      	ldr	r2, [pc, #208]	@ (80035f0 <HAL_GPIO_Init+0x354>)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003524:	4b32      	ldr	r3, [pc, #200]	@ (80035f0 <HAL_GPIO_Init+0x354>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003548:	4a29      	ldr	r2, [pc, #164]	@ (80035f0 <HAL_GPIO_Init+0x354>)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800354e:	4b28      	ldr	r3, [pc, #160]	@ (80035f0 <HAL_GPIO_Init+0x354>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003572:	4a1f      	ldr	r2, [pc, #124]	@ (80035f0 <HAL_GPIO_Init+0x354>)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003578:	4b1d      	ldr	r3, [pc, #116]	@ (80035f0 <HAL_GPIO_Init+0x354>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800359c:	4a14      	ldr	r2, [pc, #80]	@ (80035f0 <HAL_GPIO_Init+0x354>)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3301      	adds	r3, #1
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	2b0f      	cmp	r3, #15
 80035ac:	f67f ae86 	bls.w	80032bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	3724      	adds	r7, #36	@ 0x24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40013800 	.word	0x40013800
 80035c8:	40020000 	.word	0x40020000
 80035cc:	40020400 	.word	0x40020400
 80035d0:	40020800 	.word	0x40020800
 80035d4:	40020c00 	.word	0x40020c00
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40021400 	.word	0x40021400
 80035e0:	40021800 	.word	0x40021800
 80035e4:	40021c00 	.word	0x40021c00
 80035e8:	40022000 	.word	0x40022000
 80035ec:	40022400 	.word	0x40022400
 80035f0:	40013c00 	.word	0x40013c00

080035f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
 8003600:	4613      	mov	r3, r2
 8003602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003604:	787b      	ldrb	r3, [r7, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003610:	e003      	b.n	800361a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	041a      	lsls	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	619a      	str	r2, [r3, #24]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07f      	b.n	800373a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f8a9 	bl	80037a6 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	@ 0x24
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003678:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003688:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	e006      	b.n	80036b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d104      	bne.n	80036c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003744 <HAL_I2C_Init+0x11c>)
 80036ce:	430b      	orrs	r3, r1
 80036d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	ea42 0103 	orr.w	r1, r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	021a      	lsls	r2, r3, #8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69d9      	ldr	r1, [r3, #28]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1a      	ldr	r2, [r3, #32]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	02008000 	.word	0x02008000

08003748 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e021      	b.n	800379e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2224      	movs	r2, #36	@ 0x24
 800375e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f821 	bl	80037ba <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	4608      	mov	r0, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	461a      	mov	r2, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	817b      	strh	r3, [r7, #10]
 80037e2:	460b      	mov	r3, r1
 80037e4:	813b      	strh	r3, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	f040 8109 	bne.w	8003a0e <HAL_I2C_Mem_Write+0x23e>
  {
    if((pData == NULL) || (Size == 0U))
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_I2C_Mem_Write+0x38>
 8003802:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e101      	b.n	8003a10 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_I2C_Mem_Write+0x4a>
 8003816:	2302      	movs	r3, #2
 8003818:	e0fa      	b.n	8003a10 <HAL_I2C_Mem_Write+0x240>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003822:	f7ff f817 	bl	8002854 <HAL_GetTick>
 8003826:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2319      	movs	r3, #25
 800382e:	2201      	movs	r2, #1
 8003830:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f982 	bl	8003b3e <I2C_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0e5      	b.n	8003a10 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2221      	movs	r2, #33	@ 0x21
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2240      	movs	r2, #64	@ 0x40
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003864:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800386c:	88f8      	ldrh	r0, [r7, #6]
 800386e:	893a      	ldrh	r2, [r7, #8]
 8003870:	8979      	ldrh	r1, [r7, #10]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	4603      	mov	r3, r0
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f8db 	bl	8003a38 <I2C_RequestMemoryWrite>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00f      	beq.n	80038a8 <HAL_I2C_Mem_Write+0xd8>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388c:	2b04      	cmp	r3, #4
 800388e:	d105      	bne.n	800389c <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0b9      	b.n	8003a10 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e0b3      	b.n	8003a10 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2bff      	cmp	r3, #255	@ 0xff
 80038b0:	d90e      	bls.n	80038d0 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	22ff      	movs	r2, #255	@ 0xff
 80038b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	8979      	ldrh	r1, [r7, #10]
 80038c0:	2300      	movs	r3, #0
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fa4d 	bl	8003d68 <I2C_TransferConfig>
 80038ce:	e00f      	b.n	80038f0 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	8979      	ldrh	r1, [r7, #10]
 80038e2:	2300      	movs	r3, #0
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fa3c 	bl	8003d68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f95c 	bl	8003bb2 <I2C_WaitOnTXISFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_I2C_Mem_Write+0x140>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003904:	2b04      	cmp	r3, #4
 8003906:	d101      	bne.n	800390c <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e081      	b.n	8003a10 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e07f      	b.n	8003a10 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	1c59      	adds	r1, r3, #1
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	6251      	str	r1, [r2, #36]	@ 0x24
 800391a:	781a      	ldrb	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	d135      	bne.n	80039b0 <HAL_I2C_Mem_Write+0x1e0>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d030      	beq.n	80039b0 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003954:	2200      	movs	r2, #0
 8003956:	2180      	movs	r1, #128	@ 0x80
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f8f0 	bl	8003b3e <I2C_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e053      	b.n	8003a10 <HAL_I2C_Mem_Write+0x240>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	2bff      	cmp	r3, #255	@ 0xff
 8003970:	d90e      	bls.n	8003990 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	22ff      	movs	r2, #255	@ 0xff
 8003976:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397c:	b2da      	uxtb	r2, r3
 800397e:	8979      	ldrh	r1, [r7, #10]
 8003980:	2300      	movs	r3, #0
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f9ed 	bl	8003d68 <I2C_TransferConfig>
 800398e:	e00f      	b.n	80039b0 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	8979      	ldrh	r1, [r7, #10]
 80039a2:	2300      	movs	r3, #0
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f9dc 	bl	8003d68 <I2C_TransferConfig>
        }
      }

    }while(hi2c->XferCount > 0U);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d19a      	bne.n	80038f0 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f937 	bl	8003c32 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <HAL_I2C_Mem_Write+0x20a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d101      	bne.n	80039d6 <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e01c      	b.n	8003a10 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e01a      	b.n	8003a10 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2220      	movs	r2, #32
 80039e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6859      	ldr	r1, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003a18 <HAL_I2C_Mem_Write+0x248>)
 80039ee:	400b      	ands	r3, r1
 80039f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e000      	b.n	8003a10 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 8003a0e:	2302      	movs	r3, #2
  }
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	fe00e800 	.word	0xfe00e800

08003a1c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a2a:	b2db      	uxtb	r3, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	4608      	mov	r0, r1
 8003a42:	4611      	mov	r1, r2
 8003a44:	461a      	mov	r2, r3
 8003a46:	4603      	mov	r3, r0
 8003a48:	817b      	strh	r3, [r7, #10]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	813b      	strh	r3, [r7, #8]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	8979      	ldrh	r1, [r7, #10]
 8003a58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f980 	bl	8003d68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	69b9      	ldr	r1, [r7, #24]
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f8a0 	bl	8003bb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <I2C_RequestMemoryWrite+0x50>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d101      	bne.n	8003a84 <I2C_RequestMemoryWrite+0x4c>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e034      	b.n	8003aee <I2C_RequestMemoryWrite+0xb6>
    }
    else
    {
      return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e032      	b.n	8003aee <I2C_RequestMemoryWrite+0xb6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d105      	bne.n	8003a9a <I2C_RequestMemoryWrite+0x62>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a8e:	893b      	ldrh	r3, [r7, #8]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a98:	e01b      	b.n	8003ad2 <I2C_RequestMemoryWrite+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a9a:	893b      	ldrh	r3, [r7, #8]
 8003a9c:	0a1b      	lsrs	r3, r3, #8
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	69b9      	ldr	r1, [r7, #24]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f880 	bl	8003bb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <I2C_RequestMemoryWrite+0x90>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d101      	bne.n	8003ac4 <I2C_RequestMemoryWrite+0x8c>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e014      	b.n	8003aee <I2C_RequestMemoryWrite+0xb6>
      }
      else
      {
        return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e012      	b.n	8003aee <I2C_RequestMemoryWrite+0xb6>
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac8:	893b      	ldrh	r3, [r7, #8]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2180      	movs	r1, #128	@ 0x80
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f82e 	bl	8003b3e <I2C_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <I2C_RequestMemoryWrite+0xb4>
  {
    return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e000      	b.n	8003aee <I2C_RequestMemoryWrite+0xb6>
  }

return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d103      	bne.n	8003b14 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2200      	movs	r2, #0
 8003b12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d007      	beq.n	8003b32 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699a      	ldr	r2, [r3, #24]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	619a      	str	r2, [r3, #24]
  }
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b4e:	e01c      	b.n	8003b8a <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b56:	d018      	beq.n	8003b8a <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b5e:	f7fe fe79 	bl	8002854 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d20d      	bcs.n	8003b8a <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e00f      	b.n	8003baa <I2C_WaitOnFlagUntilTimeout+0x6c>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d0d3      	beq.n	8003b50 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bbe:	e02c      	b.n	8003c1a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f871 	bl	8003cac <I2C_IsAcknowledgeFailed>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e02a      	b.n	8003c2a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bda:	d01e      	beq.n	8003c1a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003be2:	f7fe fe37 	bl	8002854 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d213      	bcs.n	8003c1a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e007      	b.n	8003c2a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d1cb      	bne.n	8003bc0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c3e:	e028      	b.n	8003c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f831 	bl	8003cac <I2C_IsAcknowledgeFailed>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e026      	b.n	8003ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c5a:	f7fe fdfb 	bl	8002854 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d213      	bcs.n	8003c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	f043 0220 	orr.w	r2, r3, #32
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e007      	b.n	8003ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d1cf      	bne.n	8003c40 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b10      	cmp	r3, #16
 8003cc4:	d148      	bne.n	8003d58 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cc6:	e01c      	b.n	8003d02 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cce:	d018      	beq.n	8003d02 <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <I2C_IsAcknowledgeFailed+0x3a>
 8003cd6:	f7fe fdbd 	bl	8002854 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d20d      	bcs.n	8003d02 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e02b      	b.n	8003d5a <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d1db      	bne.n	8003cc8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2210      	movs	r2, #16
 8003d16:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f7ff fee8 	bl	8003af6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6859      	ldr	r1, [r3, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4b0c      	ldr	r3, [pc, #48]	@ (8003d64 <I2C_IsAcknowledgeFailed+0xb8>)
 8003d32:	400b      	ands	r3, r1
 8003d34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2204      	movs	r2, #4
 8003d3a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	fe00e800 	.word	0xfe00e800

08003d68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	817b      	strh	r3, [r7, #10]
 8003d76:	4613      	mov	r3, r2
 8003d78:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc0 <I2C_TransferConfig+0x58>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8003d8e:	897b      	ldrh	r3, [r7, #10]
 8003d90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d94:	7a7b      	ldrb	r3, [r7, #9]
 8003d96:	041b      	lsls	r3, r3, #16
 8003d98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	605a      	str	r2, [r3, #4]
}
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	fc009800 	.word	0xfc009800

08003dc4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dce:	4b23      	ldr	r3, [pc, #140]	@ (8003e5c <HAL_PWREx_EnableOverDrive+0x98>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	4a22      	ldr	r2, [pc, #136]	@ (8003e5c <HAL_PWREx_EnableOverDrive+0x98>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dda:	4b20      	ldr	r3, [pc, #128]	@ (8003e5c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003de6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1d      	ldr	r2, [pc, #116]	@ (8003e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003df2:	f7fe fd2f 	bl	8002854 <HAL_GetTick>
 8003df6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003df8:	e009      	b.n	8003e0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dfa:	f7fe fd2b 	bl	8002854 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e08:	d901      	bls.n	8003e0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e022      	b.n	8003e54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e0e:	4b14      	ldr	r3, [pc, #80]	@ (8003e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1a:	d1ee      	bne.n	8003dfa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e1c:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a0f      	ldr	r2, [pc, #60]	@ (8003e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e28:	f7fe fd14 	bl	8002854 <HAL_GetTick>
 8003e2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e2e:	e009      	b.n	8003e44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e30:	f7fe fd10 	bl	8002854 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e3e:	d901      	bls.n	8003e44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e007      	b.n	8003e54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e44:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e50:	d1ee      	bne.n	8003e30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40007000 	.word	0x40007000

08003e64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b092      	sub	sp, #72	@ 0x48
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  FlagStatus pwrclkchanged = RESET;
 8003e70:	2300      	movs	r3, #0
 8003e72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8087 	beq.w	8003f92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e84:	4b97      	ldr	r3, [pc, #604]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d00c      	beq.n	8003eaa <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e90:	4b94      	ldr	r3, [pc, #592]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d112      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x5e>
 8003e9c:	4b91      	ldr	r3, [pc, #580]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x5e>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eaa:	4b8e      	ldr	r3, [pc, #568]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d06c      	beq.n	8003f90 <HAL_RCC_OscConfig+0x12c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d168      	bne.n	8003f90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e281      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eca:	d106      	bne.n	8003eda <HAL_RCC_OscConfig+0x76>
 8003ecc:	4b85      	ldr	r3, [pc, #532]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a84      	ldr	r2, [pc, #528]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	e02e      	b.n	8003f38 <HAL_RCC_OscConfig+0xd4>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCC_OscConfig+0x98>
 8003ee2:	4b80      	ldr	r3, [pc, #512]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a7f      	ldr	r2, [pc, #508]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	4b7d      	ldr	r3, [pc, #500]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a7c      	ldr	r2, [pc, #496]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003ef4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e01d      	b.n	8003f38 <HAL_RCC_OscConfig+0xd4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCC_OscConfig+0xbc>
 8003f06:	4b77      	ldr	r3, [pc, #476]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a76      	ldr	r2, [pc, #472]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b74      	ldr	r3, [pc, #464]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a73      	ldr	r2, [pc, #460]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCC_OscConfig+0xd4>
 8003f20:	4b70      	ldr	r3, [pc, #448]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a6f      	ldr	r2, [pc, #444]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	4b6d      	ldr	r3, [pc, #436]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a6c      	ldr	r2, [pc, #432]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f36:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fe fc88 	bl	8002854 <HAL_GetTick>
 8003f44:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f48:	f7fe fc84 	bl	8002854 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	@ 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e235      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b62      	ldr	r3, [pc, #392]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0xe4>
 8003f66:	e014      	b.n	8003f92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fe fc74 	bl	8002854 <HAL_GetTick>
 8003f6c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x11e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f70:	f7fe fc70 	bl	8002854 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	@ 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e221      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f82:	4b58      	ldr	r3, [pc, #352]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x10c>
 8003f8e:	e000      	b.n	8003f92 <HAL_RCC_OscConfig+0x12e>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d07d      	beq.n	800409a <HAL_RCC_OscConfig+0x236>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f9e:	4b51      	ldr	r3, [pc, #324]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x15e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003faa:	4b4e      	ldr	r3, [pc, #312]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d126      	bne.n	8004004 <HAL_RCC_OscConfig+0x1a0>
 8003fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d120      	bne.n	8004004 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc2:	4b48      	ldr	r3, [pc, #288]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_RCC_OscConfig+0x176>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d001      	beq.n	8003fda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e1f5      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fda:	4b42      	ldr	r3, [pc, #264]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6919      	ldr	r1, [r3, #16]
 8003fe6:	23f8      	movs	r3, #248	@ 0xf8
 8003fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffc:	4939      	ldr	r1, [pc, #228]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	e04a      	b.n	800409a <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d02d      	beq.n	8004068 <HAL_RCC_OscConfig+0x204>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800400c:	4b35      	ldr	r3, [pc, #212]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a34      	ldr	r2, [pc, #208]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fe fc1c 	bl	8002854 <HAL_GetTick>
 800401c:	6438      	str	r0, [r7, #64]	@ 0x40

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x1ce>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004020:	f7fe fc18 	bl	8002854 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e1c9      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004032:	4b2c      	ldr	r3, [pc, #176]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x1bc>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403e:	4b29      	ldr	r3, [pc, #164]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6919      	ldr	r1, [r3, #16]
 800404a:	23f8      	movs	r3, #248	@ 0xf8
 800404c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004050:	fa93 f3a3 	rbit	r3, r3
 8004054:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004058:	fab3 f383 	clz	r3, r3
 800405c:	fa01 f303 	lsl.w	r3, r1, r3
 8004060:	4920      	ldr	r1, [pc, #128]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8004062:	4313      	orrs	r3, r2
 8004064:	600b      	str	r3, [r1, #0]
 8004066:	e018      	b.n	800409a <HAL_RCC_OscConfig+0x236>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004068:	4b1e      	ldr	r3, [pc, #120]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1d      	ldr	r2, [pc, #116]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 800406e:	f023 0301 	bic.w	r3, r3, #1
 8004072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fe fbee 	bl	8002854 <HAL_GetTick>
 8004078:	6438      	str	r0, [r7, #64]	@ 0x40
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407c:	f7fe fbea 	bl	8002854 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e19b      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408e:	4b15      	ldr	r3, [pc, #84]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x218>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d039      	beq.n	800411a <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x284>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ae:	4b0d      	ldr	r3, [pc, #52]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 80040b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b2:	4a0c      	ldr	r2, [pc, #48]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	6753      	str	r3, [r2, #116]	@ 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ba:	f7fe fbcb 	bl	8002854 <HAL_GetTick>
 80040be:	6438      	str	r0, [r7, #64]	@ 0x40
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c2:	f7fe fbc7 	bl	8002854 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e178      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d4:	4b03      	ldr	r3, [pc, #12]	@ (80040e4 <HAL_RCC_OscConfig+0x280>)
 80040d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x25e>
 80040e0:	e01b      	b.n	800411a <HAL_RCC_OscConfig+0x2b6>
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e8:	4b9e      	ldr	r3, [pc, #632]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80040ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ec:	4a9d      	ldr	r2, [pc, #628]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	6753      	str	r3, [r2, #116]	@ 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fe fbae 	bl	8002854 <HAL_GetTick>
 80040f8:	6438      	str	r0, [r7, #64]	@ 0x40
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x2aa>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fe fbaa 	bl	8002854 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x2aa>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e15b      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410e:	4b95      	ldr	r3, [pc, #596]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 8004110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x298>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80a6 	beq.w	8004274 <HAL_RCC_OscConfig+0x410>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004128:	4b8e      	ldr	r3, [pc, #568]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10e      	bne.n	8004152 <HAL_RCC_OscConfig+0x2ee>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004134:	4b8b      	ldr	r3, [pc, #556]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 8004136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004138:	4a8a      	ldr	r2, [pc, #552]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 800413a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800413e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004140:	4b88      	ldr	r3, [pc, #544]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 8004142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800414c:	2301      	movs	r3, #1
 800414e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004152:	4b85      	ldr	r3, [pc, #532]	@ (8004368 <HAL_RCC_OscConfig+0x504>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d118      	bne.n	8004190 <HAL_RCC_OscConfig+0x32c>
    {    
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800415e:	4b82      	ldr	r3, [pc, #520]	@ (8004368 <HAL_RCC_OscConfig+0x504>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a81      	ldr	r2, [pc, #516]	@ (8004368 <HAL_RCC_OscConfig+0x504>)
 8004164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004168:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800416a:	f7fe fb73 	bl	8002854 <HAL_GetTick>
 800416e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x320>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004172:	f7fe fb6f 	bl	8002854 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b64      	cmp	r3, #100	@ 0x64
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x320>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e120      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004184:	4b78      	ldr	r3, [pc, #480]	@ (8004368 <HAL_RCC_OscConfig+0x504>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x30e>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d106      	bne.n	80041a6 <HAL_RCC_OscConfig+0x342>
 8004198:	4b72      	ldr	r3, [pc, #456]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419c:	4a71      	ldr	r2, [pc, #452]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 800419e:	f043 0301 	orr.w	r3, r3, #1
 80041a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a4:	e02d      	b.n	8004202 <HAL_RCC_OscConfig+0x39e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCC_OscConfig+0x364>
 80041ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b2:	4a6c      	ldr	r2, [pc, #432]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041be:	4a69      	ldr	r2, [pc, #420]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80041c0:	f023 0304 	bic.w	r3, r3, #4
 80041c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c6:	e01c      	b.n	8004202 <HAL_RCC_OscConfig+0x39e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b05      	cmp	r3, #5
 80041ce:	d10c      	bne.n	80041ea <HAL_RCC_OscConfig+0x386>
 80041d0:	4b64      	ldr	r3, [pc, #400]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80041d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d4:	4a63      	ldr	r2, [pc, #396]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80041d6:	f043 0304 	orr.w	r3, r3, #4
 80041da:	6713      	str	r3, [r2, #112]	@ 0x70
 80041dc:	4b61      	ldr	r3, [pc, #388]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80041de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e0:	4a60      	ldr	r2, [pc, #384]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e8:	e00b      	b.n	8004202 <HAL_RCC_OscConfig+0x39e>
 80041ea:	4b5e      	ldr	r3, [pc, #376]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ee:	4a5d      	ldr	r2, [pc, #372]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fa:	4a5a      	ldr	r2, [pc, #360]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80041fc:	f023 0304 	bic.w	r3, r3, #4
 8004200:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d015      	beq.n	8004236 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420a:	f7fe fb23 	bl	8002854 <HAL_GetTick>
 800420e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004210:	e00a      	b.n	8004228 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fe fb1f 	bl	8002854 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004220:	4293      	cmp	r3, r2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e0ce      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004228:	4b4e      	ldr	r3, [pc, #312]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0ee      	beq.n	8004212 <HAL_RCC_OscConfig+0x3ae>
 8004234:	e014      	b.n	8004260 <HAL_RCC_OscConfig+0x3fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004236:	f7fe fb0d 	bl	8002854 <HAL_GetTick>
 800423a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423c:	e00a      	b.n	8004254 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800423e:	f7fe fb09 	bl	8002854 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800424c:	4293      	cmp	r3, r2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e0b8      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004254:	4b43      	ldr	r3, [pc, #268]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ee      	bne.n	800423e <HAL_RCC_OscConfig+0x3da>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004260:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004264:	2b01      	cmp	r3, #1
 8004266:	d105      	bne.n	8004274 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004268:	4b3e      	ldr	r3, [pc, #248]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	4a3d      	ldr	r2, [pc, #244]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 800426e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004272:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80a3 	beq.w	80043c4 <HAL_RCC_OscConfig+0x560>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800427e:	4b39      	ldr	r3, [pc, #228]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b08      	cmp	r3, #8
 8004288:	f000 809a 	beq.w	80043c0 <HAL_RCC_OscConfig+0x55c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d17b      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004294:	4b33      	ldr	r3, [pc, #204]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a32      	ldr	r2, [pc, #200]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 800429a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800429e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fe fad8 	bl	8002854 <HAL_GetTick>
 80042a4:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a8:	f7fe fad4 	bl	8002854 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e085      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x444>
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69da      	ldr	r2, [r3, #28]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80042d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	fa93 f3a3 	rbit	r3, r3
 80042e0:	613b      	str	r3, [r7, #16]
  return(result);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	fab3 f383 	clz	r3, r3
 80042e8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	1e59      	subs	r1, r3, #1
 80042f6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80042fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	fa93 f3a3 	rbit	r3, r3
 8004302:	61bb      	str	r3, [r7, #24]
  return(result);
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	fa01 f303 	lsl.w	r3, r1, r3
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004314:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8004318:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	623b      	str	r3, [r7, #32]
  return(result);
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	fab3 f383 	clz	r3, r3
 8004328:	fa01 f303 	lsl.w	r3, r1, r3
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004332:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004336:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	4906      	ldr	r1, [pc, #24]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 800434c:	4313      	orrs	r3, r2
 800434e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004350:	4b04      	ldr	r3, [pc, #16]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a03      	ldr	r2, [pc, #12]	@ (8004364 <HAL_RCC_OscConfig+0x500>)
 8004356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800435a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435c:	f7fe fa7a 	bl	8002854 <HAL_GetTick>
 8004360:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004362:	e00c      	b.n	800437e <HAL_RCC_OscConfig+0x51a>
 8004364:	40023800 	.word	0x40023800
 8004368:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436c:	f7fe fa72 	bl	8002854 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x51a>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e023      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437e:	4b14      	ldr	r3, [pc, #80]	@ (80043d0 <HAL_RCC_OscConfig+0x56c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x508>
 800438a:	e01b      	b.n	80043c4 <HAL_RCC_OscConfig+0x560>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438c:	4b10      	ldr	r3, [pc, #64]	@ (80043d0 <HAL_RCC_OscConfig+0x56c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0f      	ldr	r2, [pc, #60]	@ (80043d0 <HAL_RCC_OscConfig+0x56c>)
 8004392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004396:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fe fa5c 	bl	8002854 <HAL_GetTick>
 800439c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x54e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe fa58 	bl	8002854 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x54e>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e009      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b2:	4b07      	ldr	r3, [pc, #28]	@ (80043d0 <HAL_RCC_OscConfig+0x56c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x53c>
 80043be:	e001      	b.n	80043c4 <HAL_RCC_OscConfig+0x560>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x562>
    }
  }
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3748      	adds	r7, #72	@ 0x48
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800

080043d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80043e2:	4b77      	ldr	r3, [pc, #476]	@ (80045c0 <HAL_RCC_ClockConfig+0x1ec>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d910      	bls.n	8004412 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f0:	4b73      	ldr	r3, [pc, #460]	@ (80045c0 <HAL_RCC_ClockConfig+0x1ec>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 020f 	bic.w	r2, r3, #15
 80043f8:	4971      	ldr	r1, [pc, #452]	@ (80045c0 <HAL_RCC_ClockConfig+0x1ec>)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004400:	4b6f      	ldr	r3, [pc, #444]	@ (80045c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d001      	beq.n	8004412 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e0d2      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d008      	beq.n	8004430 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800441e:	4b69      	ldr	r3, [pc, #420]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4966      	ldr	r1, [pc, #408]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d06a      	beq.n	8004512 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d107      	bne.n	8004454 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004444:	4b5f      	ldr	r3, [pc, #380]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d115      	bne.n	800447c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0b1      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d107      	bne.n	800446c <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445c:	4b59      	ldr	r3, [pc, #356]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0a5      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446c:	4b55      	ldr	r3, [pc, #340]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e09d      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e4>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800447c:	4b51      	ldr	r3, [pc, #324]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f023 0203 	bic.w	r2, r3, #3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	494e      	ldr	r1, [pc, #312]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448e:	f7fe f9e1 	bl	8002854 <HAL_GetTick>
 8004492:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d112      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800449c:	e00a      	b.n	80044b4 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800449e:	f7fe f9d9 	bl	8002854 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e081      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044b4:	4b43      	ldr	r3, [pc, #268]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d1ee      	bne.n	800449e <HAL_RCC_ClockConfig+0xca>
 80044c0:	e027      	b.n	8004512 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d11d      	bne.n	8004506 <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044cc:	f7fe f9c2 	bl	8002854 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e06a      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044e2:	4b38      	ldr	r3, [pc, #224]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d1ee      	bne.n	80044cc <HAL_RCC_ClockConfig+0xf8>
 80044ee:	e010      	b.n	8004512 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f0:	f7fe f9b0 	bl	8002854 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e058      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004506:	4b2f      	ldr	r3, [pc, #188]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1ee      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x11c>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004512:	4b2b      	ldr	r3, [pc, #172]	@ (80045c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d210      	bcs.n	8004542 <HAL_RCC_ClockConfig+0x16e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004520:	4b27      	ldr	r3, [pc, #156]	@ (80045c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 020f 	bic.w	r2, r3, #15
 8004528:	4925      	ldr	r1, [pc, #148]	@ (80045c0 <HAL_RCC_ClockConfig+0x1ec>)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	4313      	orrs	r3, r2
 800452e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004530:	4b23      	ldr	r3, [pc, #140]	@ (80045c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d001      	beq.n	8004542 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e03a      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800454e:	4b1d      	ldr	r3, [pc, #116]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	491a      	ldr	r1, [pc, #104]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 800455c:	4313      	orrs	r3, r2
 800455e:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d009      	beq.n	8004580 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800456c:	4b15      	ldr	r3, [pc, #84]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4912      	ldr	r1, [pc, #72]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 800457c:	4313      	orrs	r3, r2
 800457e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004580:	f000 f826 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8004584:	4601      	mov	r1, r0
 8004586:	4b0f      	ldr	r3, [pc, #60]	@ (80045c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800458e:	23f0      	movs	r3, #240	@ 0xf0
 8004590:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	fa93 f3a3 	rbit	r3, r3
 8004598:	60fb      	str	r3, [r7, #12]
  return(result);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	fab3 f383 	clz	r3, r3
 80045a0:	fa22 f303 	lsr.w	r3, r2, r3
 80045a4:	4a08      	ldr	r2, [pc, #32]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f4>)
 80045a6:	5cd3      	ldrb	r3, [r2, r3]
 80045a8:	fa21 f303 	lsr.w	r3, r1, r3
 80045ac:	4a07      	ldr	r2, [pc, #28]	@ (80045cc <HAL_RCC_ClockConfig+0x1f8>)
 80045ae:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80045b0:	2000      	movs	r0, #0
 80045b2:	f7fe f925 	bl	8002800 <HAL_InitTick>
  
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023c00 	.word	0x40023c00
 80045c4:	40023800 	.word	0x40023800
 80045c8:	08006a0c 	.word	0x08006a0c
 80045cc:	20000138 	.word	0x20000138

080045d0 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b08b      	sub	sp, #44	@ 0x2c
 80045d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	2300      	movs	r3, #0
 80045dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045e6:	4b38      	ldr	r3, [pc, #224]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d00c      	beq.n	800460c <HAL_RCC_GetSysClockFreq+0x3c>
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d85d      	bhi.n	80046b2 <HAL_RCC_GetSysClockFreq+0xe2>
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x30>
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d003      	beq.n	8004606 <HAL_RCC_GetSysClockFreq+0x36>
 80045fe:	e058      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004600:	4b32      	ldr	r3, [pc, #200]	@ (80046cc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004602:	623b      	str	r3, [r7, #32]
       break;
 8004604:	e058      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004606:	4b32      	ldr	r3, [pc, #200]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004608:	623b      	str	r3, [r7, #32]
      break;
 800460a:	e055      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800460c:	4b2e      	ldr	r3, [pc, #184]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004614:	61fb      	str	r3, [r7, #28]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004616:	4b2c      	ldr	r3, [pc, #176]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d017      	beq.n	8004652 <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8004622:	4a2b      	ldr	r2, [pc, #172]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	fbb2 f2f3 	udiv	r2, r2, r3
 800462a:	4b27      	ldr	r3, [pc, #156]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800462c:	6859      	ldr	r1, [r3, #4]
 800462e:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004632:	400b      	ands	r3, r1
 8004634:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 8004638:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	6979      	ldr	r1, [r7, #20]
 800463c:	fa91 f1a1 	rbit	r1, r1
 8004640:	6139      	str	r1, [r7, #16]
  return(result);
 8004642:	6939      	ldr	r1, [r7, #16]
 8004644:	fab1 f181 	clz	r1, r1
 8004648:	40cb      	lsrs	r3, r1
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004650:	e016      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8004652:	4a1e      	ldr	r2, [pc, #120]	@ (80046cc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	fbb2 f2f3 	udiv	r2, r2, r3
 800465a:	4b1b      	ldr	r3, [pc, #108]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800465c:	6859      	ldr	r1, [r3, #4]
 800465e:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004662:	400b      	ands	r3, r1
 8004664:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 8004668:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466a:	68f9      	ldr	r1, [r7, #12]
 800466c:	fa91 f1a1 	rbit	r1, r1
 8004670:	60b9      	str	r1, [r7, #8]
  return(result);
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	fab1 f181 	clz	r1, r1
 8004678:	40cb      	lsrs	r3, r1
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8004680:	4b11      	ldr	r3, [pc, #68]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004688:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800468c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	fa93 f3a3 	rbit	r3, r3
 8004694:	603b      	str	r3, [r7, #0]
  return(result);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	fab3 f383 	clz	r3, r3
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
 80046a0:	3301      	adds	r3, #1
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 80046a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	623b      	str	r3, [r7, #32]
      break;
 80046b0:	e002      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046b2:	4b06      	ldr	r3, [pc, #24]	@ (80046cc <HAL_RCC_GetSysClockFreq+0xfc>)
 80046b4:	623b      	str	r3, [r7, #32]
      break;
 80046b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b8:	6a3b      	ldr	r3, [r7, #32]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	372c      	adds	r7, #44	@ 0x2c
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800
 80046cc:	00f42400 	.word	0x00f42400
 80046d0:	017d7840 	.word	0x017d7840

080046d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect. 
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d8:	4b03      	ldr	r3, [pc, #12]	@ (80046e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000138 	.word	0x20000138

080046ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b0d8      	sub	sp, #352	@ 0x160
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80046f6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80046fa:	6018      	str	r0, [r3, #0]
  uint32_t tickstart = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  uint32_t tmpreg0 = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
  uint32_t tmpreg1 = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint32_t plli2sused = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  uint32_t pllsaiused = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800471a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800471e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01b      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800472e:	4b94      	ldr	r3, [pc, #592]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	4a93      	ldr	r2, [pc, #588]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004734:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004738:	6093      	str	r3, [r2, #8]
 800473a:	4b91      	ldr	r3, [pc, #580]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004742:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474a:	498d      	ldr	r1, [pc, #564]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800474c:	4313      	orrs	r3, r2
 800474e:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004750:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004754:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1; 
 8004760:	2301      	movs	r3, #1
 8004762:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004766:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800476a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d025      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800477a:	4b81      	ldr	r3, [pc, #516]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800477c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004780:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004784:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004788:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004790:	497b      	ldr	r1, [pc, #492]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004798:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800479c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047a8:	d102      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      plli2sused = 1; 
 80047aa:	2301      	movs	r3, #1
 80047ac:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80047b0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80047b4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xda>
    {
      pllsaiused = 1; 
 80047c0:	2301      	movs	r3, #1
 80047c2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047c6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80047ca:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d025      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047da:	4b69      	ldr	r3, [pc, #420]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80047dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047e4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80047e8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	4963      	ldr	r1, [pc, #396]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80047f8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80047fc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004804:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004808:	d102      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      plli2sused = 1; 
 800480a:	2301      	movs	r3, #1
 800480c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004810:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004814:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d102      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      pllsaiused = 1; 
 8004820:	2301      	movs	r3, #1
 8004822:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004826:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800482a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {    
      plli2sused = 1; 
 800483a:	2301      	movs	r3, #1
 800483c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004840:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004844:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80ae 	beq.w	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004856:	4b4a      	ldr	r3, [pc, #296]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485a:	4a49      	ldr	r2, [pc, #292]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800485c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004860:	6413      	str	r3, [r2, #64]	@ 0x40
 8004862:	4b47      	ldr	r3, [pc, #284]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004866:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800486a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800486e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004878:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800487c:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800487e:	4b41      	ldr	r3, [pc, #260]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a40      	ldr	r2, [pc, #256]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004888:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488a:	f7fd ffe3 	bl	8002854 <HAL_GetTick>
 800488e:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004892:	e00a      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004894:	f7fd ffde 	bl	8002854 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b64      	cmp	r3, #100	@ 0x64
 80048a2:	d902      	bls.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
      {
        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	f000 bfd9 	b.w	800585c <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048aa:	4b36      	ldr	r3, [pc, #216]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0ee      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048b6:	4b32      	ldr	r3, [pc, #200]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048be:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048c2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d03f      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80048ca:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80048ce:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048da:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80048de:	429a      	cmp	r2, r3
 80048e0:	d033      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048e2:	4b27      	ldr	r3, [pc, #156]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ea:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048ee:	4b24      	ldr	r3, [pc, #144]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f2:	4a23      	ldr	r2, [pc, #140]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80048f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048fa:	4b21      	ldr	r3, [pc, #132]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fe:	4a20      	ldr	r2, [pc, #128]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004904:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004906:	4a1e      	ldr	r2, [pc, #120]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004908:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800490c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800490e:	4b1c      	ldr	r3, [pc, #112]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d017      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x25e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491a:	f7fd ff9b 	bl	8002854 <HAL_GetTick>
 800491e:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004922:	e00c      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x252>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004924:	f7fd ff96 	bl	8002854 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004934:	4293      	cmp	r3, r2
 8004936:	d902      	bls.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x252>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	f000 bf8f 	b.w	800585c <HAL_RCCEx_PeriphCLKConfig+0x1170>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493e:	4b10      	ldr	r3, [pc, #64]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0ec      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x238>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800494a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800494e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800495a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800495e:	d115      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8004960:	4b07      	ldr	r3, [pc, #28]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004968:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800496c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004974:	4b04      	ldr	r3, [pc, #16]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004976:	400b      	ands	r3, r1
 8004978:	4901      	ldr	r1, [pc, #4]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
 800497e:	e00b      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004980:	40023800 	.word	0x40023800
 8004984:	40007000 	.word	0x40007000
 8004988:	0ffffcff 	.word	0x0ffffcff
 800498c:	4bbb      	ldr	r3, [pc, #748]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4aba      	ldr	r2, [pc, #744]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004992:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004996:	6093      	str	r3, [r2, #8]
 8004998:	4bb8      	ldr	r3, [pc, #736]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800499a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800499c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80049a0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ac:	49b3      	ldr	r1, [pc, #716]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049b2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80049b6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d014      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049c6:	4bad      	ldr	r3, [pc, #692]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80049c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049cc:	4aab      	ldr	r2, [pc, #684]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80049ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049d6:	4ba9      	ldr	r3, [pc, #676]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80049d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80049dc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80049e0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e8:	49a4      	ldr	r1, [pc, #656]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049f0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80049f4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00e      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a04:	4b9d      	ldr	r3, [pc, #628]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a0e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004a12:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a1a:	4998      	ldr	r1, [pc, #608]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a22:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004a26:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00e      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a36:	4b91      	ldr	r3, [pc, #580]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a40:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004a44:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a4c:	498b      	ldr	r1, [pc, #556]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a54:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004a58:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00e      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a68:	4b84      	ldr	r3, [pc, #528]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a72:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004a76:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a7e:	497f      	ldr	r1, [pc, #508]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a86:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004a8a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00e      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a9a:	4b78      	ldr	r3, [pc, #480]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004aa4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004aa8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab0:	4972      	ldr	r1, [pc, #456]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ab8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004abc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00e      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004acc:	4b6b      	ldr	r3, [pc, #428]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad2:	f023 0203 	bic.w	r2, r3, #3
 8004ad6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004ada:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae2:	4966      	ldr	r1, [pc, #408]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004aea:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004aee:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00e      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004afe:	4b5f      	ldr	r3, [pc, #380]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b04:	f023 020c 	bic.w	r2, r3, #12
 8004b08:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004b0c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b14:	4959      	ldr	r1, [pc, #356]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b1c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004b20:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00e      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b30:	4b52      	ldr	r3, [pc, #328]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b36:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b3a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004b3e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b46:	494d      	ldr	r1, [pc, #308]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b4e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004b52:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00e      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b62:	4b46      	ldr	r3, [pc, #280]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b68:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b6c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004b70:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b78:	4940      	ldr	r1, [pc, #256]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b80:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004b84:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00e      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b94:	4b39      	ldr	r3, [pc, #228]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b9e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004ba2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004baa:	4934      	ldr	r1, [pc, #208]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004bb2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004bb6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00e      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bcc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bd0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004bd4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bdc:	4927      	ldr	r1, [pc, #156]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004be4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004be8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00e      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004bf8:	4b20      	ldr	r3, [pc, #128]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c02:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004c06:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0e:	491b      	ldr	r1, [pc, #108]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c16:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004c1a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00e      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c2a:	4b14      	ldr	r3, [pc, #80]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c34:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004c38:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c40:	490e      	ldr	r1, [pc, #56]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c48:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004c4c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d011      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c5c:	4b07      	ldr	r3, [pc, #28]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c62:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004c66:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004c6a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c72:	4902      	ldr	r1, [pc, #8]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c7a:	e001      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004c7c:	40023800 	.word	0x40023800
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c80:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004c84:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x5de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c94:	4b66      	ldr	r3, [pc, #408]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004c9e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004ca2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004caa:	4961      	ldr	r1, [pc, #388]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004cb2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004cb6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cc2:	d102      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x5de>
    {
      pllsaiused = 1; 
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004cca:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004cce:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    pllsaiused = 1; 
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ce4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004ce8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00e      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d02:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004d06:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d0e:	4948      	ldr	r1, [pc, #288]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d16:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004d1a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00f      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x65e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d2a:	4b41      	ldr	r3, [pc, #260]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d30:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004d34:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004d38:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d42:	493b      	ldr	r1, [pc, #236]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004d4a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004d4e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00f      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004d5e:	4b34      	ldr	r3, [pc, #208]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d64:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004d68:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004d6c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d76:	492e      	ldr	r1, [pc, #184]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d7e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004d82:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00f      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d92:	4b27      	ldr	r3, [pc, #156]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d98:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004d9c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004da0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004daa:	4921      	ldr	r1, [pc, #132]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004db2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004db6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00f      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dcc:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004dd0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004dd4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dde:	4914      	ldr	r1, [pc, #80]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004de6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d009      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x716>
 8004dee:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004df2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dfe:	f040 8284 	bne.w	800530a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8004e02:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a0a      	ldr	r2, [pc, #40]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004e08:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e0c:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e0e:	f7fd fd21 	bl	8002854 <HAL_GetTick>
 8004e12:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e16:	e00d      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e18:	f7fd fd1c 	bl	8002854 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b64      	cmp	r3, #100	@ 0x64
 8004e26:	d905      	bls.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x748>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	f000 bd17 	b.w	800585c <HAL_RCCEx_PeriphCLKConfig+0x1170>
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e34:	4be4      	ldr	r3, [pc, #912]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1eb      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x72c>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e40:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004e44:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 808c 	beq.w	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x882>
 8004e56:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004e5a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f040 8083 	bne.w	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8004e68:	4bd7      	ldr	r3, [pc, #860]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e72:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004e76:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e7e:	fa93 f3a3 	rbit	r3, r3
 8004e82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  return(result);
 8004e86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e8a:	fab3 f383 	clz	r3, r3
 8004e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e92:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8004e96:	4bcc      	ldr	r3, [pc, #816]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e9c:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ea0:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8004ea4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004eac:	fa93 f3a3 	rbit	r3, r3
 8004eb0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  return(result);
 8004eb4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004eb8:	fab3 f383 	clz	r3, r3
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ec4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004ec8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ed4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004edc:	fa93 f3a3 	rbit	r3, r3
 8004ee0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return(result);
 8004ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004ee8:	fab3 f383 	clz	r3, r3
 8004eec:	409a      	lsls	r2, r3
 8004eee:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004ef2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004efa:	fa93 f3a3 	rbit	r3, r3
 8004efe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return(result);
 8004f02:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004f06:	fab3 f383 	clz	r3, r3
 8004f0a:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8004f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f12:	431a      	orrs	r2, r3
 8004f14:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8004f18:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004f20:	fa93 f3a3 	rbit	r3, r3
 8004f24:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  return(result);
 8004f28:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004f2c:	fab3 f383 	clz	r3, r3
 8004f30:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8004f34:	fa01 f303 	lsl.w	r3, r1, r3
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f3e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6899      	ldr	r1, [r3, #8]
 8004f46:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004f4a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8004f52:	fa93 f3a3 	rbit	r3, r3
 8004f56:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  return(result);
 8004f5a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f5e:	fab3 f383 	clz	r3, r3
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	4998      	ldr	r1, [pc, #608]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f6e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f72:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d008      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004f82:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f86:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f92:	d014      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x8d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8004f94:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f98:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 809d 	beq.w	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8004faa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004fae:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fba:	f040 8093 	bne.w	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8004fbe:	4b82      	ldr	r3, [pc, #520]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fc4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fc8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004fcc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004fd4:	fa93 f3a3 	rbit	r3, r3
 8004fd8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  return(result);
 8004fdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004fe0:	fab3 f383 	clz	r3, r3
 8004fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8004fec:	4b76      	ldr	r3, [pc, #472]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ff2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004ff6:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004ffa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005002:	fa93 f3a3 	rbit	r3, r3
 8005006:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  return(result);
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500e:	fab3 f383 	clz	r3, r3
 8005012:	fa22 f303 	lsr.w	r3, r2, r3
 8005016:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800501a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800501e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800502a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005032:	fa93 f3a3 	rbit	r3, r3
 8005036:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  return(result);
 800503a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800503e:	fab3 f383 	clz	r3, r3
 8005042:	409a      	lsls	r2, r3
 8005044:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8005048:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005050:	fa93 f3a3 	rbit	r3, r3
 8005054:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  return(result);
 8005058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800505c:	fab3 f383 	clz	r3, r3
 8005060:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8005064:	fa01 f303 	lsl.w	r3, r1, r3
 8005068:	431a      	orrs	r2, r3
 800506a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800506e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68d9      	ldr	r1, [r3, #12]
 8005076:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 800507a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005082:	fa93 f3a3 	rbit	r3, r3
 8005086:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return(result);
 800508a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800508e:	fab3 f383 	clz	r3, r3
 8005092:	fa01 f303 	lsl.w	r3, r1, r3
 8005096:	431a      	orrs	r2, r3
 8005098:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800509c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80050a4:	fa93 f3a3 	rbit	r3, r3
 80050a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  return(result);
 80050ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b0:	fab3 f383 	clz	r3, r3
 80050b4:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 80050b8:	fa01 f303 	lsl.w	r3, r1, r3
 80050bc:	4942      	ldr	r1, [pc, #264]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 80050c4:	4b40      	ldr	r3, [pc, #256]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 80050c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050ca:	f023 021f 	bic.w	r2, r3, #31
 80050ce:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80050d2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050da:	3b01      	subs	r3, #1
 80050dc:	493a      	ldr	r1, [pc, #232]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050e4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80050e8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8086 	beq.w	8005206 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80050fa:	4b33      	ldr	r3, [pc, #204]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 80050fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005100:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005104:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8005108:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005110:	fa93 f3a3 	rbit	r3, r3
 8005114:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  return(result);
 8005118:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800511c:	fab3 f383 	clz	r3, r3
 8005120:	fa22 f303 	lsr.w	r3, r2, r3
 8005124:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005128:	4b27      	ldr	r3, [pc, #156]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800512a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800512e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005132:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8005136:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800513e:	fa93 f3a3 	rbit	r3, r3
 8005142:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  return(result);
 8005146:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800514a:	fab3 f383 	clz	r3, r3
 800514e:	fa22 f303 	lsr.w	r3, r2, r3
 8005152:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005156:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800515a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005166:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800516e:	fa93 f3a3 	rbit	r3, r3
 8005172:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return(result);
 8005176:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800517a:	fab3 f383 	clz	r3, r3
 800517e:	409a      	lsls	r2, r3
 8005180:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005184:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6919      	ldr	r1, [r3, #16]
 800518c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8005190:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005198:	fa93 f3a3 	rbit	r3, r3
 800519c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  return(result);
 80051a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051a4:	fab3 f383 	clz	r3, r3
 80051a8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ac:	431a      	orrs	r2, r3
 80051ae:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 80051b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ba:	fa93 f3a3 	rbit	r3, r3
 80051be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  return(result);
 80051c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051c6:	e001      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80051c8:	40023800 	.word	0x40023800
 80051cc:	fab3 f383 	clz	r3, r3
 80051d0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80051d4:	fa01 f303 	lsl.w	r3, r1, r3
 80051d8:	431a      	orrs	r2, r3
 80051da:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80051de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80051e6:	fa93 f3a3 	rbit	r3, r3
 80051ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  return(result);
 80051ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051f2:	fab3 f383 	clz	r3, r3
 80051f6:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 80051fa:	fa01 f303 	lsl.w	r3, r1, r3
 80051fe:	4950      	ldr	r1, [pc, #320]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005206:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800520a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d05c      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800521a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800521e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800522a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005232:	fa93 f3a3 	rbit	r3, r3
 8005236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return(result);
 800523a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800523e:	fab3 f383 	clz	r3, r3
 8005242:	409a      	lsls	r2, r3
 8005244:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005248:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6919      	ldr	r1, [r3, #16]
 8005250:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8005254:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800525c:	fa93 f3a3 	rbit	r3, r3
 8005260:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  return(result);
 8005264:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005268:	fab3 f383 	clz	r3, r3
 800526c:	fa01 f303 	lsl.w	r3, r1, r3
 8005270:	431a      	orrs	r2, r3
 8005272:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005276:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68d9      	ldr	r1, [r3, #12]
 800527e:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8005282:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005286:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800528a:	fa93 f3a3 	rbit	r3, r3
 800528e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return(result);
 8005292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005296:	fab3 f383 	clz	r3, r3
 800529a:	fa01 f303 	lsl.w	r3, r1, r3
 800529e:	431a      	orrs	r2, r3
 80052a0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80052a4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6899      	ldr	r1, [r3, #8]
 80052ac:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80052b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052b8:	fa93 f3a3 	rbit	r3, r3
 80052bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return(result);
 80052c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052c4:	fab3 f383 	clz	r3, r3
 80052c8:	fa01 f303 	lsl.w	r3, r1, r3
 80052cc:	491c      	ldr	r1, [pc, #112]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a19      	ldr	r2, [pc, #100]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 80052da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052de:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e0:	f7fd fab8 	bl	8002854 <HAL_GetTick>
 80052e4:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052e8:	e009      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052ea:	f7fd fab3 	bl	8002854 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	@ 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xc12>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e2ae      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052fe:	4b10      	ldr	r3, [pc, #64]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0ef      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800530a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800530e:	2b01      	cmp	r3, #1
 8005310:	f040 82a3 	bne.w	800585a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8005314:	4b0a      	ldr	r3, [pc, #40]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 800531a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800531e:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005320:	f7fd fa98 	bl	8002854 <HAL_GetTick>
 8005324:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005328:	e00c      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xc58>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800532a:	f7fd fa93 	bl	8002854 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b64      	cmp	r3, #100	@ 0x64
 8005338:	d904      	bls.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xc58>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e28e      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x1170>
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005344:	4bd4      	ldr	r3, [pc, #848]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800534c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005350:	d0eb      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xc3e>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005352:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005356:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 8005366:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800536a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d013      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xcb2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005376:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800537a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 8093 	beq.w	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800538c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005390:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005398:	2b00      	cmp	r3, #0
 800539a:	f040 808a 	bne.w	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800539e:	4bbe      	ldr	r3, [pc, #760]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053a8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80053ac:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053b0:	fa93 f3a3 	rbit	r3, r3
 80053b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return(result);
 80053b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053b8:	fab3 f383 	clz	r3, r3
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
 80053c0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80053c4:	4bb4      	ldr	r3, [pc, #720]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80053ce:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80053d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053d6:	fa93 f3a3 	rbit	r3, r3
 80053da:	677b      	str	r3, [r7, #116]	@ 0x74
  return(result);
 80053dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053de:	fab3 f383 	clz	r3, r3
 80053e2:	fa22 f303 	lsr.w	r3, r2, r3
 80053e6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053ea:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80053ee:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695a      	ldr	r2, [r3, #20]
 80053f6:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005402:	fa93 f3a3 	rbit	r3, r3
 8005406:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return(result);
 8005408:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800540a:	fab3 f383 	clz	r3, r3
 800540e:	409a      	lsls	r2, r3
 8005410:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8005414:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005418:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800541c:	fa93 f3a3 	rbit	r3, r3
 8005420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8005424:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005428:	fab3 f383 	clz	r3, r3
 800542c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8005430:	fa01 f303 	lsl.w	r3, r1, r3
 8005434:	431a      	orrs	r2, r3
 8005436:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800543a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6999      	ldr	r1, [r3, #24]
 8005442:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8005446:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800544e:	fa93 f3a3 	rbit	r3, r3
 8005452:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  return(result);
 8005456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800545a:	fab3 f383 	clz	r3, r3
 800545e:	fa01 f303 	lsl.w	r3, r1, r3
 8005462:	431a      	orrs	r2, r3
 8005464:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8005468:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005470:	fa93 f3a3 	rbit	r3, r3
 8005474:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return(result);
 8005478:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800547c:	fab3 f383 	clz	r3, r3
 8005480:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8005484:	fa01 f303 	lsl.w	r3, r1, r3
 8005488:	4983      	ldr	r1, [pc, #524]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005490:	4b81      	ldr	r3, [pc, #516]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8005492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005496:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800549a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800549e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a6:	3b01      	subs	r3, #1
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	497b      	ldr	r1, [pc, #492]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054b2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80054b6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 80c5 	beq.w	8005652 <HAL_RCCEx_PeriphCLKConfig+0xf66>
 80054c8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80054cc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054d8:	f040 80bb 	bne.w	8005652 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80054dc:	4b6e      	ldr	r3, [pc, #440]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054e6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80054ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80054ee:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 80054f2:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80054f8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	fa93 f1a3 	rbit	r1, r3
 8005502:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005506:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800550a:	6019      	str	r1, [r3, #0]
  return(result);
 800550c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005510:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8005522:	4b5d      	ldr	r3, [pc, #372]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005528:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800552c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005530:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005534:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8005538:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800553e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	fa93 f1a3 	rbit	r1, r3
 8005548:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800554c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005550:	6019      	str	r1, [r3, #0]
  return(result);
 8005552:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005556:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	fab3 f383 	clz	r3, r3
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
 8005564:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005568:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800556c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695a      	ldr	r2, [r3, #20]
 8005574:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005578:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800557c:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 8005580:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005582:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005586:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	fa93 f1a3 	rbit	r1, r3
 8005590:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005594:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005598:	6019      	str	r1, [r3, #0]
  return(result);
 800559a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800559e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	fab3 f383 	clz	r3, r3
 80055a8:	409a      	lsls	r2, r3
 80055aa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80055ae:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6a19      	ldr	r1, [r3, #32]
 80055b6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80055ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055be:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80055c2:	6018      	str	r0, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80055c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	fa93 f0a3 	rbit	r0, r3
 80055d2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80055d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80055da:	6018      	str	r0, [r3, #0]
  return(result);
 80055dc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80055e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	fab3 f383 	clz	r3, r3
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	431a      	orrs	r2, r3
 80055f0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80055f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80055f8:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 80055fc:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fe:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005602:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	fa93 f1a3 	rbit	r1, r3
 800560c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005610:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005614:	6019      	str	r1, [r3, #0]
  return(result);
 8005616:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800561a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	fab3 f383 	clz	r3, r3
 8005624:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	431a      	orrs	r2, r3
 800562e:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8005632:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005636:	fa93 f3a3 	rbit	r3, r3
 800563a:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 800563c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800563e:	fab3 f383 	clz	r3, r3
 8005642:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8005646:	fa01 f303 	lsl.w	r3, r1, r3
 800564a:	4913      	ldr	r1, [pc, #76]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005652:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005656:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80dd 	beq.w	8005822 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005668:	4b0b      	ldr	r3, [pc, #44]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005672:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005676:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800567a:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 800567e:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005680:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005684:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	fa93 f1a3 	rbit	r1, r3
 800568e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005692:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005696:	e001      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
 8005698:	40023800 	.word	0x40023800
 800569c:	6019      	str	r1, [r3, #0]
  return(result);
 800569e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80056a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	fab3 f383 	clz	r3, r3
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
 80056b0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80056b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056be:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80056c2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80056c6:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80056ca:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056cc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80056d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	fa93 f1a3 	rbit	r1, r3
 80056da:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80056de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80056e2:	6019      	str	r1, [r3, #0]
  return(result);
 80056e4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80056e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	fab3 f383 	clz	r3, r3
 80056f2:	fa22 f303 	lsr.w	r3, r2, r3
 80056f6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80056fa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80056fe:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800570a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800570e:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 8005712:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005714:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005718:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	fa93 f1a3 	rbit	r1, r3
 8005722:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005726:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800572a:	6019      	str	r1, [r3, #0]
  return(result);
 800572c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005730:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	fab3 f383 	clz	r3, r3
 800573a:	409a      	lsls	r2, r3
 800573c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005740:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005744:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8005748:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800574e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	fa93 f1a3 	rbit	r1, r3
 8005758:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800575c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005760:	6019      	str	r1, [r3, #0]
  return(result);
 8005762:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005766:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	fab3 f383 	clz	r3, r3
 8005770:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8005774:	fa01 f303 	lsl.w	r3, r1, r3
 8005778:	431a      	orrs	r2, r3
 800577a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800577e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005782:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 8005786:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005788:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800578c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	fa93 f1a3 	rbit	r1, r3
 8005796:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800579a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800579e:	6019      	str	r1, [r3, #0]
  return(result);
 80057a0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80057a4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	fab3 f383 	clz	r3, r3
 80057ae:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80057b2:	fa01 f303 	lsl.w	r3, r1, r3
 80057b6:	431a      	orrs	r2, r3
 80057b8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80057bc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69d9      	ldr	r1, [r3, #28]
 80057c4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80057c8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80057cc:	f04f 40e0 	mov.w	r0, #1879048192	@ 0x70000000
 80057d0:	6018      	str	r0, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80057d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	fa93 f0a3 	rbit	r0, r3
 80057e0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80057e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80057e8:	6018      	str	r0, [r3, #0]
  return(result);
 80057ea:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80057ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	fab3 f383 	clz	r3, r3
 80057f8:	fa01 f303 	lsl.w	r3, r1, r3
 80057fc:	491a      	ldr	r1, [pc, #104]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005804:	4b18      	ldr	r3, [pc, #96]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 8005806:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800580a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800580e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005812:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581a:	4913      	ldr	r1, [pc, #76]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005822:	4b11      	ldr	r3, [pc, #68]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a10      	ldr	r2, [pc, #64]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 8005828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800582c:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800582e:	f7fd f811 	bl	8002854 <HAL_GetTick>
 8005832:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005836:	e009      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1160>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005838:	f7fd f80c 	bl	8002854 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b64      	cmp	r3, #100	@ 0x64
 8005846:	d901      	bls.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1160>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e007      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800584c:	4b06      	ldr	r3, [pc, #24]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005858:	d1ee      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x114c>
      }
    }
  }
  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40023800 	.word	0x40023800

0800586c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800586c:	b480      	push	{r7}
 800586e:	b09b      	sub	sp, #108	@ 0x6c
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	667b      	str	r3, [r7, #100]	@ 0x64
  
  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4ab6      	ldr	r2, [pc, #728]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKConfig+0x2e8>)
 800587c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 800587e:	4bb6      	ldr	r3, [pc, #728]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005880:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005884:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005888:	4013      	ands	r3, r2
 800588a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800588e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	fa92 f2a2 	rbit	r2, r2
 8005896:	60fa      	str	r2, [r7, #12]
  return(result);
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	fab2 f282 	clz	r2, r2
 800589e:	fa23 f202 	lsr.w	r2, r3, r2
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80058a6:	4bac      	ldr	r3, [pc, #688]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80058a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ac:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80058b0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80058b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	fa93 f3a3 	rbit	r3, r3
 80058bc:	617b      	str	r3, [r7, #20]
  return(result);
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	fab3 f383 	clz	r3, r3
 80058c4:	40da      	lsrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80058ca:	4ba3      	ldr	r3, [pc, #652]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80058cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058d0:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80058d4:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 80058d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	fa93 f3a3 	rbit	r3, r3
 80058e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	fab3 f383 	clz	r3, r3
 80058e8:	40da      	lsrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80058ee:	4b9a      	ldr	r3, [pc, #616]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80058f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058f4:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80058f8:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80058fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005900:	fa93 f3a3 	rbit	r3, r3
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	fab3 f383 	clz	r3, r3
 800590c:	40da      	lsrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	609a      	str	r2, [r3, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 8005912:	4b91      	ldr	r3, [pc, #580]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005914:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005918:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800591c:	4013      	ands	r3, r2
 800591e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005922:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005926:	fa92 f2a2 	rbit	r2, r2
 800592a:	62fa      	str	r2, [r7, #44]	@ 0x2c
  return(result);
 800592c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800592e:	fab2 f282 	clz	r2, r2
 8005932:	fa23 f202 	lsr.w	r2, r3, r2
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800593a:	4b87      	ldr	r3, [pc, #540]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800593c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005940:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005944:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8005948:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594c:	fa93 f3a3 	rbit	r3, r3
 8005950:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8005952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005954:	fab3 f383 	clz	r3, r3
 8005958:	40da      	lsrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 800595e:	4b7e      	ldr	r3, [pc, #504]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005964:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005968:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 800596c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005970:	fa93 f3a3 	rbit	r3, r3
 8005974:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005978:	fab3 f383 	clz	r3, r3
 800597c:	40da      	lsrs	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 8005982:	4b75      	ldr	r3, [pc, #468]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005988:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800598c:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8005990:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005994:	fa93 f3a3 	rbit	r3, r3
 8005998:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800599a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800599c:	fab3 f383 	clz	r3, r3
 80059a0:	40da      	lsrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	61da      	str	r2, [r3, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 80059a6:	4b6c      	ldr	r3, [pc, #432]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80059a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059ac:	f003 021f 	and.w	r2, r3, #31
 80059b0:	231f      	movs	r3, #31
 80059b2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059b6:	fa93 f3a3 	rbit	r3, r3
 80059ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 80059bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059be:	fab3 f383 	clz	r3, r3
 80059c2:	40da      	lsrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 80059c8:	4b63      	ldr	r3, [pc, #396]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80059ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059ce:	f403 52f8 	and.w	r2, r3, #7936	@ 0x1f00
 80059d2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80059d6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059da:	fa93 f3a3 	rbit	r3, r3
 80059de:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80059e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059e2:	fab3 f383 	clz	r3, r3
 80059e6:	40da      	lsrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 80059ec:	4b5a      	ldr	r3, [pc, #360]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80059ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80059f6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80059fa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059fe:	fa93 f3a3 	rbit	r3, r3
 8005a02:	65fb      	str	r3, [r7, #92]	@ 0x5c
  return(result);
 8005a04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a06:	fab3 f383 	clz	r3, r3
 8005a0a:	40da      	lsrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8005a10:	4b51      	ldr	r3, [pc, #324]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a16:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8005a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a24:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8005a2c:	4b4a      	ldr	r3, [pc, #296]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	635a      	str	r2, [r3, #52]	@ 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8005a38:	4b47      	ldr	r3, [pc, #284]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	665a      	str	r2, [r3, #100]	@ 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8005a46:	4b44      	ldr	r3, [pc, #272]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4c:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	669a      	str	r2, [r3, #104]	@ 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8005a54:	4b40      	ldr	r3, [pc, #256]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a5a:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	66da      	str	r2, [r3, #108]	@ 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8005a62:	4b3d      	ldr	r3, [pc, #244]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a68:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	671a      	str	r2, [r3, #112]	@ 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8005a70:	4b39      	ldr	r3, [pc, #228]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a76:	f003 0203 	and.w	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8005a7e:	4b36      	ldr	r3, [pc, #216]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a84:	f003 020c 	and.w	r2, r3, #12
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	649a      	str	r2, [r3, #72]	@ 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8005a8c:	4b32      	ldr	r3, [pc, #200]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a92:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	64da      	str	r2, [r3, #76]	@ 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8005a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa0:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8005aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aae:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8005ab6:	4b28      	ldr	r3, [pc, #160]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005abc:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	659a      	str	r2, [r3, #88]	@ 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8005ac4:	4b24      	ldr	r3, [pc, #144]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aca:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8005ad2:	4b21      	ldr	r3, [pc, #132]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad8:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	661a      	str	r2, [r3, #96]	@ 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae6:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	675a      	str	r2, [r3, #116]	@ 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8005aee:	4b1a      	ldr	r3, [pc, #104]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af4:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	679a      	str	r2, [r3, #120]	@ 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8005afc:	4b16      	ldr	r3, [pc, #88]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b02:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005b0a:	4b13      	ldr	r3, [pc, #76]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b10:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 8005b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b20:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	
  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b30:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
 8005b3a:	4b07      	ldr	r3, [pc, #28]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b40:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005b4a:	4b03      	ldr	r3, [pc, #12]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005b52:	e003      	b.n	8005b5c <HAL_RCCEx_GetPeriphCLKConfig+0x2f0>
 8005b54:	1cfffff1 	.word	0x1cfffff1
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	667b      	str	r3, [r7, #100]	@ 0x64
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKConfig+0x32c>)
 8005b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b62:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005b66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	631a      	str	r2, [r3, #48]	@ 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8005b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKConfig+0x32c>)
 8005b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d103      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKConfig+0x318>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8005b82:	e003      	b.n	8005b8c <HAL_RCCEx_GetPeriphCLKConfig+0x320>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005b8a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005b8c:	bf00      	nop
 8005b8e:	376c      	adds	r7, #108	@ 0x6c
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	40023800 	.word	0x40023800

08005b9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60bb      	str	r3, [r7, #8]
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005bba:	f040 80a4 	bne.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;   
 8005bbe:	4ba6      	ldr	r3, [pc, #664]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bc4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005bcc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bd4:	f000 808a 	beq.w	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bde:	f200 8091 	bhi.w	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005be8:	d07d      	beq.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bf0:	f200 8088 	bhi.w	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c00:	d039      	beq.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;       
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
    default :
      {
        break;
 8005c02:	e07f      	b.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005c04:	4b94      	ldr	r3, [pc, #592]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d108      	bne.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c10:	4b91      	ldr	r3, [pc, #580]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c18:	4a90      	ldr	r2, [pc, #576]	@ (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	e007      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005c22:	4b8d      	ldr	r3, [pc, #564]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c2a:	4a8d      	ldr	r2, [pc, #564]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c30:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005c32:	4b89      	ldr	r3, [pc, #548]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c38:	0e1b      	lsrs	r3, r3, #24
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005c40:	4b85      	ldr	r3, [pc, #532]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c46:	099b      	lsrs	r3, r3, #6
 8005c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	fb03 f202 	mul.w	r2, r3, r2
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c58:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c60:	0a1b      	lsrs	r3, r3, #8
 8005c62:	f003 031f 	and.w	r3, r3, #31
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg); 
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c72:	617b      	str	r3, [r7, #20]
        break;       
 8005c74:	e047      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005c76:	4b78      	ldr	r3, [pc, #480]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d108      	bne.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c82:	4b75      	ldr	r3, [pc, #468]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c8a:	4a74      	ldr	r2, [pc, #464]	@ (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	e007      	b.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005c94:	4b70      	ldr	r3, [pc, #448]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c9c:	4a70      	ldr	r2, [pc, #448]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005ca4:	4b6c      	ldr	r3, [pc, #432]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005caa:	0e1b      	lsrs	r3, r3, #24
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005cb2:	4b69      	ldr	r3, [pc, #420]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cb8:	099b      	lsrs	r3, r3, #6
 8005cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	fb03 f202 	mul.w	r2, r3, r2
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cca:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8005ccc:	4b62      	ldr	r3, [pc, #392]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cd2:	f003 031f 	and.w	r3, r3, #31
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce2:	617b      	str	r3, [r7, #20]
        break;
 8005ce4:	e00f      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ce6:	4b5f      	ldr	r3, [pc, #380]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005ce8:	617b      	str	r3, [r7, #20]
        break;       
 8005cea:	e00c      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005cec:	4b5a      	ldr	r3, [pc, #360]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d102      	bne.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8005cf8:	4b58      	ldr	r3, [pc, #352]	@ (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005cfa:	617b      	str	r3, [r7, #20]
        break;       
 8005cfc:	e003      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 8005cfe:	4b58      	ldr	r3, [pc, #352]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005d00:	617b      	str	r3, [r7, #20]
        break;       
 8005d02:	e000      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 8005d04:	bf00      	nop
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d0c:	f040 80ad 	bne.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;   
 8005d10:	4b51      	ldr	r3, [pc, #324]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d16:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005d1e:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d26:	f000 808a 	beq.w	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d30:	f200 809a 	bhi.w	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d3a:	d07d      	beq.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d42:	f200 8091 	bhi.w	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d004      	beq.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d52:	d039      	beq.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;       
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
    default :
      {
        break;
 8005d54:	e088      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005d56:	4b40      	ldr	r3, [pc, #256]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d108      	bne.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d62:	4b3d      	ldr	r3, [pc, #244]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d6a:	4a3c      	ldr	r2, [pc, #240]	@ (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	e007      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005d74:	4b38      	ldr	r3, [pc, #224]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d7c:	4a38      	ldr	r2, [pc, #224]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d82:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005d84:	4b34      	ldr	r3, [pc, #208]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8a:	0e1b      	lsrs	r3, r3, #24
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005d92:	4b31      	ldr	r3, [pc, #196]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d98:	099b      	lsrs	r3, r3, #6
 8005d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	fb03 f202 	mul.w	r2, r3, r2
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005daa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005dac:	4b2a      	ldr	r3, [pc, #168]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	3301      	adds	r3, #1
 8005dba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg); 
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]
        break;       
 8005dc6:	e050      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005dc8:	4b23      	ldr	r3, [pc, #140]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d108      	bne.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005dd4:	4b20      	ldr	r3, [pc, #128]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	e007      	b.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005de6:	4b1c      	ldr	r3, [pc, #112]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dee:	4a1c      	ldr	r2, [pc, #112]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005df6:	4b18      	ldr	r3, [pc, #96]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dfc:	0e1b      	lsrs	r3, r3, #24
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005e04:	4b14      	ldr	r3, [pc, #80]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e0a:	099b      	lsrs	r3, r3, #6
 8005e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	fb03 f202 	mul.w	r2, r3, r2
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8005e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e24:	f003 031f 	and.w	r3, r3, #31
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e34:	617b      	str	r3, [r7, #20]
        break;
 8005e36:	e018      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e38:	4b0a      	ldr	r3, [pc, #40]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005e3a:	617b      	str	r3, [r7, #20]
        break;       
 8005e3c:	e015      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005e3e:	4b06      	ldr	r3, [pc, #24]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d102      	bne.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 8005e4a:	4b04      	ldr	r3, [pc, #16]	@ (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e4c:	617b      	str	r3, [r7, #20]
        break;       
 8005e4e:	e00c      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 8005e50:	4b03      	ldr	r3, [pc, #12]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005e52:	617b      	str	r3, [r7, #20]
        break;       
 8005e54:	e009      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 8005e56:	bf00      	nop
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	00f42400 	.word	0x00f42400
 8005e60:	017d7840 	.word	0x017d7840
 8005e64:	00bb8000 	.word	0x00bb8000
        break;
 8005e68:	bf00      	nop
      }
    }
  }
  
  return frequency;
 8005e6a:	697b      	ldr	r3, [r7, #20]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_SAI_Init>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e14d      	b.n	8006132 <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f95a 	bl	8006164 <HAL_SAI_MspInit>
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 facd 	bl	8006458 <SAI_Disable>
  
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d00c      	beq.n	8005ee0 <HAL_SAI_Init+0x68>
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d80d      	bhi.n	8005ee6 <HAL_SAI_Init+0x6e>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_SAI_Init+0x5c>
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d003      	beq.n	8005eda <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8005ed2:	e008      	b.n	8005ee6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61fb      	str	r3, [r7, #28]
      break;
 8005ed8:	e006      	b.n	8005ee8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005eda:	2310      	movs	r3, #16
 8005edc:	61fb      	str	r3, [r7, #28]
      break;
 8005ede:	e003      	b.n	8005ee8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005ee0:	2320      	movs	r3, #32
 8005ee2:	61fb      	str	r3, [r7, #28]
      break;
 8005ee4:	e000      	b.n	8005ee8 <HAL_SAI_Init+0x70>
    break;
 8005ee6:	bf00      	nop
  }
  
  switch(hsai->Init.Synchro)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d81e      	bhi.n	8005f2e <HAL_SAI_Init+0xb6>
 8005ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef8 <HAL_SAI_Init+0x80>)
 8005ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef6:	bf00      	nop
 8005ef8:	08005f09 	.word	0x08005f09
 8005efc:	08005f0f 	.word	0x08005f0f
 8005f00:	08005f17 	.word	0x08005f17
 8005f04:	08005f1f 	.word	0x08005f1f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	617b      	str	r3, [r7, #20]
      }
      break;
 8005f0c:	e010      	b.n	8005f30 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8005f0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f12:	617b      	str	r3, [r7, #20]
      }
      break;
 8005f14:	e00c      	b.n	8005f30 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005f16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f1a:	617b      	str	r3, [r7, #20]
      }
      break;
 8005f1c:	e008      	b.n	8005f30 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005f1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f22:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	61fb      	str	r3, [r7, #28]
      }
      break;
 8005f2c:	e000      	b.n	8005f30 <HAL_SAI_Init+0xb8>
  default:
    break;      
 8005f2e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a81      	ldr	r2, [pc, #516]	@ (800613c <HAL_SAI_Init+0x2c4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d004      	beq.n	8005f44 <HAL_SAI_Init+0xcc>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a80      	ldr	r2, [pc, #512]	@ (8006140 <HAL_SAI_Init+0x2c8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d103      	bne.n	8005f4c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005f44:	4a7f      	ldr	r2, [pc, #508]	@ (8006144 <HAL_SAI_Init+0x2cc>)
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	e002      	b.n	8005f52 <HAL_SAI_Init+0xda>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 8005f4c:	4a7e      	ldr	r2, [pc, #504]	@ (8006148 <HAL_SAI_Init+0x2d0>)
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d043      	beq.n	8005fe2 <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a76      	ldr	r2, [pc, #472]	@ (800613c <HAL_SAI_Init+0x2c4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d004      	beq.n	8005f72 <HAL_SAI_Init+0xfa>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a74      	ldr	r2, [pc, #464]	@ (8006140 <HAL_SAI_Init+0x2c8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d104      	bne.n	8005f7c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005f72:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005f76:	f7ff fe11 	bl	8005b9c <HAL_RCCEx_GetPeriphCLKFreq>
 8005f7a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a72      	ldr	r2, [pc, #456]	@ (800614c <HAL_SAI_Init+0x2d4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d004      	beq.n	8005f90 <HAL_SAI_Init+0x118>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a71      	ldr	r2, [pc, #452]	@ (8006150 <HAL_SAI_Init+0x2d8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d104      	bne.n	8005f9a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005f90:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8005f94:	f7ff fe02 	bl	8005b9c <HAL_RCCEx_GetPeriphCLKFreq>
 8005f98:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	025b      	lsls	r3, r3, #9
 8005fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4a67      	ldr	r2, [pc, #412]	@ (8006154 <HAL_SAI_Init+0x2dc>)
 8005fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fba:	08da      	lsrs	r2, r3, #3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	621a      	str	r2, [r3, #32]
    
    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8005fc0:	68f9      	ldr	r1, [r7, #12]
 8005fc2:	4b64      	ldr	r3, [pc, #400]	@ (8006154 <HAL_SAI_Init+0x2dc>)
 8005fc4:	fba3 2301 	umull	r2, r3, r3, r1
 8005fc8:	08da      	lsrs	r2, r3, #3
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	1aca      	subs	r2, r1, r3
 8005fd4:	2a08      	cmp	r2, #8
 8005fd6:	d904      	bls.n	8005fe2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	621a      	str	r2, [r3, #32]
    }
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_SAI_Init+0x17a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d109      	bne.n	8006006 <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_SAI_Init+0x186>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e001      	b.n	8006002 <HAL_SAI_Init+0x18a>
 8005ffe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006002:	61bb      	str	r3, [r7, #24]
 8006004:	e008      	b.n	8006018 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600a:	2b01      	cmp	r3, #1
 800600c:	d102      	bne.n	8006014 <HAL_SAI_Init+0x19c>
 800600e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006012:	e000      	b.n	8006016 <HAL_SAI_Init+0x19e>
 8006014:	2300      	movs	r3, #0
 8006016:	61bb      	str	r3, [r7, #24]
  }
  
  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6819      	ldr	r1, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b4d      	ldr	r3, [pc, #308]	@ (8006158 <HAL_SAI_Init+0x2e0>)
 8006024:	400b      	ands	r3, r1
 8006026:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6819      	ldr	r1, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006036:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800603c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006042:	431a      	orrs	r2, r3
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ckstr_bits | syncen_bits |                               \
 8006050:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800605c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	051b      	lsls	r3, r3, #20
 8006064:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	601a      	str	r2, [r3, #0]
  
  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6859      	ldr	r1, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4b38      	ldr	r3, [pc, #224]	@ (800615c <HAL_SAI_Init+0x2e4>)
 800607a:	400b      	ands	r3, r1
 800607c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6859      	ldr	r1, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699a      	ldr	r2, [r3, #24]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	605a      	str	r2, [r3, #4]
  
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6899      	ldr	r1, [r3, #8]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	4b2e      	ldr	r3, [pc, #184]	@ (8006160 <HAL_SAI_Init+0x2e8>)
 80060a8:	400b      	ands	r3, r1
 80060aa:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6899      	ldr	r1, [r3, #8]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b6:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80060bc:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                          hsai->FrameInit.FSOffset |
 80060c2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                          hsai->FrameInit.FSDefinition |
 80060c8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ce:	3b01      	subs	r3, #1
 80060d0:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80060d2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	609a      	str	r2, [r3, #8]
  
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68d9      	ldr	r1, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80060ea:	400b      	ands	r3, r1
 80060ec:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68d9      	ldr	r1, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060fc:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006102:	041b      	lsls	r3, r3, #16
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800610a:	3b01      	subs	r3, #1
 800610c:	021b      	lsls	r3, r3, #8
 800610e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	60da      	str	r2, [r3, #12]
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40015804 	.word	0x40015804
 8006140:	40015824 	.word	0x40015824
 8006144:	40015800 	.word	0x40015800
 8006148:	40015c00 	.word	0x40015c00
 800614c:	40015c04 	.word	0x40015c04
 8006150:	40015c24 	.word	0x40015c24
 8006154:	cccccccd 	.word	0xcccccccd
 8006158:	ff05c010 	.word	0xff05c010
 800615c:	ffff1ff0 	.word	0xffff1ff0
 8006160:	fff88000 	.word	0xfff88000

08006164 <HAL_SAI_MspInit>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_SAI_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
  if((pData == NULL) || (Size == 0))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <HAL_SAI_Transmit_DMA+0x1a>
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_SAI_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e074      	b.n	8006280 <HAL_SAI_Transmit_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d16d      	bne.n	800627e <HAL_SAI_Transmit_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_SAI_Transmit_DMA+0x38>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e067      	b.n	8006280 <HAL_SAI_Transmit_DMA+0x108>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	88fa      	ldrh	r2, [r7, #6]
 80061c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	88fa      	ldrh	r2, [r7, #6]
 80061ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2212      	movs	r2, #18
 80061da:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061e2:	4a29      	ldr	r2, [pc, #164]	@ (8006288 <HAL_SAI_Transmit_DMA+0x110>)
 80061e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061ea:	4a28      	ldr	r2, [pc, #160]	@ (800628c <HAL_SAI_Transmit_DMA+0x114>)
 80061ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061f2:	4a27      	ldr	r2, [pc, #156]	@ (8006290 <HAL_SAI_Transmit_DMA+0x118>)
 80061f4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061fa:	2200      	movs	r2, #0
 80061fc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006206:	4619      	mov	r1, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	331c      	adds	r3, #28
 800620e:	461a      	mov	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006216:	f7fc fd73 	bl	8002d00 <HAL_DMA_Start_IT>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <HAL_SAI_Transmit_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e029      	b.n	8006280 <HAL_SAI_Transmit_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d107      	bne.n	800624a <HAL_SAI_Transmit_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006248:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800624a:	2100      	movs	r1, #0
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f8cd 	bl	80063ec <SAI_InterruptFlag>
 8006252:	4601      	mov	r1, r0
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006270:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	e000      	b.n	8006280 <HAL_SAI_Transmit_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800627e:	2302      	movs	r3, #2
  }
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	08006529 	.word	0x08006529
 800628c:	080064c5 	.word	0x080064c5
 8006290:	080065c5 	.word	0x080065c5

08006294 <HAL_SAI_Receive_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <HAL_SAI_Receive_DMA+0x1a>
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e074      	b.n	800639c <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d16d      	bne.n	800639a <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_SAI_Receive_DMA+0x38>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e067      	b.n	800639c <HAL_SAI_Receive_DMA+0x108>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	88fa      	ldrh	r2, [r7, #6]
 80062de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2222      	movs	r2, #34	@ 0x22
 80062f6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fe:	4a29      	ldr	r2, [pc, #164]	@ (80063a4 <HAL_SAI_Receive_DMA+0x110>)
 8006300:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006306:	4a28      	ldr	r2, [pc, #160]	@ (80063a8 <HAL_SAI_Receive_DMA+0x114>)
 8006308:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800630e:	4a27      	ldr	r2, [pc, #156]	@ (80063ac <HAL_SAI_Receive_DMA+0x118>)
 8006310:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006316:	2200      	movs	r2, #0
 8006318:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	331c      	adds	r3, #28
 8006324:	4619      	mov	r1, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800632a:	461a      	mov	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006332:	f7fc fce5 	bl	8002d00 <HAL_DMA_Start_IT>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e029      	b.n	800639c <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d107      	bne.n	8006366 <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006364:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006366:	2100      	movs	r1, #0
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f83f 	bl	80063ec <SAI_InterruptFlag>
 800636e:	4601      	mov	r1, r0
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691a      	ldr	r2, [r3, #16]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800638c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	e000      	b.n	800639c <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800639a:	2302      	movs	r3, #2
  }
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	080065a9 	.word	0x080065a9
 80063a8:	08006545 	.word	0x08006545
 80063ac:	080065c5 	.word	0x080065c5

080063b0 <HAL_SAI_TxCpltCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
 __weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_SAI_ErrorCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode: SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]
  
  if(mode == SAI_MODE_IT)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d103      	bne.n	8006408 <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f043 0308 	orr.w	r3, r3, #8
 8006406:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800640c:	2b08      	cmp	r3, #8
 800640e:	d10b      	bne.n	8006428 <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006414:	2b03      	cmp	r3, #3
 8006416:	d003      	beq.n	8006420 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d103      	bne.n	8006428 <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f043 0310 	orr.w	r3, r3, #16
 8006426:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b03      	cmp	r3, #3
 800642e:	d003      	beq.n	8006438 <SAI_InterruptFlag+0x4c>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d104      	bne.n	8006442 <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	e003      	b.n	800644a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f043 0304 	orr.w	r3, r3, #4
 8006448:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800644a:	68fb      	ldr	r3, [r7, #12]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <SAI_Disable>:
  * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006458:	b490      	push	{r4, r7}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006460:	4b16      	ldr	r3, [pc, #88]	@ (80064bc <SAI_Disable+0x64>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a16      	ldr	r2, [pc, #88]	@ (80064c0 <SAI_Disable+0x68>)
 8006466:	fba2 2303 	umull	r2, r3, r2, r3
 800646a:	0b1b      	lsrs	r3, r3, #12
 800646c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006480:	601a      	str	r2, [r3, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006482:	4623      	mov	r3, r4
 8006484:	1e5c      	subs	r4, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10a      	bne.n	80064a0 <SAI_Disable+0x48>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006490:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	73fb      	strb	r3, [r7, #15]
      break;
 800649e:	e006      	b.n	80064ae <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e9      	bne.n	8006482 <SAI_Disable+0x2a>

  return status;
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc90      	pop	{r4, r7}
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	20000138 	.word	0x20000138
 80064c0:	95cbec1b 	.word	0x95cbec1b

080064c4 <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d0:	60fb      	str	r3, [r7, #12]

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d11c      	bne.n	800651a <SAI_DMATxCplt+0x56>
  {
    hsai->XferCount = 0;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80064f6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80064f8:	2100      	movs	r1, #0
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff ff76 	bl	80063ec <SAI_InterruptFlag>
 8006500:	4603      	mov	r3, r0
 8006502:	43d9      	mvns	r1, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	400a      	ands	r2, r1
 8006510:	611a      	str	r2, [r3, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f7ff ff48 	bl	80063b0 <HAL_SAI_TxCpltCallback>
}
 8006520:	bf00      	nop
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <SAI_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006534:	60fb      	str	r3, [r7, #12]

  HAL_SAI_TxHalfCpltCallback(hsai);
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f7ff ff44 	bl	80063c4 <HAL_SAI_TxHalfCpltCallback>
}
 800653c:	bf00      	nop
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006550:	60fb      	str	r3, [r7, #12]
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800655c:	2b00      	cmp	r3, #0
 800655e:	d11c      	bne.n	800659a <SAI_DMARxCplt+0x56>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800656e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006578:	2100      	movs	r1, #0
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f7ff ff36 	bl	80063ec <SAI_InterruptFlag>
 8006580:	4603      	mov	r3, r0
 8006582:	43d9      	mvns	r1, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	400a      	ands	r2, r1
 8006590:	611a      	str	r2, [r3, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7fa fe9e 	bl	80012dc <HAL_SAI_RxCpltCallback>
}
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b4:	60fb      	str	r3, [r7, #12]

  HAL_SAI_RxHalfCpltCallback(hsai);
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7fa fe86 	bl	80012c8 <HAL_SAI_RxHalfCpltCallback>
}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d0:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d004      	beq.n	80065f6 <SAI_DMAError+0x32>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d112      	bne.n	800661c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006604:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f7ff ff26 	bl	8006458 <SAI_Disable>
    
    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f7ff fedb 	bl	80063d8 <HAL_SAI_ErrorCallback>
}
 8006622:	bf00      	nop
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <__errno>:
 800662c:	4b01      	ldr	r3, [pc, #4]	@ (8006634 <__errno+0x8>)
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	2000014c 	.word	0x2000014c

08006638 <__libc_init_array>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	4d0d      	ldr	r5, [pc, #52]	@ (8006670 <__libc_init_array+0x38>)
 800663c:	4c0d      	ldr	r4, [pc, #52]	@ (8006674 <__libc_init_array+0x3c>)
 800663e:	1b64      	subs	r4, r4, r5
 8006640:	10a4      	asrs	r4, r4, #2
 8006642:	2600      	movs	r6, #0
 8006644:	42a6      	cmp	r6, r4
 8006646:	d109      	bne.n	800665c <__libc_init_array+0x24>
 8006648:	4d0b      	ldr	r5, [pc, #44]	@ (8006678 <__libc_init_array+0x40>)
 800664a:	4c0c      	ldr	r4, [pc, #48]	@ (800667c <__libc_init_array+0x44>)
 800664c:	f000 f9c6 	bl	80069dc <_init>
 8006650:	1b64      	subs	r4, r4, r5
 8006652:	10a4      	asrs	r4, r4, #2
 8006654:	2600      	movs	r6, #0
 8006656:	42a6      	cmp	r6, r4
 8006658:	d105      	bne.n	8006666 <__libc_init_array+0x2e>
 800665a:	bd70      	pop	{r4, r5, r6, pc}
 800665c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006660:	4798      	blx	r3
 8006662:	3601      	adds	r6, #1
 8006664:	e7ee      	b.n	8006644 <__libc_init_array+0xc>
 8006666:	f855 3b04 	ldr.w	r3, [r5], #4
 800666a:	4798      	blx	r3
 800666c:	3601      	adds	r6, #1
 800666e:	e7f2      	b.n	8006656 <__libc_init_array+0x1e>
 8006670:	08006b68 	.word	0x08006b68
 8006674:	08006b68 	.word	0x08006b68
 8006678:	08006b68 	.word	0x08006b68
 800667c:	08006b6c 	.word	0x08006b6c

08006680 <sinf_poly>:
 8006680:	07cb      	lsls	r3, r1, #31
 8006682:	d412      	bmi.n	80066aa <sinf_poly+0x2a>
 8006684:	ee21 5b00 	vmul.f64	d5, d1, d0
 8006688:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800668c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8006690:	eea6 7b01 	vfma.f64	d7, d6, d1
 8006694:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8006698:	ee21 1b05 	vmul.f64	d1, d1, d5
 800669c:	eea6 0b05 	vfma.f64	d0, d6, d5
 80066a0:	eea7 0b01 	vfma.f64	d0, d7, d1
 80066a4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80066a8:	4770      	bx	lr
 80066aa:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80066ae:	ee21 5b01 	vmul.f64	d5, d1, d1
 80066b2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80066b6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80066ba:	eea1 7b06 	vfma.f64	d7, d1, d6
 80066be:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80066c2:	eea1 0b06 	vfma.f64	d0, d1, d6
 80066c6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80066ca:	ee21 1b05 	vmul.f64	d1, d1, d5
 80066ce:	eea5 0b06 	vfma.f64	d0, d5, d6
 80066d2:	e7e5      	b.n	80066a0 <sinf_poly+0x20>
 80066d4:	0000      	movs	r0, r0
	...

080066d8 <sinf>:
 80066d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066da:	ee10 4a10 	vmov	r4, s0
 80066de:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80066e2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80066e6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80066ea:	eef0 7a40 	vmov.f32	s15, s0
 80066ee:	ea4f 5214 	mov.w	r2, r4, lsr #20
 80066f2:	d218      	bcs.n	8006726 <sinf+0x4e>
 80066f4:	ee26 1b06 	vmul.f64	d1, d6, d6
 80066f8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80066fc:	d20a      	bcs.n	8006714 <sinf+0x3c>
 80066fe:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8006702:	d103      	bne.n	800670c <sinf+0x34>
 8006704:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8006708:	ed8d 1a01 	vstr	s2, [sp, #4]
 800670c:	eeb0 0a67 	vmov.f32	s0, s15
 8006710:	b003      	add	sp, #12
 8006712:	bd30      	pop	{r4, r5, pc}
 8006714:	483a      	ldr	r0, [pc, #232]	@ (8006800 <sinf+0x128>)
 8006716:	eeb0 0b46 	vmov.f64	d0, d6
 800671a:	2100      	movs	r1, #0
 800671c:	b003      	add	sp, #12
 800671e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006722:	f7ff bfad 	b.w	8006680 <sinf_poly>
 8006726:	f240 422e 	movw	r2, #1070	@ 0x42e
 800672a:	4293      	cmp	r3, r2
 800672c:	d824      	bhi.n	8006778 <sinf+0xa0>
 800672e:	4b34      	ldr	r3, [pc, #208]	@ (8006800 <sinf+0x128>)
 8006730:	ed93 7b08 	vldr	d7, [r3, #32]
 8006734:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006738:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800673c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8006740:	ee17 1a90 	vmov	r1, s15
 8006744:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8006748:	1609      	asrs	r1, r1, #24
 800674a:	ee07 1a90 	vmov	s15, r1
 800674e:	f001 0203 	and.w	r2, r1, #3
 8006752:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006756:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800675a:	ed92 0b00 	vldr	d0, [r2]
 800675e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8006762:	f011 0f02 	tst.w	r1, #2
 8006766:	eea5 6b47 	vfms.f64	d6, d5, d7
 800676a:	bf08      	it	eq
 800676c:	4618      	moveq	r0, r3
 800676e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006772:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006776:	e7d1      	b.n	800671c <sinf+0x44>
 8006778:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800677c:	d237      	bcs.n	80067ee <sinf+0x116>
 800677e:	4921      	ldr	r1, [pc, #132]	@ (8006804 <sinf+0x12c>)
 8006780:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8006784:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8006788:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800678c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8006790:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006794:	6a10      	ldr	r0, [r2, #32]
 8006796:	6912      	ldr	r2, [r2, #16]
 8006798:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800679c:	40ab      	lsls	r3, r5
 800679e:	fba0 5003 	umull	r5, r0, r0, r3
 80067a2:	4359      	muls	r1, r3
 80067a4:	fbe3 0102 	umlal	r0, r1, r3, r2
 80067a8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80067ac:	0f9d      	lsrs	r5, r3, #30
 80067ae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80067b2:	1ac9      	subs	r1, r1, r3
 80067b4:	f7f9 fece 	bl	8000554 <__aeabi_l2d>
 80067b8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80067bc:	4b10      	ldr	r3, [pc, #64]	@ (8006800 <sinf+0x128>)
 80067be:	f004 0203 	and.w	r2, r4, #3
 80067c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80067c6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80067f8 <sinf+0x120>
 80067ca:	ed92 0b00 	vldr	d0, [r2]
 80067ce:	ec41 0b17 	vmov	d7, r0, r1
 80067d2:	f014 0f02 	tst.w	r4, #2
 80067d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80067da:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80067de:	4629      	mov	r1, r5
 80067e0:	bf08      	it	eq
 80067e2:	4618      	moveq	r0, r3
 80067e4:	ee27 1b07 	vmul.f64	d1, d7, d7
 80067e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80067ec:	e796      	b.n	800671c <sinf+0x44>
 80067ee:	b003      	add	sp, #12
 80067f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067f4:	f000 b8e2 	b.w	80069bc <__math_invalidf>
 80067f8:	54442d18 	.word	0x54442d18
 80067fc:	3c1921fb 	.word	0x3c1921fb
 8006800:	08006a88 	.word	0x08006a88
 8006804:	08006a24 	.word	0x08006a24

08006808 <sinf_poly>:
 8006808:	07cb      	lsls	r3, r1, #31
 800680a:	d412      	bmi.n	8006832 <sinf_poly+0x2a>
 800680c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8006810:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8006814:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8006818:	eea6 7b01 	vfma.f64	d7, d6, d1
 800681c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8006820:	ee21 1b05 	vmul.f64	d1, d1, d5
 8006824:	eea6 0b05 	vfma.f64	d0, d6, d5
 8006828:	eea7 0b01 	vfma.f64	d0, d7, d1
 800682c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006830:	4770      	bx	lr
 8006832:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8006836:	ee21 5b01 	vmul.f64	d5, d1, d1
 800683a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800683e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8006842:	eea1 7b06 	vfma.f64	d7, d1, d6
 8006846:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800684a:	eea1 0b06 	vfma.f64	d0, d1, d6
 800684e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8006852:	ee21 1b05 	vmul.f64	d1, d1, d5
 8006856:	eea5 0b06 	vfma.f64	d0, d5, d6
 800685a:	e7e5      	b.n	8006828 <sinf_poly+0x20>
 800685c:	0000      	movs	r0, r0
	...

08006860 <cosf>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	ee10 4a10 	vmov	r4, s0
 8006866:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800686a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800686e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8006872:	d21f      	bcs.n	80068b4 <cosf+0x54>
 8006874:	ee27 7b07 	vmul.f64	d7, d7, d7
 8006878:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800687c:	f0c0 8082 	bcc.w	8006984 <cosf+0x124>
 8006880:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006884:	4b44      	ldr	r3, [pc, #272]	@ (8006998 <cosf+0x138>)
 8006886:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 800688a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800688e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8006892:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006896:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 800689a:	eea7 0b05 	vfma.f64	d0, d7, d5
 800689e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80068a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80068a6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80068aa:	eea6 0b07 	vfma.f64	d0, d6, d7
 80068ae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	f240 422e 	movw	r2, #1070	@ 0x42e
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d829      	bhi.n	8006910 <cosf+0xb0>
 80068bc:	4b36      	ldr	r3, [pc, #216]	@ (8006998 <cosf+0x138>)
 80068be:	ed93 6b08 	vldr	d6, [r3, #32]
 80068c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80068c6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80068ca:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80068ce:	ee16 1a90 	vmov	r1, s13
 80068d2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80068d6:	1609      	asrs	r1, r1, #24
 80068d8:	ee06 1a90 	vmov	s13, r1
 80068dc:	f001 0203 	and.w	r2, r1, #3
 80068e0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80068e4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80068e8:	ed92 0b00 	vldr	d0, [r2]
 80068ec:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80068f0:	f011 0f02 	tst.w	r1, #2
 80068f4:	f081 0101 	eor.w	r1, r1, #1
 80068f8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80068fc:	bf08      	it	eq
 80068fe:	4618      	moveq	r0, r3
 8006900:	ee27 1b07 	vmul.f64	d1, d7, d7
 8006904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006908:	ee20 0b07 	vmul.f64	d0, d0, d7
 800690c:	f7ff bf7c 	b.w	8006808 <sinf_poly>
 8006910:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8006914:	d232      	bcs.n	800697c <cosf+0x11c>
 8006916:	4921      	ldr	r1, [pc, #132]	@ (800699c <cosf+0x13c>)
 8006918:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800691c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8006920:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8006924:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8006928:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800692c:	6a10      	ldr	r0, [r2, #32]
 800692e:	6912      	ldr	r2, [r2, #16]
 8006930:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006934:	40ab      	lsls	r3, r5
 8006936:	fba0 5003 	umull	r5, r0, r0, r3
 800693a:	4359      	muls	r1, r3
 800693c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8006940:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8006944:	0f9d      	lsrs	r5, r3, #30
 8006946:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800694a:	1ac9      	subs	r1, r1, r3
 800694c:	f7f9 fe02 	bl	8000554 <__aeabi_l2d>
 8006950:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8006954:	4b10      	ldr	r3, [pc, #64]	@ (8006998 <cosf+0x138>)
 8006956:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8006990 <cosf+0x130>
 800695a:	ec41 0b17 	vmov	d7, r0, r1
 800695e:	f004 0203 	and.w	r2, r4, #3
 8006962:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006966:	ed92 0b00 	vldr	d0, [r2]
 800696a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800696e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8006972:	f014 0f02 	tst.w	r4, #2
 8006976:	f085 0101 	eor.w	r1, r5, #1
 800697a:	e7bf      	b.n	80068fc <cosf+0x9c>
 800697c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006980:	f000 b81c 	b.w	80069bc <__math_invalidf>
 8006984:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006988:	e793      	b.n	80068b2 <cosf+0x52>
 800698a:	bf00      	nop
 800698c:	f3af 8000 	nop.w
 8006990:	54442d18 	.word	0x54442d18
 8006994:	3c1921fb 	.word	0x3c1921fb
 8006998:	08006a88 	.word	0x08006a88
 800699c:	08006a24 	.word	0x08006a24

080069a0 <with_errnof>:
 80069a0:	b510      	push	{r4, lr}
 80069a2:	ed2d 8b02 	vpush	{d8}
 80069a6:	eeb0 8a40 	vmov.f32	s16, s0
 80069aa:	4604      	mov	r4, r0
 80069ac:	f7ff fe3e 	bl	800662c <__errno>
 80069b0:	eeb0 0a48 	vmov.f32	s0, s16
 80069b4:	ecbd 8b02 	vpop	{d8}
 80069b8:	6004      	str	r4, [r0, #0]
 80069ba:	bd10      	pop	{r4, pc}

080069bc <__math_invalidf>:
 80069bc:	eef0 7a40 	vmov.f32	s15, s0
 80069c0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80069c4:	eef4 7a67 	vcmp.f32	s15, s15
 80069c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069cc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80069d0:	d602      	bvs.n	80069d8 <__math_invalidf+0x1c>
 80069d2:	2021      	movs	r0, #33	@ 0x21
 80069d4:	f7ff bfe4 	b.w	80069a0 <with_errnof>
 80069d8:	4770      	bx	lr
	...

080069dc <_init>:
 80069dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069de:	bf00      	nop
 80069e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e2:	bc08      	pop	{r3}
 80069e4:	469e      	mov	lr, r3
 80069e6:	4770      	bx	lr

080069e8 <_fini>:
 80069e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ea:	bf00      	nop
 80069ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ee:	bc08      	pop	{r3}
 80069f0:	469e      	mov	lr, r3
 80069f2:	4770      	bx	lr
