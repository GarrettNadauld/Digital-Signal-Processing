
ece5210-distort-repo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a0  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018e8  08006598  08006598  00016598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e80  08007e80  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08007e80  08007e80  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e80  08007e80  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e80  08007e80  00017e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e84  08007e84  00017e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005378  2000006c  08007ef4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200053e4  08007ef4  000253e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c0d4  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021e0  00000000  00000000  0002c1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  0002e398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000086f  00000000  00000000  0002eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002de3c  00000000  00000000  0002f727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f63b  00000000  00000000  0005d563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010d509  00000000  00000000  0006cb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f94  00000000  00000000  0017a0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0017d03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000006c 	.word	0x2000006c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006580 	.word	0x08006580

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000070 	.word	0x20000070
 8000234:	08006580 	.word	0x08006580

08000238 <distortion>:
#include <stddef.h>
#include <stdio.h>

#define LIMIT 4500

float distortion(float insample, float limit){
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000242:	edc7 0a00 	vstr	s1, [r7]
	float y_n = 0.0;
 8000246:	f04f 0300 	mov.w	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
	float temp = insample/limit;
 800024c:	edd7 6a01 	vldr	s13, [r7, #4]
 8000250:	ed97 7a00 	vldr	s14, [r7]
 8000254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000258:	edc7 7a02 	vstr	s15, [r7, #8]

	if (temp <= -1){
 800025c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000260:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800026c:	d802      	bhi.n	8000274 <distortion+0x3c>
		y_n = (float)(-2.0/3.0);//*limit;
 800026e:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <distortion+0xa4>)
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	e023      	b.n	80002bc <distortion+0x84>
	}

	else if (temp > 1){
 8000274:	edd7 7a02 	vldr	s15, [r7, #8]
 8000278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800027c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000284:	dd02      	ble.n	800028c <distortion+0x54>
		y_n = (float)(2.0/3.0 );//*limit;
 8000286:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <distortion+0xa8>)
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	e017      	b.n	80002bc <distortion+0x84>
	}
	else {
		y_n = temp - ((float)((pow(temp,3))/3));
 800028c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000290:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000294:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8000298:	eeb0 0b47 	vmov.f64	d0, d7
 800029c:	f005 feb0 	bl	8006000 <pow>
 80002a0:	eeb0 6b40 	vmov.f64	d6, d0
 80002a4:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80002a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80002ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80002b0:	ed97 7a02 	vldr	s14, [r7, #8]
 80002b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80002b8:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	y_n *= limit;
 80002bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80002c0:	edd7 7a00 	vldr	s15, [r7]
 80002c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002c8:	edc7 7a03 	vstr	s15, [r7, #12]

	return y_n;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	ee07 3a90 	vmov	s15, r3
}
 80002d2:	eeb0 0a67 	vmov.f32	s0, s15
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	bf2aaaab 	.word	0xbf2aaaab
 80002e0:	3f2aaaab 	.word	0x3f2aaaab

080002e4 <process_sample>:

int16_t process_sample(int16_t sample_in)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	80fb      	strh	r3, [r7, #6]
    int16_t sample_out = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	82fb      	strh	r3, [r7, #22]
    float sample_in_f = (float)sample_in;
 80002f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002f6:	ee07 3a90 	vmov	s15, r3
 80002fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002fe:	edc7 7a04 	vstr	s15, [r7, #16]

    // This is just simple pass through, if you want to
    // do any signal processing, start editing here...
    float sample_out_f = distortion(sample_in_f, LIMIT);
 8000302:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800032c <process_sample+0x48>
 8000306:	ed97 0a04 	vldr	s0, [r7, #16]
 800030a:	f7ff ff95 	bl	8000238 <distortion>
 800030e:	ed87 0a03 	vstr	s0, [r7, #12]

    // Convert back to int16_t
    sample_out = (int16_t)sample_out_f;
 8000312:	edd7 7a03 	vldr	s15, [r7, #12]
 8000316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800031a:	ee17 3a90 	vmov	r3, s15
 800031e:	82fb      	strh	r3, [r7, #22]
    return sample_out;
 8000320:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3718      	adds	r7, #24
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	458ca000 	.word	0x458ca000

08000330 <main>:
#include "myaudio.h"

void SystemClock_Config(void);

int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0

    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */
    HAL_Init();
 8000334:	f001 fee1 	bl	80020fa <HAL_Init>

    BSP_LED_Init(LED_RED);
 8000338:	2000      	movs	r0, #0
 800033a:	f001 fd03 	bl	8001d44 <BSP_LED_Init>
    BSP_LED_Init(LED_GREEN);
 800033e:	2001      	movs	r0, #1
 8000340:	f001 fd00 	bl	8001d44 <BSP_LED_Init>
    BSP_LED_Off(LED_RED);
 8000344:	2000      	movs	r0, #0
 8000346:	f001 fd47 	bl	8001dd8 <BSP_LED_Off>
    BSP_LED_On(LED_GREEN);
 800034a:	2001      	movs	r0, #1
 800034c:	f001 fd2a 	bl	8001da4 <BSP_LED_On>

    /* Configure the system clock */
    SystemClock_Config();
 8000350:	f000 f804 	bl	800035c <SystemClock_Config>

    audio_init();
 8000354:	f000 f8b4 	bl	80004c0 <audio_init>
    while (1)
 8000358:	e7fe      	b.n	8000358 <main+0x28>
	...

0800035c <SystemClock_Config>:
}

/** System Clock Configuration
 */
void SystemClock_Config(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b0b8      	sub	sp, #224	; 0xe0
 8000360:	af00      	add	r7, sp, #0
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000362:	4b4f      	ldr	r3, [pc, #316]	; (80004a0 <SystemClock_Config+0x144>)
 8000364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000366:	4a4e      	ldr	r2, [pc, #312]	; (80004a0 <SystemClock_Config+0x144>)
 8000368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800036c:	6413      	str	r3, [r2, #64]	; 0x40
 800036e:	4b4c      	ldr	r3, [pc, #304]	; (80004a0 <SystemClock_Config+0x144>)
 8000370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800037a:	4b4a      	ldr	r3, [pc, #296]	; (80004a4 <SystemClock_Config+0x148>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a49      	ldr	r2, [pc, #292]	; (80004a4 <SystemClock_Config+0x148>)
 8000380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000384:	6013      	str	r3, [r2, #0]
 8000386:	4b47      	ldr	r3, [pc, #284]	; (80004a4 <SystemClock_Config+0x148>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800038e:	603b      	str	r3, [r7, #0]
 8000390:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000392:	2301      	movs	r3, #1
 8000394:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a0:	2302      	movs	r3, #2
 80003a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_OscInitStruct.PLL.PLLM = 25;
 80003ae:	2319      	movs	r3, #25
 80003b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_OscInitStruct.PLL.PLLN = 432;
 80003b4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80003b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003bc:	2302      	movs	r3, #2
 80003be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80003c2:	2304      	movs	r3, #4
 80003c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80003cc:	4618      	mov	r0, r3
 80003ce:	f003 f9d3 	bl	8003778 <HAL_RCC_OscConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d003      	beq.n	80003e0 <SystemClock_Config+0x84>
    {
        _Error_Handler(__FILE__, __LINE__);
 80003d8:	2160      	movs	r1, #96	; 0x60
 80003da:	4833      	ldr	r0, [pc, #204]	; (80004a8 <SystemClock_Config+0x14c>)
 80003dc:	f000 f86a 	bl	80004b4 <_Error_Handler>
    }

    /**Activate the Over-Drive mode
     */
    if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80003e0:	f003 f97a 	bl	80036d8 <HAL_PWREx_EnableOverDrive>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d003      	beq.n	80003f2 <SystemClock_Config+0x96>
    {
        _Error_Handler(__FILE__, __LINE__);
 80003ea:	2167      	movs	r1, #103	; 0x67
 80003ec:	482e      	ldr	r0, [pc, #184]	; (80004a8 <SystemClock_Config+0x14c>)
 80003ee:	f000 f861 	bl	80004b4 <_Error_Handler>
    }

    /**Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80003f2:	230f      	movs	r3, #15
 80003f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f8:	2302      	movs	r3, #2
 80003fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000404:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000408:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800040c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000414:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000418:	2107      	movs	r1, #7
 800041a:	4618      	mov	r0, r3
 800041c:	f003 fc64 	bl	8003ce8 <HAL_RCC_ClockConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d003      	beq.n	800042e <SystemClock_Config+0xd2>
    {
        _Error_Handler(__FILE__, __LINE__);
 8000426:	2175      	movs	r1, #117	; 0x75
 8000428:	481f      	ldr	r0, [pc, #124]	; (80004a8 <SystemClock_Config+0x14c>)
 800042a:	f000 f843 	bl	80004b4 <_Error_Handler>
    }

    PeriphClkInitStruct.PeriphClockSelection =
 800042e:	4b1f      	ldr	r3, [pc, #124]	; (80004ac <SystemClock_Config+0x150>)
 8000430:	60bb      	str	r3, [r7, #8]
        RCC_PERIPHCLK_DFSDM1 | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_SAI1;
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000432:	23c0      	movs	r3, #192	; 0xc0
 8000434:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000436:	2302      	movs	r3, #2
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800043a:	2303      	movs	r3, #3
 800043c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800043e:	2300      	movs	r3, #0
 8000440:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000442:	2301      	movs	r3, #1
 8000444:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000446:	2300      	movs	r3, #0
 8000448:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800044a:	2300      	movs	r3, #0
 800044c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800044e:	2300      	movs	r3, #0
 8000450:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000452:	2300      	movs	r3, #0
 8000454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000458:	f107 0308 	add.w	r3, r7, #8
 800045c:	4618      	mov	r0, r3
 800045e:	f003 fdcf 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d003      	beq.n	8000470 <SystemClock_Config+0x114>
    {
        _Error_Handler(__FILE__, __LINE__);
 8000468:	2185      	movs	r1, #133	; 0x85
 800046a:	480f      	ldr	r0, [pc, #60]	; (80004a8 <SystemClock_Config+0x14c>)
 800046c:	f000 f822 	bl	80004b4 <_Error_Handler>
    }

    /**Configure the Systick interrupt time
     */
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000470:	f003 fdba 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8000474:	4603      	mov	r3, r0
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <SystemClock_Config+0x154>)
 8000478:	fba2 2303 	umull	r2, r3, r2, r3
 800047c:	099b      	lsrs	r3, r3, #6
 800047e:	4618      	mov	r0, r3
 8000480:	f001 ff97 	bl	80023b2 <HAL_SYSTICK_Config>

    /**Configure the Systick
     */
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000484:	2004      	movs	r0, #4
 8000486:	f001 ffa1 	bl	80023cc <HAL_SYSTICK_CLKSourceConfig>

    /* SysTick_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000492:	f001 ff64 	bl	800235e <HAL_NVIC_SetPriority>
}
 8000496:	bf00      	nop
 8000498:	37e0      	adds	r7, #224	; 0xe0
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40023800 	.word	0x40023800
 80004a4:	40007000 	.word	0x40007000
 80004a8:	08006598 	.word	0x08006598
 80004ac:	08080040 	.word	0x08080040
 80004b0:	10624dd3 	.word	0x10624dd3

080004b4 <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    while (1)
 80004be:	e7fe      	b.n	80004be <_Error_Handler+0xa>

080004c0 <audio_init>:
#define AUDIO_I2C_ADDRESS ((uint16_t)0x34)

///////////////////////////////////////////////////////////

void audio_init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
    haudio_out_sai.Instance = SAI1_Block_A;
 80004c4:	4b37      	ldr	r3, [pc, #220]	; (80005a4 <audio_init+0xe4>)
 80004c6:	4a38      	ldr	r2, [pc, #224]	; (80005a8 <audio_init+0xe8>)
 80004c8:	601a      	str	r2, [r3, #0]
    haudio_in_sai.Instance = SAI1_Block_B;
 80004ca:	4b38      	ldr	r3, [pc, #224]	; (80005ac <audio_init+0xec>)
 80004cc:	4a38      	ldr	r2, [pc, #224]	; (80005b0 <audio_init+0xf0>)
 80004ce:	601a      	str	r2, [r3, #0]

    fill_buffer_with_square_wave(playbackBuffer, MY_BUFFER_SIZE_SAMPLES);
 80004d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d4:	4837      	ldr	r0, [pc, #220]	; (80005b4 <audio_init+0xf4>)
 80004d6:	f000 f883 	bl	80005e0 <fill_buffer_with_square_wave>

    ConvertSampleBufferToDMABuffer(playbackBuffer, playbackBuffer,
 80004da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004de:	4a36      	ldr	r2, [pc, #216]	; (80005b8 <audio_init+0xf8>)
 80004e0:	4934      	ldr	r1, [pc, #208]	; (80005b4 <audio_init+0xf4>)
 80004e2:	4834      	ldr	r0, [pc, #208]	; (80005b4 <audio_init+0xf4>)
 80004e4:	f000 f8b4 	bl	8000650 <ConvertSampleBufferToDMABuffer>
                                   saiDMATransmitBuffer,
                                   MY_BUFFER_SIZE_SAMPLES);

    My_SAI_ClockConfig(frequency);
 80004e8:	4b34      	ldr	r3, [pc, #208]	; (80005bc <audio_init+0xfc>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 f925 	bl	800073c <My_SAI_ClockConfig>

    My_AUDIO_OUT_MspInit();
 80004f2:	f000 f965 	bl	80007c0 <My_AUDIO_OUT_MspInit>
    My_SAI_Out_Init(frequency);
 80004f6:	4b31      	ldr	r3, [pc, #196]	; (80005bc <audio_init+0xfc>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 f9fc 	bl	80008f8 <My_SAI_Out_Init>

    My_AUDIO_IN_MspInit();
 8000500:	f000 fa62 	bl	80009c8 <My_AUDIO_IN_MspInit>
    My_SAI_In_Init(frequency);
 8000504:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <audio_init+0xfc>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4618      	mov	r0, r3
 800050a:	f000 fae3 	bl	8000ad4 <My_SAI_In_Init>

    wm8994_Init(AUDIO_I2C_ADDRESS,
 800050e:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <audio_init+0x100>)
 8000510:	781a      	ldrb	r2, [r3, #0]
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <audio_init+0xfc>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f240 3102 	movw	r1, #770	; 0x302
 800051a:	2034      	movs	r0, #52	; 0x34
 800051c:	f000 fc24 	bl	8000d68 <wm8994_Init>
                INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_HEADPHONE, volume,
                frequency);

    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t *)saiDMATransmitBuffer,
 8000520:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000524:	4924      	ldr	r1, [pc, #144]	; (80005b8 <audio_init+0xf8>)
 8000526:	481f      	ldr	r0, [pc, #124]	; (80005a4 <audio_init+0xe4>)
 8000528:	f005 fab0 	bl	8005a8c <HAL_SAI_Transmit_DMA>
                         MY_DMA_BUFFER_SIZE_MSIZES);
    HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t *)saiDMAReceiveBuffer,
 800052c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000530:	4924      	ldr	r1, [pc, #144]	; (80005c4 <audio_init+0x104>)
 8000532:	481e      	ldr	r0, [pc, #120]	; (80005ac <audio_init+0xec>)
 8000534:	f005 fb38 	bl	8005ba8 <HAL_SAI_Receive_DMA>
                        MY_DMA_BUFFER_SIZE_MSIZES);

    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <audio_init+0x108>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]

    while (1)
    {
        if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <audio_init+0x108>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0fb      	beq.n	800053e <audio_init+0x7e>
        {
            if (audio_rec_buffer_state == BUFFER_OFFSET_HALF)
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <audio_init+0x108>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d113      	bne.n	8000576 <audio_init+0xb6>
            {
                ExtractSamplesFromDMABuffer(&saiDMAReceiveBuffer[0],
 800054e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000552:	491e      	ldr	r1, [pc, #120]	; (80005cc <audio_init+0x10c>)
 8000554:	481b      	ldr	r0, [pc, #108]	; (80005c4 <audio_init+0x104>)
 8000556:	f000 f8a9 	bl	80006ac <ExtractSamplesFromDMABuffer>
                                            &recordBuffer[0],
                                            MY_BUFFER_SIZE_SAMPLES / 2);

                CopySampleBuffer(&playbackBuffer[0], &recordBuffer[0],
 800055a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800055e:	491b      	ldr	r1, [pc, #108]	; (80005cc <audio_init+0x10c>)
 8000560:	4814      	ldr	r0, [pc, #80]	; (80005b4 <audio_init+0xf4>)
 8000562:	f000 f8c7 	bl	80006f4 <CopySampleBuffer>
                                 MY_BUFFER_SIZE_SAMPLES / 2);

                ConvertSampleBufferToDMABuffer(
 8000566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800056a:	4a13      	ldr	r2, [pc, #76]	; (80005b8 <audio_init+0xf8>)
 800056c:	4911      	ldr	r1, [pc, #68]	; (80005b4 <audio_init+0xf4>)
 800056e:	4817      	ldr	r0, [pc, #92]	; (80005cc <audio_init+0x10c>)
 8000570:	f000 f86e 	bl	8000650 <ConvertSampleBufferToDMABuffer>
 8000574:	e012      	b.n	800059c <audio_init+0xdc>
                    &recordBuffer[0], &playbackBuffer[0],
                    &saiDMATransmitBuffer[0], MY_BUFFER_SIZE_SAMPLES / 2);
            }
            else
            {
                ExtractSamplesFromDMABuffer(
 8000576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800057a:	4915      	ldr	r1, [pc, #84]	; (80005d0 <audio_init+0x110>)
 800057c:	4815      	ldr	r0, [pc, #84]	; (80005d4 <audio_init+0x114>)
 800057e:	f000 f895 	bl	80006ac <ExtractSamplesFromDMABuffer>
                    &saiDMAReceiveBuffer[MY_DMA_BUFFER_SIZE_BYTES / 2],
                    &recordBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    MY_BUFFER_SIZE_SAMPLES / 2);

                CopySampleBuffer(&playbackBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
 8000582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000586:	4912      	ldr	r1, [pc, #72]	; (80005d0 <audio_init+0x110>)
 8000588:	4813      	ldr	r0, [pc, #76]	; (80005d8 <audio_init+0x118>)
 800058a:	f000 f8b3 	bl	80006f4 <CopySampleBuffer>
                                 &recordBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                                 MY_BUFFER_SIZE_SAMPLES / 2);

                ConvertSampleBufferToDMABuffer(
 800058e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <audio_init+0x11c>)
 8000594:	4910      	ldr	r1, [pc, #64]	; (80005d8 <audio_init+0x118>)
 8000596:	480e      	ldr	r0, [pc, #56]	; (80005d0 <audio_init+0x110>)
 8000598:	f000 f85a 	bl	8000650 <ConvertSampleBufferToDMABuffer>
                    &recordBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    &playbackBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    &saiDMATransmitBuffer[MY_DMA_BUFFER_SIZE_BYTES / 2],
                    MY_BUFFER_SIZE_SAMPLES / 2);
            }
            audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <audio_init+0x108>)
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
        if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 80005a2:	e7cc      	b.n	800053e <audio_init+0x7e>
 80005a4:	2000510c 	.word	0x2000510c
 80005a8:	40015804 	.word	0x40015804
 80005ac:	20005088 	.word	0x20005088
 80005b0:	40015824 	.word	0x40015824
 80005b4:	20004088 	.word	0x20004088
 80005b8:	20000088 	.word	0x20000088
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20002088 	.word	0x20002088
 80005c8:	20005190 	.word	0x20005190
 80005cc:	20004888 	.word	0x20004888
 80005d0:	20004c88 	.word	0x20004c88
 80005d4:	20003088 	.word	0x20003088
 80005d8:	20004488 	.word	0x20004488
 80005dc:	20001088 	.word	0x20001088

080005e0 <fill_buffer_with_square_wave>:
        }
    }
}

static void fill_buffer_with_square_wave(int16_t *buf, uint32_t num_samples)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b089      	sub	sp, #36	; 0x24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    // Fill up a 100hz square wave
    // 48khz sample rate --> 480 samples in 100 hz --> toggle every 240 samples

    int toggle_period = 240;
 80005ea:	23f0      	movs	r3, #240	; 0xf0
 80005ec:	613b      	str	r3, [r7, #16]
    int count = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
    int wave_state = 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	61bb      	str	r3, [r7, #24]
    int magnitude = 30000;
 80005f6:	f247 5330 	movw	r3, #30000	; 0x7530
 80005fa:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < num_samples; i++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	e01b      	b.n	800063a <fill_buffer_with_square_wave+0x5a>
    {
        buf[i] = magnitude * wave_state;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	b29a      	uxth	r2, r3
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	b29b      	uxth	r3, r3
 800060a:	fb12 f303 	smulbb	r3, r2, r3
 800060e:	b299      	uxth	r1, r3
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	4413      	add	r3, r2
 8000618:	b20a      	sxth	r2, r1
 800061a:	801a      	strh	r2, [r3, #0]
        count++;
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	3301      	adds	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]

        if (count >= toggle_period)
 8000622:	69fa      	ldr	r2, [r7, #28]
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	429a      	cmp	r2, r3
 8000628:	db04      	blt.n	8000634 <fill_buffer_with_square_wave+0x54>
        {
            count = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
            wave_state = wave_state * (-1); // toggle here
 800062e:	69bb      	ldr	r3, [r7, #24]
 8000630:	425b      	negs	r3, r3
 8000632:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < num_samples; i++)
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	3301      	adds	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	429a      	cmp	r2, r3
 8000640:	d8df      	bhi.n	8000602 <fill_buffer_with_square_wave+0x22>
        }
    }
}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	3724      	adds	r7, #36	; 0x24
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <ConvertSampleBufferToDMABuffer>:
*/
static void ConvertSampleBufferToDMABuffer(int16_t *sampleInBuffer,
                                           int16_t *processOutBuffer,
                                           uint8_t *dmaBuffer,
                                           uint32_t num_samples)
{
 8000650:	b480      	push	{r7}
 8000652:	b087      	sub	sp, #28
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	e018      	b.n	8000696 <ConvertSampleBufferToDMABuffer+0x46>
    {
        // samples are spaced 8 bytes apart
        int16_t *p = (int16_t *)&dmaBuffer[i * 8];
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	4413      	add	r3, r2
 800066c:	613b      	str	r3, [r7, #16]
        *p = processOutBuffer[i]; // left channel
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	4413      	add	r3, r2
 8000676:	f9b3 2000 	ldrsh.w	r2, [r3]
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	801a      	strh	r2, [r3, #0]

#ifdef PASSTHROUGH_RIGHT
        *(p + 2) = sampleInBuffer[i]; // right channel
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	441a      	add	r2, r3
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	3304      	adds	r3, #4
 800068a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800068e:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	3301      	adds	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	697a      	ldr	r2, [r7, #20]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	429a      	cmp	r2, r3
 800069c:	d3e2      	bcc.n	8000664 <ConvertSampleBufferToDMABuffer+0x14>
#else
        *(p + 2) = processOutBuffer[i];
#endif
    }
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	371c      	adds	r7, #28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <ExtractSamplesFromDMABuffer>:
   for now just take 1 channel
*/
static void ExtractSamplesFromDMABuffer(uint8_t *dmaBuffer,
                                        int16_t *sampleBuffer,
                                        uint32_t num_samples)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b087      	sub	sp, #28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < num_samples; ++i)
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	e00f      	b.n	80006de <ExtractSamplesFromDMABuffer+0x32>
    {
        int16_t *samplePointer = (int16_t *)&dmaBuffer[i * 8];
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	4413      	add	r3, r2
 80006c6:	613b      	str	r3, [r7, #16]
        sampleBuffer[i] = *samplePointer;
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	4413      	add	r3, r2
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006d6:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < num_samples; ++i)
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	3301      	adds	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d3eb      	bcc.n	80006be <ExtractSamplesFromDMABuffer+0x12>
    }
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	371c      	adds	r7, #28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <CopySampleBuffer>:

static void CopySampleBuffer(int16_t *dst, int16_t *src, uint32_t num_samples)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < num_samples; i++)
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	e011      	b.n	800072a <CopySampleBuffer+0x36>
          the process_sample() function is defined in ece5210.c

          the default is for a straight passthrough, but you can
          modify it to do some signal processing
        */
        dst[i] = process_sample(src[i]);
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	4413      	add	r3, r2
 800070e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	18d4      	adds	r4, r2, r3
 800071a:	4608      	mov	r0, r1
 800071c:	f7ff fde2 	bl	80002e4 <process_sample>
 8000720:	4603      	mov	r3, r0
 8000722:	8023      	strh	r3, [r4, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	3301      	adds	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	697a      	ldr	r2, [r7, #20]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	429a      	cmp	r2, r3
 8000730:	d3e9      	bcc.n	8000706 <CopySampleBuffer+0x12>
    }
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	371c      	adds	r7, #28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd90      	pop	{r4, r7, pc}

0800073c <My_SAI_ClockConfig>:

///////////////////////////////////////////////////////////

static void My_SAI_ClockConfig(uint32_t AudioFreq)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0a6      	sub	sp, #152	; 0x98
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

    HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	4618      	mov	r0, r3
 800074a:	f004 fd19 	bl	8005180 <HAL_RCCEx_GetPeriphCLKConfig>

    /* Set the PLL configuration according to the audio frequency */
    if ((AudioFreq == AUDIO_FREQUENCY_11K) ||
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000754:	4293      	cmp	r3, r2
 8000756:	d009      	beq.n	800076c <My_SAI_ClockConfig+0x30>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f245 6222 	movw	r2, #22050	; 0x5622
 800075e:	4293      	cmp	r3, r2
 8000760:	d004      	beq.n	800076c <My_SAI_ClockConfig+0x30>
        (AudioFreq == AUDIO_FREQUENCY_22K) ||
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000768:	4293      	cmp	r3, r2
 800076a:	d112      	bne.n	8000792 <My_SAI_ClockConfig+0x56>
        /* Configure PLLSAI prescalers */
        /* PLLSAI_VCO: VCO_429M
           SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
           SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz
         */
        rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800076c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000770:	60bb      	str	r3, [r7, #8]
        rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8000772:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8000778:	f240 13ad 	movw	r3, #429	; 0x1ad
 800077c:	60fb      	str	r3, [r7, #12]
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	617b      	str	r3, [r7, #20]
        rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8000782:	2313      	movs	r3, #19
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c

        HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	4618      	mov	r0, r3
 800078c:	f003 fc38 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 8000790:	e012      	b.n	80007b8 <My_SAI_ClockConfig+0x7c>
        /* SAI clock config
           PLLSAI_VCO: VCO_344M
           SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
           SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 49.142/1 = 49.142 Mhz
         */
        rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000792:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000796:	60bb      	str	r3, [r7, #8]
        rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8000798:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800079c:	647b      	str	r3, [r7, #68]	; 0x44
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800079e:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80007a2:	60fb      	str	r3, [r7, #12]
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80007a4:	2307      	movs	r3, #7
 80007a6:	617b      	str	r3, [r7, #20]
        rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c

        HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 fc25 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
    }
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	3798      	adds	r7, #152	; 0x98
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <My_AUDIO_OUT_MspInit>:

static void My_AUDIO_OUT_MspInit(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
    static DMA_HandleTypeDef hdma_sai_tx;
    GPIO_InitTypeDef gpio_init_structure;

    /* Enable SAI clock */
    AUDIO_OUT_SAIx_CLK_ENABLE();
 80007c6:	4b46      	ldr	r3, [pc, #280]	; (80008e0 <My_AUDIO_OUT_MspInit+0x120>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	4a45      	ldr	r2, [pc, #276]	; (80008e0 <My_AUDIO_OUT_MspInit+0x120>)
 80007cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007d0:	6453      	str	r3, [r2, #68]	; 0x44
 80007d2:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <My_AUDIO_OUT_MspInit+0x120>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    /* Enable GPIO clock */
    AUDIO_OUT_SAIx_MCLK_ENABLE();
 80007de:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <My_AUDIO_OUT_MspInit+0x120>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a3f      	ldr	r2, [pc, #252]	; (80008e0 <My_AUDIO_OUT_MspInit+0x120>)
 80007e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b3d      	ldr	r3, [pc, #244]	; (80008e0 <My_AUDIO_OUT_MspInit+0x120>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 80007f6:	4b3a      	ldr	r3, [pc, #232]	; (80008e0 <My_AUDIO_OUT_MspInit+0x120>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a39      	ldr	r2, [pc, #228]	; (80008e0 <My_AUDIO_OUT_MspInit+0x120>)
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <My_AUDIO_OUT_MspInit+0x120>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins
     * ------------------*/
    gpio_init_structure.Pin =
 800080e:	2370      	movs	r3, #112	; 0x70
 8000810:	617b      	str	r3, [r7, #20]
        AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 800081e:	2306      	movs	r3, #6
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	482e      	ldr	r0, [pc, #184]	; (80008e4 <My_AUDIO_OUT_MspInit+0x124>)
 800082a:	f002 f9c1 	bl	8002bb0 <HAL_GPIO_Init>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	482b      	ldr	r0, [pc, #172]	; (80008e8 <My_AUDIO_OUT_MspInit+0x128>)
 800083a:	f002 f9b9 	bl	8002bb0 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <My_AUDIO_OUT_MspInit+0x120>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a27      	ldr	r2, [pc, #156]	; (80008e0 <My_AUDIO_OUT_MspInit+0x120>)
 8000844:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <My_AUDIO_OUT_MspInit+0x120>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Channel = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8000856:	4b25      	ldr	r3, [pc, #148]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 800085e:	2240      	movs	r2, #64	; 0x40
 8000860:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000862:	4b22      	ldr	r3, [pc, #136]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000868:	4b20      	ldr	r3, [pc, #128]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 800086a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800086e:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 8000872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000876:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 800087a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800087e:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode = DMA_CIRCULAR;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 8000882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000886:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 800088a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800088e:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 8000892:	2204      	movs	r2, #4
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 8000898:	2203      	movs	r2, #3
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <My_AUDIO_OUT_MspInit+0x130>)
 80008ac:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_out_sai, hdmatx, hdma_sai_tx);
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <My_AUDIO_OUT_MspInit+0x134>)
 80008b0:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 80008b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <My_AUDIO_OUT_MspInit+0x134>)
 80008b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 80008bc:	f001 fe5e 	bl	800257c <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
 80008c0:	480a      	ldr	r0, [pc, #40]	; (80008ec <My_AUDIO_OUT_MspInit+0x12c>)
 80008c2:	f001 fdad 	bl	8002420 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	210e      	movs	r1, #14
 80008ca:	2039      	movs	r0, #57	; 0x39
 80008cc:	f001 fd47 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80008d0:	2039      	movs	r0, #57	; 0x39
 80008d2:	f001 fd60 	bl	8002396 <HAL_NVIC_EnableIRQ>
}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40021800 	.word	0x40021800
 80008ec:	20005194 	.word	0x20005194
 80008f0:	40026428 	.word	0x40026428
 80008f4:	2000510c 	.word	0x2000510c

080008f8 <My_SAI_Out_Init>:

static void My_SAI_Out_Init(uint32_t AudioFreq)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&haudio_out_sai);
 8000900:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b2f      	ldr	r3, [pc, #188]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800090e:	601a      	str	r2, [r3, #0]

    /* Configure SAI_Block_x
       LSBFirst: Disabled
       DataSize: 16 */
    haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8000910:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
    haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8000916:	4a2b      	ldr	r2, [pc, #172]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	61d3      	str	r3, [r2, #28]
    haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 800091c:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
    haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8000922:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
    haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8000928:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 800092a:	2200      	movs	r2, #0
 800092c:	631a      	str	r2, [r3, #48]	; 0x30
    haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800092e:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	635a      	str	r2, [r3, #52]	; 0x34
    haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000936:	2200      	movs	r2, #0
 8000938:	639a      	str	r2, [r3, #56]	; 0x38
    haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800093a:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 800093c:	2200      	movs	r2, #0
 800093e:	63da      	str	r2, [r3, #60]	; 0x3c
    haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8000940:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
    haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000948:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800094c:	611a      	str	r2, [r3, #16]
    haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000950:	2201      	movs	r2, #1
 8000952:	619a      	str	r2, [r3, #24]
    haudio_out_sai.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
    haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 800095c:	2200      	movs	r2, #0
 800095e:	629a      	str	r2, [r3, #40]	; 0x28
    haudio_out_sai.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000962:	2200      	movs	r2, #0
 8000964:	62da      	str	r2, [r3, #44]	; 0x2c
    haudio_out_sai.Init.Mckdiv = 0;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
       Frame Length: 64
       Frame active Length: 32
       FS Definition: Start frame + Channel Side identification
       FS Polarity: FS active Low
       FS Offset: FS asserted one bit before the first bit of slot 0 */
    haudio_out_sai.FrameInit.FrameLength = 64;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 800096e:	2240      	movs	r2, #64	; 0x40
 8000970:	641a      	str	r2, [r3, #64]	; 0x40
    haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000974:	2220      	movs	r2, #32
 8000976:	645a      	str	r2, [r3, #68]	; 0x44
    haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 800097a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800097e:	649a      	str	r2, [r3, #72]	; 0x48
    haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000982:	2200      	movs	r2, #0
 8000984:	64da      	str	r2, [r3, #76]	; 0x4c
    haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000988:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800098c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Configure SAI Block_x Slot
       Slot First Bit Offset: 0
       Slot Size  : 16
       Slot Number: 4
       Slot Active: All slot actives */
    haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000990:	2200      	movs	r2, #0
 8000992:	655a      	str	r2, [r3, #84]	; 0x54
    haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 8000996:	2200      	movs	r2, #0
 8000998:	659a      	str	r2, [r3, #88]	; 0x58
    haudio_out_sai.SlotInit.SlotNumber = 4;
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 800099c:	2204      	movs	r2, #4
 800099e:	65da      	str	r2, [r3, #92]	; 0x5c
    haudio_out_sai.SlotInit.SlotActive = 0xF;
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 80009a2:	220f      	movs	r2, #15
 80009a4:	661a      	str	r2, [r3, #96]	; 0x60

    HAL_SAI_Init(&haudio_out_sai);
 80009a6:	4807      	ldr	r0, [pc, #28]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 80009a8:	f004 fef0 	bl	800578c <HAL_SAI_Init>

    /* Enable SAI peripheral to generate MCLK */
    __HAL_SAI_ENABLE(&haudio_out_sai);
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <My_SAI_Out_Init+0xcc>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000510c 	.word	0x2000510c

080009c8 <My_AUDIO_IN_MspInit>:

static void My_AUDIO_IN_MspInit(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
    static DMA_HandleTypeDef hdma_sai_rx;
    GPIO_InitTypeDef gpio_init_structure;

    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 80009ce:	4b3c      	ldr	r3, [pc, #240]	; (8000ac0 <My_AUDIO_IN_MspInit+0xf8>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a3b      	ldr	r2, [pc, #236]	; (8000ac0 <My_AUDIO_IN_MspInit+0xf8>)
 80009d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <My_AUDIO_IN_MspInit+0xf8>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 80009e6:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <My_AUDIO_IN_MspInit+0xf8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a35      	ldr	r2, [pc, #212]	; (8000ac0 <My_AUDIO_IN_MspInit+0xf8>)
 80009ec:	f043 0310 	orr.w	r3, r3, #16
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b33      	ldr	r3, [pc, #204]	; (8000ac0 <My_AUDIO_IN_MspInit+0xf8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0310 	and.w	r3, r3, #16
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80009fe:	2308      	movs	r3, #8
 8000a00:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8000a0e:	2306      	movs	r3, #6
 8000a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	482a      	ldr	r0, [pc, #168]	; (8000ac4 <My_AUDIO_IN_MspInit+0xfc>)
 8000a1a:	f002 f8c9 	bl	8002bb0 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8000a1e:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <My_AUDIO_IN_MspInit+0xf8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a27      	ldr	r2, [pc, #156]	; (8000ac0 <My_AUDIO_IN_MspInit+0xf8>)
 8000a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <My_AUDIO_IN_MspInit+0xf8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8000a36:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a3c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3e:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a44:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a50:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a58:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a60:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode = DMA_CIRCULAR;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a68:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a70:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a8c:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <My_AUDIO_IN_MspInit+0x104>)
 8000a8e:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_in_sai, hdmarx, hdma_sai_rx);
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <My_AUDIO_IN_MspInit+0x108>)
 8000a92:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a94:	671a      	str	r2, [r3, #112]	; 0x70
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <My_AUDIO_IN_MspInit+0x108>)
 8000a9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8000a9c:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000a9e:	f001 fd6d 	bl	800257c <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <My_AUDIO_IN_MspInit+0x100>)
 8000aa4:	f001 fcbc 	bl	8002420 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	210f      	movs	r1, #15
 8000aac:	203c      	movs	r0, #60	; 0x3c
 8000aae:	f001 fc56 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8000ab2:	203c      	movs	r0, #60	; 0x3c
 8000ab4:	f001 fc6f 	bl	8002396 <HAL_NVIC_EnableIRQ>
}
 8000ab8:	bf00      	nop
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	200051f4 	.word	0x200051f4
 8000acc:	40026470 	.word	0x40026470
 8000ad0:	20005088 	.word	0x20005088

08000ad4 <My_SAI_In_Init>:

static void My_SAI_In_Init(uint32_t AudioFreq)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
    /* Initialize SAI1 block B in SLAVE RX synchronous from SAI1 block A */
    /* Initialize the haudio_in_sai Instance parameter */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8000adc:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000ade:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <My_SAI_In_Init+0xd4>)
 8000ae0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&haudio_in_sai);
 8000ae2:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000af0:	601a      	str	r2, [r3, #0]

    /* Configure SAI_Block_x */
    haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24
    haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8000af8:	4a2a      	ldr	r2, [pc, #168]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	61d3      	str	r3, [r2, #28]
    haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b00:	2203      	movs	r2, #3
 8000b02:	605a      	str	r2, [r3, #4]
    haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b04:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
    haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	631a      	str	r2, [r3, #48]	; 0x30
    haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	635a      	str	r2, [r3, #52]	; 0x34
    haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	639a      	str	r2, [r3, #56]	; 0x38
    haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	63da      	str	r2, [r3, #60]	; 0x3c
    haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	609a      	str	r2, [r3, #8]
    haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
    haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	619a      	str	r2, [r3, #24]
    haudio_in_sai.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
    haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
    haudio_in_sai.Init.TriState = SAI_OUTPUT_RELEASED;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b42:	2210      	movs	r2, #16
 8000b44:	62da      	str	r2, [r3, #44]	; 0x2c
    haudio_in_sai.Init.Mckdiv = 0;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]

    /* Configure SAI_Block_x Frame */
    haudio_in_sai.FrameInit.FrameLength = 64;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b4e:	2240      	movs	r2, #64	; 0x40
 8000b50:	641a      	str	r2, [r3, #64]	; 0x40
    haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b54:	2220      	movs	r2, #32
 8000b56:	645a      	str	r2, [r3, #68]	; 0x44
    haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b5e:	649a      	str	r2, [r3, #72]	; 0x48
    haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	64da      	str	r2, [r3, #76]	; 0x4c
    haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Configure SAI Block_x Slot */
    haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	655a      	str	r2, [r3, #84]	; 0x54
    haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	659a      	str	r2, [r3, #88]	; 0x58
    haudio_in_sai.SlotInit.SlotNumber = 4;
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	65da      	str	r2, [r3, #92]	; 0x5c
    haudio_in_sai.SlotInit.SlotActive = 0xF;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b82:	220f      	movs	r2, #15
 8000b84:	661a      	str	r2, [r3, #96]	; 0x60

    HAL_SAI_Init(&haudio_in_sai);
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b88:	f004 fe00 	bl	800578c <HAL_SAI_Init>

    /* Enable SAI peripheral */
    __HAL_SAI_ENABLE(&haudio_in_sai);
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <My_SAI_In_Init+0xd0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20005088 	.word	0x20005088
 8000ba8:	40015824 	.word	0x40015824

08000bac <BSP_AUDIO_IN_TransferComplete_CallBack>:

void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
    audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	601a      	str	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	20005190 	.word	0x20005190

08000bc4 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
    audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	20005190 	.word	0x20005190

08000bdc <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
    /* Manage the remaining file size and new address offset: This function
       should be coded by user (its prototype is already declared in
       stm32769i_discovery_audio.h) */
    BSP_AUDIO_IN_HalfTransfer_CallBack();
 8000be4:	f7ff ffee 	bl	8000bc4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    /* Call the record update function to get the next buffer to fill and its
     * size (size is ignored) */
    BSP_AUDIO_IN_TransferComplete_CallBack();
 8000bf8:	f7ff ffd8 	bl	8000bac <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <DMA2_Stream4_IRQHandler+0x14>)
 8000c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fd61 	bl	80026d4 <HAL_DMA_IRQHandler>
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20005088 	.word	0x20005088

08000c1c <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <DMA2_Stream1_IRQHandler+0x14>)
 8000c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 fd55 	bl	80026d4 <HAL_DMA_IRQHandler>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000510c 	.word	0x2000510c

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f001 fb85 	bl	8002348 <HAL_NVIC_SetPriorityGrouping>

    /* System interrupt init*/
    /* MemoryManagement_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	f06f 000b 	mvn.w	r0, #11
 8000c46:	f001 fb8a 	bl	800235e <HAL_NVIC_SetPriority>
    /* BusFault_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	f06f 000a 	mvn.w	r0, #10
 8000c52:	f001 fb84 	bl	800235e <HAL_NVIC_SetPriority>
    /* UsageFault_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f06f 0009 	mvn.w	r0, #9
 8000c5e:	f001 fb7e 	bl	800235e <HAL_NVIC_SetPriority>
    /* SVCall_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	f06f 0004 	mvn.w	r0, #4
 8000c6a:	f001 fb78 	bl	800235e <HAL_NVIC_SetPriority>
    /* DebugMonitor_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	f06f 0003 	mvn.w	r0, #3
 8000c76:	f001 fb72 	bl	800235e <HAL_NVIC_SetPriority>
    /* PendSV_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	f06f 0001 	mvn.w	r0, #1
 8000c82:	f001 fb6c 	bl	800235e <HAL_NVIC_SetPriority>
    /* SysTick_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c8e:	f001 fb66 	bl	800235e <HAL_NVIC_SetPriority>

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8000c9a:	f001 fa57 	bl	800214c <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8000c9e:	f001 fbb1 	bl	8002404 <HAL_SYSTICK_IRQHandler>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <SystemInit>:
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |=
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <SystemInit+0x5c>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <SystemInit+0x5c>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
#endif
    /* Reset the RCC clock configuration to the default reset state
     * ------------*/
    /* Set HSION bit */
    RCC->CR |= (uint32_t)0x00000001;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <SystemInit+0x60>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <SystemInit+0x60>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6013      	str	r3, [r2, #0]

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <SystemInit+0x60>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]

    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <SystemInit+0x60>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	490d      	ldr	r1, [pc, #52]	; (8000d08 <SystemInit+0x60>)
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <SystemInit+0x64>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	600b      	str	r3, [r1, #0]

    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x24003010;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <SystemInit+0x60>)
 8000cdc:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <SystemInit+0x68>)
 8000cde:	605a      	str	r2, [r3, #4]

    /* Reset HSEBYP bit */
    RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <SystemInit+0x60>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <SystemInit+0x60>)
 8000ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cea:	6013      	str	r3, [r2, #0]

    /* Disable all interrupts */
    RCC->CIR = 0x00000000;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <SystemInit+0x60>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
     * ------------------*/
#ifdef VECT_TAB_SRAM
    SCB->VTOR = RAMDTCM_BASE |
                VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
    SCB->VTOR = FLASH_BASE |
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <SystemInit+0x5c>)
 8000cf4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cf8:	609a      	str	r2, [r3, #8]
                VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	fef6ffff 	.word	0xfef6ffff
 8000d10:	24003010 	.word	0x24003010

08000d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d1a:	490e      	ldr	r1, [pc, #56]	; (8000d54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d30:	4c0b      	ldr	r4, [pc, #44]	; (8000d60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d3e:	f7ff ffb3 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d42:	f005 f903 	bl	8005f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d46:	f7ff faf3 	bl	8000330 <main>
  bx  lr    
 8000d4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d4c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d58:	08007e88 	.word	0x08007e88
  ldr r2, =_sbss
 8000d5c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d60:	200053e4 	.word	0x200053e4

08000d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>
	...

08000d68 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	4603      	mov	r3, r0
 8000d72:	81fb      	strh	r3, [r7, #14]
 8000d74:	460b      	mov	r3, r1
 8000d76:	81bb      	strh	r3, [r7, #12]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000d80:	89bb      	ldrh	r3, [r7, #12]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000d86:	89bb      	ldrh	r3, [r7, #12]
 8000d88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d8c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8000d92:	f001 f973 	bl	800207c <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000d96:	89fb      	ldrh	r3, [r7, #14]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 ffb7 	bl	8001d14 <CODEC_IO_Write>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	4413      	add	r3, r2
 8000dae:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8000db0:	89fb      	ldrh	r3, [r7, #14]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	f640 0117 	movw	r1, #2071	; 0x817
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 ffaa 	bl	8001d14 <CODEC_IO_Write>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8000dca:	89fb      	ldrh	r3, [r7, #14]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 ff9d 	bl	8001d14 <CODEC_IO_Write>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	4413      	add	r3, r2
 8000de2:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8000de4:	89fb      	ldrh	r3, [r7, #14]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	226c      	movs	r2, #108	; 0x6c
 8000dea:	2139      	movs	r1, #57	; 0x39
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 ff91 	bl	8001d14 <CODEC_IO_Write>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	4413      	add	r3, r2
 8000dfa:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8000dfc:	8afb      	ldrh	r3, [r7, #22]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00c      	beq.n	8000e1c <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8000e02:	89fb      	ldrh	r3, [r7, #14]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2213      	movs	r2, #19
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 ff82 	bl	8001d14 <CODEC_IO_Write>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	4413      	add	r3, r2
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	e00b      	b.n	8000e34 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2203      	movs	r2, #3
 8000e22:	2101      	movs	r1, #1
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 ff75 	bl	8001d14 <CODEC_IO_Write>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	4413      	add	r3, r2
 8000e32:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8000e34:	2032      	movs	r0, #50	; 0x32
 8000e36:	f001 f955 	bl	80020e4 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8000e3a:	8b3b      	ldrh	r3, [r7, #24]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 815f 	beq.w	8001100 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8000e42:	4bae      	ldr	r3, [pc, #696]	; (80010fc <wm8994_Init+0x394>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8000e48:	8b3b      	ldrh	r3, [r7, #24]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	f000 808c 	beq.w	8000f68 <wm8994_Init+0x200>
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	f300 8111 	bgt.w	8001078 <wm8994_Init+0x310>
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d002      	beq.n	8000e60 <wm8994_Init+0xf8>
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d042      	beq.n	8000ee4 <wm8994_Init+0x17c>
 8000e5e:	e10b      	b.n	8001078 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	f640 420c 	movw	r2, #3084	; 0xc0c
 8000e68:	2105      	movs	r1, #5
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 ff52 	bl	8001d14 <CODEC_IO_Write>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	4413      	add	r3, r2
 8000e78:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f240 6101 	movw	r1, #1537	; 0x601
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 ff45 	bl	8001d14 <CODEC_IO_Write>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	4413      	add	r3, r2
 8000e92:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000e94:	89fb      	ldrh	r3, [r7, #14]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f240 6102 	movw	r1, #1538	; 0x602
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 ff38 	bl	8001d14 <CODEC_IO_Write>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	4413      	add	r3, r2
 8000eac:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	f240 6104 	movw	r1, #1540	; 0x604
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 ff2b 	bl	8001d14 <CODEC_IO_Write>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2202      	movs	r2, #2
 8000ece:	f240 6105 	movw	r1, #1541	; 0x605
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 ff1e 	bl	8001d14 <CODEC_IO_Write>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	4413      	add	r3, r2
 8000ee0:	61fb      	str	r3, [r7, #28]
      break;
 8000ee2:	e110      	b.n	8001106 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000ee4:	89fb      	ldrh	r3, [r7, #14]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	f240 3203 	movw	r2, #771	; 0x303
 8000eec:	2105      	movs	r1, #5
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 ff10 	bl	8001d14 <CODEC_IO_Write>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	4413      	add	r3, r2
 8000efc:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2201      	movs	r2, #1
 8000f04:	f240 6101 	movw	r1, #1537	; 0x601
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 ff03 	bl	8001d14 <CODEC_IO_Write>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	4413      	add	r3, r2
 8000f16:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000f18:	89fb      	ldrh	r3, [r7, #14]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f240 6102 	movw	r1, #1538	; 0x602
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fef6 	bl	8001d14 <CODEC_IO_Write>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	4413      	add	r3, r2
 8000f30:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000f32:	89fb      	ldrh	r3, [r7, #14]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2200      	movs	r2, #0
 8000f38:	f240 6104 	movw	r1, #1540	; 0x604
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fee9 	bl	8001d14 <CODEC_IO_Write>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	4413      	add	r3, r2
 8000f4a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000f4c:	89fb      	ldrh	r3, [r7, #14]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2200      	movs	r2, #0
 8000f52:	f240 6105 	movw	r1, #1541	; 0x605
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fedc 	bl	8001d14 <CODEC_IO_Write>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	4413      	add	r3, r2
 8000f64:	61fb      	str	r3, [r7, #28]
      break;
 8000f66:	e0ce      	b.n	8001106 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000f68:	8afb      	ldrh	r3, [r7, #22]
 8000f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f6e:	d141      	bne.n	8000ff4 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000f78:	2105      	movs	r1, #5
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 feca 	bl	8001d14 <CODEC_IO_Write>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	4413      	add	r3, r2
 8000f88:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2203      	movs	r2, #3
 8000f90:	f240 6101 	movw	r1, #1537	; 0x601
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 febd 	bl	8001d14 <CODEC_IO_Write>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2203      	movs	r2, #3
 8000faa:	f240 6102 	movw	r1, #1538	; 0x602
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 feb0 	bl	8001d14 <CODEC_IO_Write>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	4413      	add	r3, r2
 8000fbc:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	f240 6104 	movw	r1, #1540	; 0x604
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fea3 	bl	8001d14 <CODEC_IO_Write>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8000fd8:	89fb      	ldrh	r3, [r7, #14]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2203      	movs	r2, #3
 8000fde:	f240 6105 	movw	r1, #1541	; 0x605
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fe96 	bl	8001d14 <CODEC_IO_Write>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	4413      	add	r3, r2
 8000ff0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8000ff2:	e088      	b.n	8001106 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000ffc:	2105      	movs	r1, #5
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fe88 	bl	8001d14 <CODEC_IO_Write>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	4413      	add	r3, r2
 800100c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800100e:	89fb      	ldrh	r3, [r7, #14]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2201      	movs	r2, #1
 8001014:	f240 6101 	movw	r1, #1537	; 0x601
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fe7b 	bl	8001d14 <CODEC_IO_Write>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	4413      	add	r3, r2
 8001026:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2201      	movs	r2, #1
 800102e:	f240 6102 	movw	r1, #1538	; 0x602
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fe6e 	bl	8001d14 <CODEC_IO_Write>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	4413      	add	r3, r2
 8001040:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001042:	89fb      	ldrh	r3, [r7, #14]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2202      	movs	r2, #2
 8001048:	f240 6104 	movw	r1, #1540	; 0x604
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fe61 	bl	8001d14 <CODEC_IO_Write>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	4413      	add	r3, r2
 800105a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 800105c:	89fb      	ldrh	r3, [r7, #14]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2202      	movs	r2, #2
 8001062:	f240 6105 	movw	r1, #1541	; 0x605
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fe54 	bl	8001d14 <CODEC_IO_Write>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	4413      	add	r3, r2
 8001074:	61fb      	str	r3, [r7, #28]
      break;
 8001076:	e046      	b.n	8001106 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001078:	89fb      	ldrh	r3, [r7, #14]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f240 3203 	movw	r2, #771	; 0x303
 8001080:	2105      	movs	r1, #5
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fe46 	bl	8001d14 <CODEC_IO_Write>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	4413      	add	r3, r2
 8001090:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001092:	89fb      	ldrh	r3, [r7, #14]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2201      	movs	r2, #1
 8001098:	f240 6101 	movw	r1, #1537	; 0x601
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fe39 	bl	8001d14 <CODEC_IO_Write>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	4413      	add	r3, r2
 80010aa:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80010ac:	89fb      	ldrh	r3, [r7, #14]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2201      	movs	r2, #1
 80010b2:	f240 6102 	movw	r1, #1538	; 0x602
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fe2c 	bl	8001d14 <CODEC_IO_Write>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	4413      	add	r3, r2
 80010c4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80010c6:	89fb      	ldrh	r3, [r7, #14]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2200      	movs	r2, #0
 80010cc:	f240 6104 	movw	r1, #1540	; 0x604
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fe1f 	bl	8001d14 <CODEC_IO_Write>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	4413      	add	r3, r2
 80010de:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80010e0:	89fb      	ldrh	r3, [r7, #14]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2200      	movs	r2, #0
 80010e6:	f240 6105 	movw	r1, #1541	; 0x605
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 fe12 	bl	8001d14 <CODEC_IO_Write>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	4413      	add	r3, r2
 80010f8:	61fb      	str	r3, [r7, #28]
      break;
 80010fa:	e004      	b.n	8001106 <wm8994_Init+0x39e>
 80010fc:	20005254 	.word	0x20005254
    }
  }
  else
  {
    outputEnabled = 0;
 8001100:	4b99      	ldr	r3, [pc, #612]	; (8001368 <wm8994_Init+0x600>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8001106:	8afb      	ldrh	r3, [r7, #22]
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 81ab 	beq.w	8001464 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800110e:	4b97      	ldr	r3, [pc, #604]	; (800136c <wm8994_Init+0x604>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8001114:	8afb      	ldrh	r3, [r7, #22]
 8001116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800111a:	f000 8129 	beq.w	8001370 <wm8994_Init+0x608>
 800111e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001122:	f300 819b 	bgt.w	800145c <wm8994_Init+0x6f4>
 8001126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800112a:	d05a      	beq.n	80011e2 <wm8994_Init+0x47a>
 800112c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001130:	f300 8194 	bgt.w	800145c <wm8994_Init+0x6f4>
 8001134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001138:	f000 80c6 	beq.w	80012c8 <wm8994_Init+0x560>
 800113c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001140:	f040 818c 	bne.w	800145c <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8001144:	89fb      	ldrh	r3, [r7, #14]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 800114c:	2104      	movs	r1, #4
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fde0 	bl	8001d14 <CODEC_IO_Write>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	4413      	add	r3, r2
 800115c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800115e:	89fb      	ldrh	r3, [r7, #14]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	22db      	movs	r2, #219	; 0xdb
 8001164:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001168:	4618      	mov	r0, r3
 800116a:	f000 fdd3 	bl	8001d14 <CODEC_IO_Write>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	4413      	add	r3, r2
 8001176:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8001178:	89fb      	ldrh	r3, [r7, #14]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001180:	2102      	movs	r1, #2
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fdc6 	bl	8001d14 <CODEC_IO_Write>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	4413      	add	r3, r2
 8001190:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2202      	movs	r2, #2
 8001198:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fdb9 	bl	8001d14 <CODEC_IO_Write>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	4413      	add	r3, r2
 80011aa:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80011ac:	89fb      	ldrh	r3, [r7, #14]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2202      	movs	r2, #2
 80011b2:	f240 6109 	movw	r1, #1545	; 0x609
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fdac 	bl	8001d14 <CODEC_IO_Write>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	4413      	add	r3, r2
 80011c4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	220e      	movs	r2, #14
 80011cc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 fd9f 	bl	8001d14 <CODEC_IO_Write>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	4413      	add	r3, r2
 80011de:	61fb      	str	r3, [r7, #28]
      break;
 80011e0:	e143      	b.n	800146a <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80011e2:	89fb      	ldrh	r3, [r7, #14]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2211      	movs	r2, #17
 80011e8:	2128      	movs	r1, #40	; 0x28
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fd92 	bl	8001d14 <CODEC_IO_Write>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	4413      	add	r3, r2
 80011f8:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      //counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);

      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2220      	movs	r2, #32
 8001200:	2129      	movs	r1, #41	; 0x29
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fd86 	bl	8001d14 <CODEC_IO_Write>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	4413      	add	r3, r2
 8001210:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);

      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2220      	movs	r2, #32
 8001218:	212a      	movs	r1, #42	; 0x2a
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fd7a 	bl	8001d14 <CODEC_IO_Write>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	4413      	add	r3, r2
 8001228:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800122a:	89fb      	ldrh	r3, [r7, #14]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f240 3203 	movw	r2, #771	; 0x303
 8001232:	2104      	movs	r1, #4
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fd6d 	bl	8001d14 <CODEC_IO_Write>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	4413      	add	r3, r2
 8001242:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	22db      	movs	r2, #219	; 0xdb
 800124a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fd60 	bl	8001d14 <CODEC_IO_Write>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	4413      	add	r3, r2
 800125c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800125e:	89fb      	ldrh	r3, [r7, #14]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f246 3250 	movw	r2, #25424	; 0x6350
 8001266:	2102      	movs	r1, #2
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fd53 	bl	8001d14 <CODEC_IO_Write>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	4413      	add	r3, r2
 8001276:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001278:	89fb      	ldrh	r3, [r7, #14]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2202      	movs	r2, #2
 800127e:	f240 6106 	movw	r1, #1542	; 0x606
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fd46 	bl	8001d14 <CODEC_IO_Write>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	4413      	add	r3, r2
 8001290:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001292:	89fb      	ldrh	r3, [r7, #14]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2202      	movs	r2, #2
 8001298:	f240 6107 	movw	r1, #1543	; 0x607
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fd39 	bl	8001d14 <CODEC_IO_Write>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	4413      	add	r3, r2
 80012aa:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80012ac:	89fb      	ldrh	r3, [r7, #14]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	220d      	movs	r2, #13
 80012b2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fd2c 	bl	8001d14 <CODEC_IO_Write>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	4413      	add	r3, r2
 80012c4:	61fb      	str	r3, [r7, #28]
      break;
 80012c6:	e0d0      	b.n	800146a <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80012c8:	89fb      	ldrh	r3, [r7, #14]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80012d0:	2104      	movs	r1, #4
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fd1e 	bl	8001d14 <CODEC_IO_Write>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	4413      	add	r3, r2
 80012e0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80012e2:	89fb      	ldrh	r3, [r7, #14]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	22db      	movs	r2, #219	; 0xdb
 80012e8:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fd11 	bl	8001d14 <CODEC_IO_Write>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	4413      	add	r3, r2
 80012fa:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80012fc:	89fb      	ldrh	r3, [r7, #14]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f246 3250 	movw	r2, #25424	; 0x6350
 8001304:	2102      	movs	r1, #2
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fd04 	bl	8001d14 <CODEC_IO_Write>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	4413      	add	r3, r2
 8001314:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2202      	movs	r2, #2
 800131c:	f240 6106 	movw	r1, #1542	; 0x606
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fcf7 	bl	8001d14 <CODEC_IO_Write>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	4413      	add	r3, r2
 800132e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001330:	89fb      	ldrh	r3, [r7, #14]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2202      	movs	r2, #2
 8001336:	f240 6107 	movw	r1, #1543	; 0x607
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fcea 	bl	8001d14 <CODEC_IO_Write>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	4413      	add	r3, r2
 8001348:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	220d      	movs	r2, #13
 8001350:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fcdd 	bl	8001d14 <CODEC_IO_Write>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	4413      	add	r3, r2
 8001362:	61fb      	str	r3, [r7, #28]
      break; 
 8001364:	e081      	b.n	800146a <wm8994_Init+0x702>
 8001366:	bf00      	nop
 8001368:	20005254 	.word	0x20005254
 800136c:	20005258 	.word	0x20005258
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f640 723c 	movw	r2, #3900	; 0xf3c
 8001378:	2104      	movs	r1, #4
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fcca 	bl	8001d14 <CODEC_IO_Write>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	4413      	add	r3, r2
 8001388:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	22db      	movs	r2, #219	; 0xdb
 8001390:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fcbd 	bl	8001d14 <CODEC_IO_Write>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	4413      	add	r3, r2
 80013a2:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80013a4:	89fb      	ldrh	r3, [r7, #14]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	22db      	movs	r2, #219	; 0xdb
 80013aa:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fcb0 	bl	8001d14 <CODEC_IO_Write>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	4413      	add	r3, r2
 80013bc:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80013be:	89fb      	ldrh	r3, [r7, #14]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80013c6:	2102      	movs	r1, #2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fca3 	bl	8001d14 <CODEC_IO_Write>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	4413      	add	r3, r2
 80013d6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2202      	movs	r2, #2
 80013de:	f240 6106 	movw	r1, #1542	; 0x606
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fc96 	bl	8001d14 <CODEC_IO_Write>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	4413      	add	r3, r2
 80013f0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2202      	movs	r2, #2
 80013f8:	f240 6107 	movw	r1, #1543	; 0x607
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fc89 	bl	8001d14 <CODEC_IO_Write>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	4413      	add	r3, r2
 800140a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800140c:	89fb      	ldrh	r3, [r7, #14]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2202      	movs	r2, #2
 8001412:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fc7c 	bl	8001d14 <CODEC_IO_Write>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	4413      	add	r3, r2
 8001424:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8001426:	89fb      	ldrh	r3, [r7, #14]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2202      	movs	r2, #2
 800142c:	f240 6109 	movw	r1, #1545	; 0x609
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fc6f 	bl	8001d14 <CODEC_IO_Write>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	4413      	add	r3, r2
 800143e:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001440:	89fb      	ldrh	r3, [r7, #14]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	220d      	movs	r2, #13
 8001446:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fc62 	bl	8001d14 <CODEC_IO_Write>
 8001450:	4603      	mov	r3, r0
 8001452:	461a      	mov	r2, r3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	4413      	add	r3, r2
 8001458:	61fb      	str	r3, [r7, #28]
      break;    
 800145a:	e006      	b.n	800146a <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	3301      	adds	r3, #1
 8001460:	61fb      	str	r3, [r7, #28]
      break;
 8001462:	e002      	b.n	800146a <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8001464:	4bb1      	ldr	r3, [pc, #708]	; (800172c <wm8994_Init+0x9c4>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4ab0      	ldr	r2, [pc, #704]	; (8001730 <wm8994_Init+0x9c8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d079      	beq.n	8001566 <wm8994_Init+0x7fe>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4aae      	ldr	r2, [pc, #696]	; (8001730 <wm8994_Init+0x9c8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	f200 80ad 	bhi.w	80015d6 <wm8994_Init+0x86e>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001482:	4293      	cmp	r3, r2
 8001484:	d061      	beq.n	800154a <wm8994_Init+0x7e2>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800148c:	4293      	cmp	r3, r2
 800148e:	f200 80a2 	bhi.w	80015d6 <wm8994_Init+0x86e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001498:	4293      	cmp	r3, r2
 800149a:	f000 808e 	beq.w	80015ba <wm8994_Init+0x852>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80014a4:	4293      	cmp	r3, r2
 80014a6:	f200 8096 	bhi.w	80015d6 <wm8994_Init+0x86e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80014b0:	d03d      	beq.n	800152e <wm8994_Init+0x7c6>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80014b8:	f200 808d 	bhi.w	80015d6 <wm8994_Init+0x86e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f245 6222 	movw	r2, #22050	; 0x5622
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d06b      	beq.n	800159e <wm8994_Init+0x836>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f245 6222 	movw	r2, #22050	; 0x5622
 80014cc:	4293      	cmp	r3, r2
 80014ce:	f200 8082 	bhi.w	80015d6 <wm8994_Init+0x86e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80014d8:	d01b      	beq.n	8001512 <wm8994_Init+0x7aa>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80014e0:	d879      	bhi.n	80015d6 <wm8994_Init+0x86e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80014e8:	d005      	beq.n	80014f6 <wm8994_Init+0x78e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f642 3211 	movw	r2, #11025	; 0x2b11
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d046      	beq.n	8001582 <wm8994_Init+0x81a>
 80014f4:	e06f      	b.n	80015d6 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80014f6:	89fb      	ldrh	r3, [r7, #14]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2203      	movs	r2, #3
 80014fc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fc07 	bl	8001d14 <CODEC_IO_Write>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	4413      	add	r3, r2
 800150e:	61fb      	str	r3, [r7, #28]
    break;
 8001510:	e06f      	b.n	80015f2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2233      	movs	r2, #51	; 0x33
 8001518:	f44f 7104 	mov.w	r1, #528	; 0x210
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fbf9 	bl	8001d14 <CODEC_IO_Write>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4413      	add	r3, r2
 800152a:	61fb      	str	r3, [r7, #28]
    break;
 800152c:	e061      	b.n	80015f2 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2263      	movs	r2, #99	; 0x63
 8001534:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001538:	4618      	mov	r0, r3
 800153a:	f000 fbeb 	bl	8001d14 <CODEC_IO_Write>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	61fb      	str	r3, [r7, #28]
    break;
 8001548:	e053      	b.n	80015f2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800154a:	89fb      	ldrh	r3, [r7, #14]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2283      	movs	r2, #131	; 0x83
 8001550:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fbdd 	bl	8001d14 <CODEC_IO_Write>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	4413      	add	r3, r2
 8001562:	61fb      	str	r3, [r7, #28]
    break;
 8001564:	e045      	b.n	80015f2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	22a3      	movs	r2, #163	; 0xa3
 800156c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fbcf 	bl	8001d14 <CODEC_IO_Write>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	4413      	add	r3, r2
 800157e:	61fb      	str	r3, [r7, #28]
    break;
 8001580:	e037      	b.n	80015f2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8001582:	89fb      	ldrh	r3, [r7, #14]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2213      	movs	r2, #19
 8001588:	f44f 7104 	mov.w	r1, #528	; 0x210
 800158c:	4618      	mov	r0, r3
 800158e:	f000 fbc1 	bl	8001d14 <CODEC_IO_Write>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	4413      	add	r3, r2
 800159a:	61fb      	str	r3, [r7, #28]
    break;
 800159c:	e029      	b.n	80015f2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2243      	movs	r2, #67	; 0x43
 80015a4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 fbb3 	bl	8001d14 <CODEC_IO_Write>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	61fb      	str	r3, [r7, #28]
    break;
 80015b8:	e01b      	b.n	80015f2 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2273      	movs	r2, #115	; 0x73
 80015c0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fba5 	bl	8001d14 <CODEC_IO_Write>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	4413      	add	r3, r2
 80015d2:	61fb      	str	r3, [r7, #28]
    break; 
 80015d4:	e00d      	b.n	80015f2 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80015d6:	89fb      	ldrh	r3, [r7, #14]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2283      	movs	r2, #131	; 0x83
 80015dc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fb97 	bl	8001d14 <CODEC_IO_Write>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	4413      	add	r3, r2
 80015ee:	61fb      	str	r3, [r7, #28]
    break; 
 80015f0:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80015f2:	8afb      	ldrh	r3, [r7, #22]
 80015f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015f8:	d10e      	bne.n	8001618 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80015fa:	89fb      	ldrh	r3, [r7, #14]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	f244 0218 	movw	r2, #16408	; 0x4018
 8001602:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fb84 	bl	8001d14 <CODEC_IO_Write>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	4413      	add	r3, r2
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	e00d      	b.n	8001634 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8001618:	89fb      	ldrh	r3, [r7, #14]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f244 0210 	movw	r2, #16400	; 0x4010
 8001620:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fb75 	bl	8001d14 <CODEC_IO_Write>
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	4413      	add	r3, r2
 8001632:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8001634:	89fb      	ldrh	r3, [r7, #14]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2200      	movs	r2, #0
 800163a:	f240 3102 	movw	r1, #770	; 0x302
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fb68 	bl	8001d14 <CODEC_IO_Write>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	4413      	add	r3, r2
 800164c:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800164e:	89fb      	ldrh	r3, [r7, #14]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	220a      	movs	r2, #10
 8001654:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001658:	4618      	mov	r0, r3
 800165a:	f000 fb5b 	bl	8001d14 <CODEC_IO_Write>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8001668:	89fb      	ldrh	r3, [r7, #14]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fb4e 	bl	8001d14 <CODEC_IO_Write>
 8001678:	4603      	mov	r3, r0
 800167a:	461a      	mov	r2, r3
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	4413      	add	r3, r2
 8001680:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8001682:	8b3b      	ldrh	r3, [r7, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8123 	beq.w	80018d0 <wm8994_Init+0xb68>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 800168a:	89fb      	ldrh	r3, [r7, #14]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001692:	2103      	movs	r1, #3
 8001694:	4618      	mov	r0, r3
 8001696:	f000 fb3d 	bl	8001d14 <CODEC_IO_Write>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	4413      	add	r3, r2
 80016a2:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2200      	movs	r2, #0
 80016aa:	2122      	movs	r1, #34	; 0x22
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fb31 	bl	8001d14 <CODEC_IO_Write>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	4413      	add	r3, r2
 80016ba:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2200      	movs	r2, #0
 80016c2:	2123      	movs	r1, #35	; 0x23
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 fb25 	bl	8001d14 <CODEC_IO_Write>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	4413      	add	r3, r2
 80016d2:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80016d4:	89fb      	ldrh	r3, [r7, #14]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016dc:	2136      	movs	r1, #54	; 0x36
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 fb18 	bl	8001d14 <CODEC_IO_Write>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	4413      	add	r3, r2
 80016ec:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80016ee:	89fb      	ldrh	r3, [r7, #14]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f243 0203 	movw	r2, #12291	; 0x3003
 80016f6:	2101      	movs	r1, #1
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fb0b 	bl	8001d14 <CODEC_IO_Write>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001708:	8afb      	ldrh	r3, [r7, #22]
 800170a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800170e:	d111      	bne.n	8001734 <wm8994_Init+0x9cc>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8001710:	89fb      	ldrh	r3, [r7, #14]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f240 2205 	movw	r2, #517	; 0x205
 8001718:	2151      	movs	r1, #81	; 0x51
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fafa 	bl	8001d14 <CODEC_IO_Write>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	4413      	add	r3, r2
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	e00f      	b.n	800174c <wm8994_Init+0x9e4>
 800172c:	20005258 	.word	0x20005258
 8001730:	00017700 	.word	0x00017700
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2205      	movs	r2, #5
 800173a:	2151      	movs	r1, #81	; 0x51
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fae9 	bl	8001d14 <CODEC_IO_Write>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	4413      	add	r3, r2
 800174a:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800174c:	8b7b      	ldrh	r3, [r7, #26]
 800174e:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8001752:	f043 0303 	orr.w	r3, r3, #3
 8001756:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001758:	89fb      	ldrh	r3, [r7, #14]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	8b7a      	ldrh	r2, [r7, #26]
 800175e:	2101      	movs	r1, #1
 8001760:	4618      	mov	r0, r3
 8001762:	f000 fad7 	bl	8001d14 <CODEC_IO_Write>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	4413      	add	r3, r2
 800176e:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8001770:	89fb      	ldrh	r3, [r7, #14]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2222      	movs	r2, #34	; 0x22
 8001776:	2160      	movs	r1, #96	; 0x60
 8001778:	4618      	mov	r0, r3
 800177a:	f000 facb 	bl	8001d14 <CODEC_IO_Write>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	4413      	add	r3, r2
 8001786:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8001788:	89fb      	ldrh	r3, [r7, #14]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f649 7225 	movw	r2, #40741	; 0x9f25
 8001790:	214c      	movs	r1, #76	; 0x4c
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fabe 	bl	8001d14 <CODEC_IO_Write>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80017a2:	200f      	movs	r0, #15
 80017a4:	f000 fc9e 	bl	80020e4 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80017a8:	89fb      	ldrh	r3, [r7, #14]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2201      	movs	r2, #1
 80017ae:	212d      	movs	r1, #45	; 0x2d
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 faaf 	bl	8001d14 <CODEC_IO_Write>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461a      	mov	r2, r3
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	4413      	add	r3, r2
 80017be:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80017c0:	89fb      	ldrh	r3, [r7, #14]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2201      	movs	r2, #1
 80017c6:	212e      	movs	r1, #46	; 0x2e
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 faa3 	bl	8001d14 <CODEC_IO_Write>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	4413      	add	r3, r2
 80017d6:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80017d8:	89fb      	ldrh	r3, [r7, #14]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f44f 724c 	mov.w	r2, #816	; 0x330
 80017e0:	2103      	movs	r1, #3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fa96 	bl	8001d14 <CODEC_IO_Write>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	4413      	add	r3, r2
 80017f0:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 80017f2:	89fb      	ldrh	r3, [r7, #14]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2233      	movs	r2, #51	; 0x33
 80017f8:	2154      	movs	r1, #84	; 0x54
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fa8a 	bl	8001d14 <CODEC_IO_Write>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	4413      	add	r3, r2
 8001808:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(250);
 800180a:	20fa      	movs	r0, #250	; 0xfa
 800180c:	f000 fc6a 	bl	80020e4 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8001810:	89fb      	ldrh	r3, [r7, #14]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	22ee      	movs	r2, #238	; 0xee
 8001816:	2160      	movs	r1, #96	; 0x60
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fa7b 	bl	8001d14 <CODEC_IO_Write>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4413      	add	r3, r2
 8001826:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8001828:	89fb      	ldrh	r3, [r7, #14]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	22c0      	movs	r2, #192	; 0xc0
 800182e:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fa6e 	bl	8001d14 <CODEC_IO_Write>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	4413      	add	r3, r2
 8001840:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8001842:	89fb      	ldrh	r3, [r7, #14]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	22c0      	movs	r2, #192	; 0xc0
 8001848:	f240 6111 	movw	r1, #1553	; 0x611
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fa61 	bl	8001d14 <CODEC_IO_Write>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fa54 	bl	8001d14 <CODEC_IO_Write>
 800186c:	4603      	mov	r3, r0
 800186e:	461a      	mov	r2, r3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	4413      	add	r3, r2
 8001874:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8001876:	89fb      	ldrh	r3, [r7, #14]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	22c0      	movs	r2, #192	; 0xc0
 800187c:	f240 6112 	movw	r1, #1554	; 0x612
 8001880:	4618      	mov	r0, r3
 8001882:	f000 fa47 	bl	8001d14 <CODEC_IO_Write>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	4413      	add	r3, r2
 800188e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8001890:	89fb      	ldrh	r3, [r7, #14]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	22c0      	movs	r2, #192	; 0xc0
 8001896:	f240 6113 	movw	r1, #1555	; 0x613
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fa3a 	bl	8001d14 <CODEC_IO_Write>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	4413      	add	r3, r2
 80018a8:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 80018aa:	89fb      	ldrh	r3, [r7, #14]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2200      	movs	r2, #0
 80018b0:	f240 4122 	movw	r1, #1058	; 0x422
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 fa2d 	bl	8001d14 <CODEC_IO_Write>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	4413      	add	r3, r2
 80018c2:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80018c4:	7afa      	ldrb	r2, [r7, #11]
 80018c6:	89fb      	ldrh	r3, [r7, #14]
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f8b0 	bl	8001a30 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80018d0:	8afb      	ldrh	r3, [r7, #22]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80a6 	beq.w	8001a24 <wm8994_Init+0xcbc>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80018d8:	8afb      	ldrh	r3, [r7, #22]
 80018da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018de:	d003      	beq.n	80018e8 <wm8994_Init+0xb80>
 80018e0:	8afb      	ldrh	r3, [r7, #22]
 80018e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e6:	d12b      	bne.n	8001940 <wm8994_Init+0xbd8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80018e8:	8b7b      	ldrh	r3, [r7, #26]
 80018ea:	f043 0313 	orr.w	r3, r3, #19
 80018ee:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80018f0:	89fb      	ldrh	r3, [r7, #14]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	8b7a      	ldrh	r2, [r7, #26]
 80018f6:	2101      	movs	r1, #1
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fa0b 	bl	8001d14 <CODEC_IO_Write>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4413      	add	r3, r2
 8001906:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001908:	89fb      	ldrh	r3, [r7, #14]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2202      	movs	r2, #2
 800190e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f9fe 	bl	8001d14 <CODEC_IO_Write>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	4413      	add	r3, r2
 8001920:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8001922:	89fb      	ldrh	r3, [r7, #14]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800192a:	f240 4111 	movw	r1, #1041	; 0x411
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f9f0 	bl	8001d14 <CODEC_IO_Write>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	4413      	add	r3, r2
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	e06b      	b.n	8001a18 <wm8994_Init+0xcb0>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001940:	8afb      	ldrh	r3, [r7, #22]
 8001942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001946:	d139      	bne.n	80019bc <wm8994_Init+0xc54>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001948:	8b7b      	ldrh	r3, [r7, #26]
 800194a:	f043 0313 	orr.w	r3, r3, #19
 800194e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001950:	89fb      	ldrh	r3, [r7, #14]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	8b7a      	ldrh	r2, [r7, #26]
 8001956:	2101      	movs	r1, #1
 8001958:	4618      	mov	r0, r3
 800195a:	f000 f9db 	bl	8001d14 <CODEC_IO_Write>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001968:	89fb      	ldrh	r3, [r7, #14]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2202      	movs	r2, #2
 800196e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f9ce 	bl	8001d14 <CODEC_IO_Write>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	4413      	add	r3, r2
 8001980:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001982:	89fb      	ldrh	r3, [r7, #14]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800198a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f9c0 	bl	8001d14 <CODEC_IO_Write>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	4413      	add	r3, r2
 800199c:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800199e:	89fb      	ldrh	r3, [r7, #14]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80019a6:	f240 4111 	movw	r1, #1041	; 0x411
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f9b2 	bl	8001d14 <CODEC_IO_Write>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	4413      	add	r3, r2
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	e02d      	b.n	8001a18 <wm8994_Init+0xcb0>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80019bc:	8afb      	ldrh	r3, [r7, #22]
 80019be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019c2:	d003      	beq.n	80019cc <wm8994_Init+0xc64>
 80019c4:	8afb      	ldrh	r3, [r7, #22]
 80019c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ca:	d125      	bne.n	8001a18 <wm8994_Init+0xcb0>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80019cc:	89fb      	ldrh	r3, [r7, #14]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	220b      	movs	r2, #11
 80019d2:	2118      	movs	r1, #24
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 f99d 	bl	8001d14 <CODEC_IO_Write>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	4413      	add	r3, r2
 80019e2:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 80019e4:	89fb      	ldrh	r3, [r7, #14]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	220b      	movs	r2, #11
 80019ea:	211a      	movs	r1, #26
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f991 	bl	8001d14 <CODEC_IO_Write>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	4413      	add	r3, r2
 80019fa:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80019fc:	89fb      	ldrh	r3, [r7, #14]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001a04:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f983 	bl	8001d14 <CODEC_IO_Write>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	4413      	add	r3, r2
 8001a16:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001a18:	7afa      	ldrb	r2, [r7, #11]
 8001a1a:	89fb      	ldrh	r3, [r7, #14]
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f806 	bl	8001a30 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8001a24:	69fb      	ldr	r3, [r7, #28]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3720      	adds	r7, #32
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop

08001a30 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	460a      	mov	r2, r1
 8001a3a:	80fb      	strh	r3, [r7, #6]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001a44:	797b      	ldrb	r3, [r7, #5]
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d80b      	bhi.n	8001a62 <wm8994_SetVolume+0x32>
 8001a4a:	797a      	ldrb	r2, [r7, #5]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	019b      	lsls	r3, r3, #6
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	4a86      	ldr	r2, [pc, #536]	; (8001c6c <wm8994_SetVolume+0x23c>)
 8001a54:	fb82 1203 	smull	r1, r2, r2, r3
 8001a58:	1152      	asrs	r2, r2, #5
 8001a5a:	17db      	asrs	r3, r3, #31
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	e000      	b.n	8001a64 <wm8994_SetVolume+0x34>
 8001a62:	2364      	movs	r3, #100	; 0x64
 8001a64:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8001a66:	4b82      	ldr	r3, [pc, #520]	; (8001c70 <wm8994_SetVolume+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 809b 	beq.w	8001ba6 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8001a70:	7afb      	ldrb	r3, [r7, #11]
 8001a72:	2b3e      	cmp	r3, #62	; 0x3e
 8001a74:	d93d      	bls.n	8001af2 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f8fc 	bl	8001c78 <wm8994_SetMute>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4413      	add	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f240 127f 	movw	r2, #383	; 0x17f
 8001a90:	211c      	movs	r1, #28
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f93e 	bl	8001d14 <CODEC_IO_Write>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f240 127f 	movw	r2, #383	; 0x17f
 8001aaa:	211d      	movs	r1, #29
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 f931 	bl	8001d14 <CODEC_IO_Write>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4413      	add	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f240 127f 	movw	r2, #383	; 0x17f
 8001ac4:	2126      	movs	r1, #38	; 0x26
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f924 	bl	8001d14 <CODEC_IO_Write>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f240 127f 	movw	r2, #383	; 0x17f
 8001ade:	2127      	movs	r1, #39	; 0x27
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 f917 	bl	8001d14 <CODEC_IO_Write>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4413      	add	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e059      	b.n	8001ba6 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8001af2:	797b      	ldrb	r3, [r7, #5]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	2101      	movs	r1, #1
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 f8bb 	bl	8001c78 <wm8994_SetMute>
 8001b02:	4602      	mov	r2, r0
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e04c      	b.n	8001ba6 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 f8b1 	bl	8001c78 <wm8994_SetMute>
 8001b16:	4602      	mov	r2, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	b2d8      	uxtb	r0, r3
 8001b22:	7afb      	ldrb	r3, [r7, #11]
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	211c      	movs	r1, #28
 8001b32:	f000 f8ef 	bl	8001d14 <CODEC_IO_Write>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	b2d8      	uxtb	r0, r3
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	211d      	movs	r1, #29
 8001b54:	f000 f8de 	bl	8001d14 <CODEC_IO_Write>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	b2d8      	uxtb	r0, r3
 8001b66:	7afb      	ldrb	r3, [r7, #11]
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	2126      	movs	r1, #38	; 0x26
 8001b76:	f000 f8cd 	bl	8001d14 <CODEC_IO_Write>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4413      	add	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	b2d8      	uxtb	r0, r3
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	2127      	movs	r1, #39	; 0x27
 8001b98:	f000 f8bc 	bl	8001d14 <CODEC_IO_Write>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8001ba6:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <wm8994_SetVolume+0x244>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d059      	beq.n	8001c62 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8001bae:	797b      	ldrb	r3, [r7, #5]
 8001bb0:	2b63      	cmp	r3, #99	; 0x63
 8001bb2:	d80c      	bhi.n	8001bce <wm8994_SetVolume+0x19e>
 8001bb4:	797a      	ldrb	r2, [r7, #5]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	4a2b      	ldr	r2, [pc, #172]	; (8001c6c <wm8994_SetVolume+0x23c>)
 8001bc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001bc4:	1152      	asrs	r2, r2, #5
 8001bc6:	17db      	asrs	r3, r3, #31
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	e000      	b.n	8001bd0 <wm8994_SetVolume+0x1a0>
 8001bce:	23ef      	movs	r3, #239	; 0xef
 8001bd0:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	b2d8      	uxtb	r0, r3
 8001bd6:	7afb      	ldrb	r3, [r7, #11]
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001be8:	f000 f894 	bl	8001d14 <CODEC_IO_Write>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	b2d8      	uxtb	r0, r3
 8001bfa:	7afb      	ldrb	r3, [r7, #11]
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	f240 4101 	movw	r1, #1025	; 0x401
 8001c0c:	f000 f882 	bl	8001d14 <CODEC_IO_Write>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	b2d8      	uxtb	r0, r3
 8001c1e:	7afb      	ldrb	r3, [r7, #11]
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f240 4104 	movw	r1, #1028	; 0x404
 8001c30:	f000 f870 	bl	8001d14 <CODEC_IO_Write>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	b2d8      	uxtb	r0, r3
 8001c42:	7afb      	ldrb	r3, [r7, #11]
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f240 4105 	movw	r1, #1029	; 0x405
 8001c54:	f000 f85e 	bl	8001d14 <CODEC_IO_Write>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	51eb851f 	.word	0x51eb851f
 8001c70:	20005254 	.word	0x20005254
 8001c74:	20005258 	.word	0x20005258

08001c78 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <wm8994_SetMute+0x98>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d039      	beq.n	8001d04 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d11c      	bne.n	8001cd0 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f836 	bl	8001d14 <CODEC_IO_Write>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cba:	f240 4122 	movw	r1, #1058	; 0x422
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f828 	bl	8001d14 <CODEC_IO_Write>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	e019      	b.n	8001d04 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f81a 	bl	8001d14 <CODEC_IO_Write>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f240 4122 	movw	r1, #1058	; 0x422
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 f80d 	bl	8001d14 <CODEC_IO_Write>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8001d04:	68fb      	ldr	r3, [r7, #12]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20005254 	.word	0x20005254

08001d14 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	80bb      	strh	r3, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	88b9      	ldrh	r1, [r7, #4]
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 f9ad 	bl	8002090 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	b2db      	uxtb	r3, r3
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <BSP_LED_Init+0x54>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a11      	ldr	r2, [pc, #68]	; (8001d98 <BSP_LED_Init+0x54>)
 8001d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <BSP_LED_Init+0x54>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <BSP_LED_Init+0x58>)
 8001d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8001d74:	2301      	movs	r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <BSP_LED_Init+0x5c>)
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	f107 020c 	add.w	r2, r7, #12
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 ff10 	bl	8002bb0 <HAL_GPIO_Init>

}
 8001d90:	bf00      	nop
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	2000000c 	.word	0x2000000c
 8001da0:	20000014 	.word	0x20000014

08001da4 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <BSP_LED_On+0x2c>)
 8001db2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	4a06      	ldr	r2, [pc, #24]	; (8001dd4 <BSP_LED_On+0x30>)
 8001dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f001 f8a0 	bl	8002f08 <HAL_GPIO_WritePin>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000014 	.word	0x20000014
 8001dd4:	2000000c 	.word	0x2000000c

08001dd8 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <BSP_LED_Off+0x2c>)
 8001de6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <BSP_LED_Off+0x30>)
 8001dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	2200      	movs	r2, #0
 8001df6:	4619      	mov	r1, r3
 8001df8:	f001 f886 	bl	8002f08 <HAL_GPIO_WritePin>
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000014 	.word	0x20000014
 8001e08:	2000000c 	.word	0x2000000c

08001e0c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	; 0x30
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <I2Cx_MspInit+0x16c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d15b      	bne.n	8001ed4 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8001e1c:	4b57      	ldr	r3, [pc, #348]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	4a56      	ldr	r2, [pc, #344]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	6313      	str	r3, [r2, #48]	; 0x30
 8001e28:	4b54      	ldr	r3, [pc, #336]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8001e34:	4b51      	ldr	r3, [pc, #324]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	4a50      	ldr	r2, [pc, #320]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001e3a:	f043 0302 	orr.w	r3, r3, #2
 8001e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e40:	4b4e      	ldr	r3, [pc, #312]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e50:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001e52:	2312      	movs	r3, #18
 8001e54:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	4845      	ldr	r0, [pc, #276]	; (8001f80 <I2Cx_MspInit+0x174>)
 8001e6a:	f000 fea1 	bl	8002bb0 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8001e72:	230b      	movs	r3, #11
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4841      	ldr	r0, [pc, #260]	; (8001f84 <I2Cx_MspInit+0x178>)
 8001e7e:	f000 fe97 	bl	8002bb0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001e82:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a3d      	ldr	r2, [pc, #244]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001e9a:	4b38      	ldr	r3, [pc, #224]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a37      	ldr	r2, [pc, #220]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001ea0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea4:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001ea6:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4a34      	ldr	r2, [pc, #208]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	210f      	movs	r1, #15
 8001eb6:	205f      	movs	r0, #95	; 0x5f
 8001eb8:	f000 fa51 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001ebc:	205f      	movs	r0, #95	; 0x5f
 8001ebe:	f000 fa6a 	bl	8002396 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	210f      	movs	r1, #15
 8001ec6:	2060      	movs	r0, #96	; 0x60
 8001ec8:	f000 fa49 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8001ecc:	2060      	movs	r0, #96	; 0x60
 8001ece:	f000 fa62 	bl	8002396 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001ed2:	e04d      	b.n	8001f70 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001ed4:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001eda:	f043 0302 	orr.w	r3, r3, #2
 8001ede:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee0:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001ef2:	2312      	movs	r3, #18
 8001ef4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001efa:	2302      	movs	r3, #2
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001efe:	2304      	movs	r3, #4
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	4619      	mov	r1, r3
 8001f08:	481e      	ldr	r0, [pc, #120]	; (8001f84 <I2Cx_MspInit+0x178>)
 8001f0a:	f000 fe51 	bl	8002bb0 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	481a      	ldr	r0, [pc, #104]	; (8001f84 <I2Cx_MspInit+0x178>)
 8001f1c:	f000 fe48 	bl	8002bb0 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001f26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001f38:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4a0f      	ldr	r2, [pc, #60]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001f3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f42:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001f44:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a0c      	ldr	r2, [pc, #48]	; (8001f7c <I2Cx_MspInit+0x170>)
 8001f4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f4e:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	210f      	movs	r1, #15
 8001f54:	201f      	movs	r0, #31
 8001f56:	f000 fa02 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001f5a:	201f      	movs	r0, #31
 8001f5c:	f000 fa1b 	bl	8002396 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	210f      	movs	r1, #15
 8001f64:	2020      	movs	r0, #32
 8001f66:	f000 f9fa 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001f6a:	2020      	movs	r0, #32
 8001f6c:	f000 fa13 	bl	8002396 <HAL_NVIC_EnableIRQ>
}
 8001f70:	bf00      	nop
 8001f72:	3730      	adds	r7, #48	; 0x30
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000525c 	.word	0x2000525c
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020c00 	.word	0x40020c00
 8001f84:	40020400 	.word	0x40020400

08001f88 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f001 f9cd 	bl	8003330 <HAL_I2C_GetState>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d125      	bne.n	8001fe8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <I2Cx_Init+0x68>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d103      	bne.n	8001fac <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <I2Cx_Init+0x6c>)
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e002      	b.n	8001fb2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <I2Cx_Init+0x70>)
 8001fb0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a11      	ldr	r2, [pc, #68]	; (8001ffc <I2Cx_Init+0x74>)
 8001fb6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff15 	bl	8001e0c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 ffaa 	bl	8002f3c <HAL_I2C_Init>
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	2000525c 	.word	0x2000525c
 8001ff4:	40006000 	.word	0x40006000
 8001ff8:	40005400 	.word	0x40005400
 8001ffc:	40912732 	.word	0x40912732

08002000 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af04      	add	r7, sp, #16
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	4608      	mov	r0, r1
 800200a:	4611      	mov	r1, r2
 800200c:	461a      	mov	r2, r3
 800200e:	4603      	mov	r3, r0
 8002010:	72fb      	strb	r3, [r7, #11]
 8002012:	460b      	mov	r3, r1
 8002014:	813b      	strh	r3, [r7, #8]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800201e:	7afb      	ldrb	r3, [r7, #11]
 8002020:	b299      	uxth	r1, r3
 8002022:	88f8      	ldrh	r0, [r7, #6]
 8002024:	893a      	ldrh	r2, [r7, #8]
 8002026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202a:	9302      	str	r3, [sp, #8]
 800202c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	4603      	mov	r3, r0
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f001 f854 	bl	80030e4 <HAL_I2C_Mem_Write>
 800203c:	4603      	mov	r3, r0
 800203e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d004      	beq.n	8002050 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002046:	7afb      	ldrb	r3, [r7, #11]
 8002048:	4619      	mov	r1, r3
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f805 	bl	800205a <I2Cx_Error>
  }
  return status;
 8002050:	7dfb      	ldrb	r3, [r7, #23]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fff8 	bl	800305c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff8b 	bl	8001f88 <I2Cx_Init>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <AUDIO_IO_Init+0x10>)
 8002082:	f7ff ff81 	bl	8001f88 <I2Cx_Init>
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000525c 	.word	0x2000525c

08002090 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
 800209a:	460b      	mov	r3, r1
 800209c:	80bb      	strh	r3, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80020a6:	89fb      	ldrh	r3, [r7, #14]
 80020a8:	0a1b      	lsrs	r3, r3, #8
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80020ae:	89fb      	ldrh	r3, [r7, #14]
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	887b      	ldrh	r3, [r7, #2]
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b21b      	sxth	r3, r3
 80020be:	b29b      	uxth	r3, r3
 80020c0:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80020c2:	88ba      	ldrh	r2, [r7, #4]
 80020c4:	79f9      	ldrb	r1, [r7, #7]
 80020c6:	2302      	movs	r3, #2
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	1cbb      	adds	r3, r7, #2
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2302      	movs	r3, #2
 80020d0:	4803      	ldr	r0, [pc, #12]	; (80020e0 <AUDIO_IO_Write+0x50>)
 80020d2:	f7ff ff95 	bl	8002000 <I2Cx_WriteMultiple>
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000525c 	.word	0x2000525c

080020e4 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f847 	bl	8002180 <HAL_Delay>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	af00      	add	r7, sp, #0
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fe:	2003      	movs	r0, #3
 8002100:	f000 f922 	bl	8002348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002104:	2000      	movs	r0, #0
 8002106:	f000 f805 	bl	8002114 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800210a:	f7fe fd93 	bl	8000c34 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_InitTick+0x30>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a09      	ldr	r2, [pc, #36]	; (8002148 <HAL_InitTick+0x34>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	4618      	mov	r0, r3
 800212a:	f000 f942 	bl	80023b2 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800212e:	2200      	movs	r2, #0
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002136:	f000 f912 	bl	800235e <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000008 	.word	0x20000008
 8002148:	10624dd3 	.word	0x10624dd3

0800214c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  uwTick++;
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_IncTick+0x18>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	4a03      	ldr	r2, [pc, #12]	; (8002164 <HAL_IncTick+0x18>)
 8002158:	6013      	str	r3, [r2, #0]
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	200052a8 	.word	0x200052a8

08002168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_GetTick+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	200052a8 	.word	0x200052a8

08002180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 800218c:	f7ff ffec 	bl	8002168 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8002192:	bf00      	nop
 8002194:	f7ff ffe8 	bl	8002168 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad2      	subs	r2, r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d3f7      	bcc.n	8002194 <HAL_Delay+0x14>
  {
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <NVIC_SetPriorityGrouping+0x40>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <NVIC_SetPriorityGrouping+0x44>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021de:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <NVIC_SetPriorityGrouping+0x40>)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60d3      	str	r3, [r2, #12]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00
 80021f4:	05fa0000 	.word	0x05fa0000

080021f8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <NVIC_GetPriorityGrouping+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 0307 	and.w	r3, r3, #7
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	f003 021f 	and.w	r2, r3, #31
 8002224:	4907      	ldr	r1, [pc, #28]	; (8002244 <NVIC_EnableIRQ+0x30>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	2001      	movs	r0, #1
 800222e:	fa00 f202 	lsl.w	r2, r0, r2
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000e100 	.word	0xe000e100

08002248 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	2b00      	cmp	r3, #0
 800225a:	da0b      	bge.n	8002274 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	490c      	ldr	r1, [pc, #48]	; (8002294 <NVIC_SetPriority+0x4c>)
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	3b04      	subs	r3, #4
 800226a:	0112      	lsls	r2, r2, #4
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	440b      	add	r3, r1
 8002270:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002272:	e009      	b.n	8002288 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	4907      	ldr	r1, [pc, #28]	; (8002298 <NVIC_SetPriority+0x50>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000ed00 	.word	0xe000ed00
 8002298:	e000e100 	.word	0xe000e100

0800229c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	; 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f1c3 0307 	rsb	r3, r3, #7
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	bf28      	it	cs
 80022ba:	2304      	movcs	r3, #4
 80022bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d902      	bls.n	80022cc <NVIC_EncodePriority+0x30>
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3b03      	subs	r3, #3
 80022ca:	e000      	b.n	80022ce <NVIC_EncodePriority+0x32>
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	43d9      	mvns	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	4313      	orrs	r3, r2
         );
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002314:	d301      	bcc.n	800231a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002316:	2301      	movs	r3, #1
 8002318:	e00f      	b.n	800233a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <SysTick_Config+0x40>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002322:	210f      	movs	r1, #15
 8002324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002328:	f7ff ff8e 	bl	8002248 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <SysTick_Config+0x40>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <SysTick_Config+0x40>)
 8002334:	2207      	movs	r2, #7
 8002336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	e000e010 	.word	0xe000e010

08002348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff2d 	bl	80021b0 <NVIC_SetPriorityGrouping>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002370:	f7ff ff42 	bl	80021f8 <NVIC_GetPriorityGrouping>
 8002374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f7ff ff8e 	bl	800229c <NVIC_EncodePriority>
 8002380:	4602      	mov	r2, r0
 8002382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff5d 	bl	8002248 <NVIC_SetPriority>
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff35 	bl	8002214 <NVIC_EnableIRQ>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ffa2 	bl	8002304 <SysTick_Config>
 80023c0:	4603      	mov	r3, r0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d106      	bne.n	80023e8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a08      	ldr	r2, [pc, #32]	; (8002400 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80023e6:	e005      	b.n	80023f4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80023ee:	f023 0304 	bic.w	r3, r3, #4
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002408:	f000 f802 	bl	8002410 <HAL_SYSTICK_Callback>
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800242c:	f7ff fe9c 	bl	8002168 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e099      	b.n	8002570 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800245c:	e00f      	b.n	800247e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800245e:	f7ff fe83 	bl	8002168 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b05      	cmp	r3, #5
 800246a:	d908      	bls.n	800247e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2203      	movs	r2, #3
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e078      	b.n	8002570 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1e8      	bne.n	800245e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4b38      	ldr	r3, [pc, #224]	; (8002578 <HAL_DMA_Init+0x158>)
 8002498:	4013      	ands	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d107      	bne.n	80024e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	4313      	orrs	r3, r2
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f023 0307 	bic.w	r3, r3, #7
 80024fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	2b04      	cmp	r3, #4
 8002510:	d117      	bne.n	8002542 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4313      	orrs	r3, r2
 800251a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00e      	beq.n	8002542 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fac7 	bl	8002ab8 <DMA_CheckFifoParam>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2240      	movs	r2, #64	; 0x40
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800253e:	2301      	movs	r3, #1
 8002540:	e016      	b.n	8002570 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fa7e 	bl	8002a4c <DMA_CalcBaseAndBitshift>
 8002550:	4603      	mov	r3, r0
 8002552:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002558:	223f      	movs	r2, #63	; 0x3f
 800255a:	409a      	lsls	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	e010803f 	.word	0xe010803f

0800257c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e03e      	b.n	800260c <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d101      	bne.n	800259e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
 800259c:	e036      	b.n	800260c <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0201 	bic.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2200      	movs	r2, #0
 80025bc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2221      	movs	r2, #33	; 0x21
 80025dc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fa34 	bl	8002a4c <DMA_CalcBaseAndBitshift>
 80025e4:	4603      	mov	r3, r0
 80025e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	223f      	movs	r2, #63	; 0x3f
 80025ee:	409a      	lsls	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_DMA_Start_IT+0x26>
 8002636:	2302      	movs	r3, #2
 8002638:	e048      	b.n	80026cc <HAL_DMA_Start_IT+0xb8>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d137      	bne.n	80026be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2202      	movs	r2, #2
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f9c4 	bl	80029f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	223f      	movs	r2, #63	; 0x3f
 800266e:	409a      	lsls	r2, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0216 	orr.w	r2, r2, #22
 8002682:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002692:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0208 	orr.w	r2, r2, #8
 80026aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e005      	b.n	80026ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026c6:	2302      	movs	r3, #2
 80026c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80026e0:	4b8e      	ldr	r3, [pc, #568]	; (800291c <HAL_DMA_IRQHandler+0x248>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a8e      	ldr	r2, [pc, #568]	; (8002920 <HAL_DMA_IRQHandler+0x24c>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	2208      	movs	r2, #8
 8002700:	409a      	lsls	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01a      	beq.n	8002740 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	2208      	movs	r2, #8
 800272e:	409a      	lsls	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	4a77      	ldr	r2, [pc, #476]	; (8002924 <HAL_DMA_IRQHandler+0x250>)
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	4a70      	ldr	r2, [pc, #448]	; (8002924 <HAL_DMA_IRQHandler+0x250>)
 8002764:	409a      	lsls	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	4a6b      	ldr	r2, [pc, #428]	; (8002928 <HAL_DMA_IRQHandler+0x254>)
 800277c:	409a      	lsls	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d012      	beq.n	80027ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	4a63      	ldr	r2, [pc, #396]	; (8002928 <HAL_DMA_IRQHandler+0x254>)
 800279a:	409a      	lsls	r2, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2210      	movs	r2, #16
 80027b2:	409a      	lsls	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d043      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d03c      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2210      	movs	r2, #16
 80027d0:	409a      	lsls	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d018      	beq.n	8002816 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d108      	bne.n	8002804 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d024      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
 8002802:	e01f      	b.n	8002844 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01b      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
 8002814:	e016      	b.n	8002844 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0208 	bic.w	r2, r2, #8
 8002832:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	2220      	movs	r2, #32
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 8093 	beq.w	800297c <HAL_DMA_IRQHandler+0x2a8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 808b 	beq.w	800297c <HAL_DMA_IRQHandler+0x2a8>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2220      	movs	r2, #32
 800286c:	409a      	lsls	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b05      	cmp	r3, #5
 800287c:	d137      	bne.n	80028ee <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0216 	bic.w	r2, r2, #22
 800288c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800289c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <HAL_DMA_IRQHandler+0x1da>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0208 	bic.w	r2, r2, #8
 80028bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	223f      	movs	r2, #63	; 0x3f
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8082 	beq.w	80029e8 <HAL_DMA_IRQHandler+0x314>
        {
          hdma->XferAbortCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
        }
        return;
 80028ec:	e07c      	b.n	80029e8 <HAL_DMA_IRQHandler+0x314>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_DMA_IRQHandler+0x26a>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d110      	bne.n	800292c <HAL_DMA_IRQHandler+0x258>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	2b00      	cmp	r3, #0
 8002910:	d034      	beq.n	800297c <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	4798      	blx	r3
 800291a:	e02f      	b.n	800297c <HAL_DMA_IRQHandler+0x2a8>
 800291c:	20000008 	.word	0x20000008
 8002920:	1b4e81b5 	.word	0x1b4e81b5
 8002924:	00800001 	.word	0x00800001
 8002928:	00800004 	.word	0x00800004
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d023      	beq.n	800297c <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
 800293c:	e01e      	b.n	800297c <HAL_DMA_IRQHandler+0x2a8>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10f      	bne.n	800296c <HAL_DMA_IRQHandler+0x298>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0210 	bic.w	r2, r2, #16
 800295a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_DMA_IRQHandler+0x2a8>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	2b00      	cmp	r3, #0
 8002982:	d032      	beq.n	80029ea <HAL_DMA_IRQHandler+0x316>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d022      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x302>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2205      	movs	r2, #5
 8002994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	3301      	adds	r3, #1
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d307      	bcc.n	80029c4 <HAL_DMA_IRQHandler+0x2f0>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f2      	bne.n	80029a8 <HAL_DMA_IRQHandler+0x2d4>
 80029c2:	e000      	b.n	80029c6 <HAL_DMA_IRQHandler+0x2f2>
          break;
 80029c4:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_DMA_IRQHandler+0x316>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	4798      	blx	r3
 80029e6:	e000      	b.n	80029ea <HAL_DMA_IRQHandler+0x316>
        return;
 80029e8:	bf00      	nop
    }
  }
}
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b40      	cmp	r3, #64	; 0x40
 8002a1c:	d108      	bne.n	8002a30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a2e:	e007      	b.n	8002a40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	3b10      	subs	r3, #16
 8002a5c:	4a13      	ldr	r2, [pc, #76]	; (8002aac <DMA_CalcBaseAndBitshift+0x60>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a66:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d908      	bls.n	8002a8c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	1d1a      	adds	r2, r3, #4
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	659a      	str	r2, [r3, #88]	; 0x58
 8002a8a:	e006      	b.n	8002a9a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	aaaaaaab 	.word	0xaaaaaaab
 8002ab0:	080065bc 	.word	0x080065bc
 8002ab4:	fffffc00 	.word	0xfffffc00

08002ab8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d11f      	bne.n	8002b12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d856      	bhi.n	8002b86 <DMA_CheckFifoParam+0xce>
 8002ad8:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <DMA_CheckFifoParam+0x28>)
 8002ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ade:	bf00      	nop
 8002ae0:	08002af1 	.word	0x08002af1
 8002ae4:	08002b03 	.word	0x08002b03
 8002ae8:	08002af1 	.word	0x08002af1
 8002aec:	08002b87 	.word	0x08002b87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d046      	beq.n	8002b8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b00:	e043      	b.n	8002b8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b0a:	d140      	bne.n	8002b8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b10:	e03d      	b.n	8002b8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1a:	d121      	bne.n	8002b60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d837      	bhi.n	8002b92 <DMA_CheckFifoParam+0xda>
 8002b22:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <DMA_CheckFifoParam+0x70>)
 8002b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b28:	08002b39 	.word	0x08002b39
 8002b2c:	08002b3f 	.word	0x08002b3f
 8002b30:	08002b39 	.word	0x08002b39
 8002b34:	08002b51 	.word	0x08002b51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3c:	e030      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d025      	beq.n	8002b96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4e:	e022      	b.n	8002b96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b58:	d11f      	bne.n	8002b9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b5e:	e01c      	b.n	8002b9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d903      	bls.n	8002b6e <DMA_CheckFifoParam+0xb6>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d003      	beq.n	8002b74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b6c:	e018      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
      break;
 8002b72:	e015      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00e      	beq.n	8002b9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
      break;
 8002b84:	e00b      	b.n	8002b9e <DMA_CheckFifoParam+0xe6>
      break;
 8002b86:	bf00      	nop
 8002b88:	e00a      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8a:	bf00      	nop
 8002b8c:	e008      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8e:	bf00      	nop
 8002b90:	e006      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b92:	bf00      	nop
 8002b94:	e004      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b96:	bf00      	nop
 8002b98:	e002      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b9a:	bf00      	nop
 8002b9c:	e000      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9e:	bf00      	nop
    }
  } 
  
  return status; 
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop

08002bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	; 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	e175      	b.n	8002ebc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	f040 8164 	bne.w	8002eb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x4e>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b12      	cmp	r3, #18
 8002bfc:	d123      	bne.n	8002c46 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	08da      	lsrs	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3208      	adds	r2, #8
 8002c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	220f      	movs	r2, #15
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	08da      	lsrs	r2, r3, #3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3208      	adds	r2, #8
 8002c40:	69b9      	ldr	r1, [r7, #24]
 8002c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	2203      	movs	r2, #3
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0203 	and.w	r2, r3, #3
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d00b      	beq.n	8002c9a <HAL_GPIO_Init+0xea>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d007      	beq.n	8002c9a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c8e:	2b11      	cmp	r3, #17
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b12      	cmp	r3, #18
 8002c98:	d130      	bne.n	8002cfc <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 0201 	and.w	r2, r3, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80be 	beq.w	8002eb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3a:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <HAL_GPIO_Init+0x324>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	4a65      	ldr	r2, [pc, #404]	; (8002ed4 <HAL_GPIO_Init+0x324>)
 8002d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d44:	6453      	str	r3, [r2, #68]	; 0x44
 8002d46:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_GPIO_Init+0x324>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d52:	4a61      	ldr	r2, [pc, #388]	; (8002ed8 <HAL_GPIO_Init+0x328>)
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	3302      	adds	r3, #2
 8002d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	220f      	movs	r2, #15
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a58      	ldr	r2, [pc, #352]	; (8002edc <HAL_GPIO_Init+0x32c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d037      	beq.n	8002dee <HAL_GPIO_Init+0x23e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a57      	ldr	r2, [pc, #348]	; (8002ee0 <HAL_GPIO_Init+0x330>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d031      	beq.n	8002dea <HAL_GPIO_Init+0x23a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a56      	ldr	r2, [pc, #344]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d02b      	beq.n	8002de6 <HAL_GPIO_Init+0x236>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a55      	ldr	r2, [pc, #340]	; (8002ee8 <HAL_GPIO_Init+0x338>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d025      	beq.n	8002de2 <HAL_GPIO_Init+0x232>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a54      	ldr	r2, [pc, #336]	; (8002eec <HAL_GPIO_Init+0x33c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01f      	beq.n	8002dde <HAL_GPIO_Init+0x22e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a53      	ldr	r2, [pc, #332]	; (8002ef0 <HAL_GPIO_Init+0x340>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d019      	beq.n	8002dda <HAL_GPIO_Init+0x22a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a52      	ldr	r2, [pc, #328]	; (8002ef4 <HAL_GPIO_Init+0x344>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <HAL_GPIO_Init+0x226>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a51      	ldr	r2, [pc, #324]	; (8002ef8 <HAL_GPIO_Init+0x348>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00d      	beq.n	8002dd2 <HAL_GPIO_Init+0x222>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a50      	ldr	r2, [pc, #320]	; (8002efc <HAL_GPIO_Init+0x34c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d007      	beq.n	8002dce <HAL_GPIO_Init+0x21e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4f      	ldr	r2, [pc, #316]	; (8002f00 <HAL_GPIO_Init+0x350>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_GPIO_Init+0x21a>
 8002dc6:	2309      	movs	r3, #9
 8002dc8:	e012      	b.n	8002df0 <HAL_GPIO_Init+0x240>
 8002dca:	230a      	movs	r3, #10
 8002dcc:	e010      	b.n	8002df0 <HAL_GPIO_Init+0x240>
 8002dce:	2308      	movs	r3, #8
 8002dd0:	e00e      	b.n	8002df0 <HAL_GPIO_Init+0x240>
 8002dd2:	2307      	movs	r3, #7
 8002dd4:	e00c      	b.n	8002df0 <HAL_GPIO_Init+0x240>
 8002dd6:	2306      	movs	r3, #6
 8002dd8:	e00a      	b.n	8002df0 <HAL_GPIO_Init+0x240>
 8002dda:	2305      	movs	r3, #5
 8002ddc:	e008      	b.n	8002df0 <HAL_GPIO_Init+0x240>
 8002dde:	2304      	movs	r3, #4
 8002de0:	e006      	b.n	8002df0 <HAL_GPIO_Init+0x240>
 8002de2:	2303      	movs	r3, #3
 8002de4:	e004      	b.n	8002df0 <HAL_GPIO_Init+0x240>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e002      	b.n	8002df0 <HAL_GPIO_Init+0x240>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_GPIO_Init+0x240>
 8002dee:	2300      	movs	r3, #0
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	f002 0203 	and.w	r2, r2, #3
 8002df6:	0092      	lsls	r2, r2, #2
 8002df8:	4093      	lsls	r3, r2
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e00:	4935      	ldr	r1, [pc, #212]	; (8002ed8 <HAL_GPIO_Init+0x328>)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	3302      	adds	r3, #2
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <HAL_GPIO_Init+0x354>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e32:	4a34      	ldr	r2, [pc, #208]	; (8002f04 <HAL_GPIO_Init+0x354>)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e38:	4b32      	ldr	r3, [pc, #200]	; (8002f04 <HAL_GPIO_Init+0x354>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e5c:	4a29      	ldr	r2, [pc, #164]	; (8002f04 <HAL_GPIO_Init+0x354>)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e62:	4b28      	ldr	r3, [pc, #160]	; (8002f04 <HAL_GPIO_Init+0x354>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e86:	4a1f      	ldr	r2, [pc, #124]	; (8002f04 <HAL_GPIO_Init+0x354>)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <HAL_GPIO_Init+0x354>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb0:	4a14      	ldr	r2, [pc, #80]	; (8002f04 <HAL_GPIO_Init+0x354>)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	61fb      	str	r3, [r7, #28]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	2b0f      	cmp	r3, #15
 8002ec0:	f67f ae86 	bls.w	8002bd0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	3724      	adds	r7, #36	; 0x24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40013800 	.word	0x40013800
 8002edc:	40020000 	.word	0x40020000
 8002ee0:	40020400 	.word	0x40020400
 8002ee4:	40020800 	.word	0x40020800
 8002ee8:	40020c00 	.word	0x40020c00
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40021400 	.word	0x40021400
 8002ef4:	40021800 	.word	0x40021800
 8002ef8:	40021c00 	.word	0x40021c00
 8002efc:	40022000 	.word	0x40022000
 8002f00:	40022400 	.word	0x40022400
 8002f04:	40013c00 	.word	0x40013c00

08002f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
 8002f14:	4613      	mov	r3, r2
 8002f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f18:	787b      	ldrb	r3, [r7, #1]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f24:	e003      	b.n	8002f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f26:	887b      	ldrh	r3, [r7, #2]
 8002f28:	041a      	lsls	r2, r3, #16
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	619a      	str	r2, [r3, #24]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e07f      	b.n	800304e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f8a9 	bl	80030ba <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	; 0x24
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d107      	bne.n	8002fb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	e006      	b.n	8002fc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d104      	bne.n	8002fd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_I2C_Init+0x11c>)
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ff4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	ea42 0103 	orr.w	r1, r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	021a      	lsls	r2, r3, #8
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69d9      	ldr	r1, [r3, #28]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1a      	ldr	r2, [r3, #32]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	02008000 	.word	0x02008000

0800305c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e021      	b.n	80030b2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2224      	movs	r2, #36	; 0x24
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f821 	bl	80030ce <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	461a      	mov	r2, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	817b      	strh	r3, [r7, #10]
 80030f6:	460b      	mov	r3, r1
 80030f8:	813b      	strh	r3, [r7, #8]
 80030fa:	4613      	mov	r3, r2
 80030fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b20      	cmp	r3, #32
 800310c:	f040 8109 	bne.w	8003322 <HAL_I2C_Mem_Write+0x23e>
  {
    if((pData == NULL) || (Size == 0U))
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_I2C_Mem_Write+0x38>
 8003116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e101      	b.n	8003324 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_I2C_Mem_Write+0x4a>
 800312a:	2302      	movs	r3, #2
 800312c:	e0fa      	b.n	8003324 <HAL_I2C_Mem_Write+0x240>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003136:	f7ff f817 	bl	8002168 <HAL_GetTick>
 800313a:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	2319      	movs	r3, #25
 8003142:	2201      	movs	r2, #1
 8003144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f982 	bl	8003452 <I2C_WaitOnFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0e5      	b.n	8003324 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2221      	movs	r2, #33	; 0x21
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2240      	movs	r2, #64	; 0x40
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a3a      	ldr	r2, [r7, #32]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003178:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003180:	88f8      	ldrh	r0, [r7, #6]
 8003182:	893a      	ldrh	r2, [r7, #8]
 8003184:	8979      	ldrh	r1, [r7, #10]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	4603      	mov	r3, r0
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f8db 	bl	800334c <I2C_RequestMemoryWrite>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00f      	beq.n	80031bc <HAL_I2C_Mem_Write+0xd8>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d105      	bne.n	80031b0 <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0b9      	b.n	8003324 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0b3      	b.n	8003324 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2bff      	cmp	r3, #255	; 0xff
 80031c4:	d90e      	bls.n	80031e4 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	22ff      	movs	r2, #255	; 0xff
 80031ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	8979      	ldrh	r1, [r7, #10]
 80031d4:	2300      	movs	r3, #0
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fa4d 	bl	800367c <I2C_TransferConfig>
 80031e2:	e00f      	b.n	8003204 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	8979      	ldrh	r1, [r7, #10]
 80031f6:	2300      	movs	r3, #0
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fa3c 	bl	800367c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f95c 	bl	80034c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <HAL_I2C_Mem_Write+0x140>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003218:	2b04      	cmp	r3, #4
 800321a:	d101      	bne.n	8003220 <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e081      	b.n	8003324 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e07f      	b.n	8003324 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	1c59      	adds	r1, r3, #1
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	6251      	str	r1, [r2, #36]	; 0x24
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d135      	bne.n	80032c4 <HAL_I2C_Mem_Write+0x1e0>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d030      	beq.n	80032c4 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	2200      	movs	r2, #0
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f8f0 	bl	8003452 <I2C_WaitOnFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e053      	b.n	8003324 <HAL_I2C_Mem_Write+0x240>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	2bff      	cmp	r3, #255	; 0xff
 8003284:	d90e      	bls.n	80032a4 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	22ff      	movs	r2, #255	; 0xff
 800328a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	b2da      	uxtb	r2, r3
 8003292:	8979      	ldrh	r1, [r7, #10]
 8003294:	2300      	movs	r3, #0
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f9ed 	bl	800367c <I2C_TransferConfig>
 80032a2:	e00f      	b.n	80032c4 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	8979      	ldrh	r1, [r7, #10]
 80032b6:	2300      	movs	r3, #0
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f9dc 	bl	800367c <I2C_TransferConfig>
        }
      }

    }while(hi2c->XferCount > 0U);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d19a      	bne.n	8003204 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f937 	bl	8003546 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d007      	beq.n	80032ee <HAL_I2C_Mem_Write+0x20a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d101      	bne.n	80032ea <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e01c      	b.n	8003324 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e01a      	b.n	8003324 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2220      	movs	r2, #32
 80032f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <HAL_I2C_Mem_Write+0x248>)
 8003302:	400b      	ands	r3, r1
 8003304:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 8003322:	2302      	movs	r3, #2
  }
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	fe00e800 	.word	0xfe00e800

08003330 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800333e:	b2db      	uxtb	r3, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4603      	mov	r3, r0
 800335c:	817b      	strh	r3, [r7, #10]
 800335e:	460b      	mov	r3, r1
 8003360:	813b      	strh	r3, [r7, #8]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	8979      	ldrh	r1, [r7, #10]
 800336c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f980 	bl	800367c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	69b9      	ldr	r1, [r7, #24]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f8a0 	bl	80034c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <I2C_RequestMemoryWrite+0x50>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	2b04      	cmp	r3, #4
 8003392:	d101      	bne.n	8003398 <I2C_RequestMemoryWrite+0x4c>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e034      	b.n	8003402 <I2C_RequestMemoryWrite+0xb6>
    }
    else
    {
      return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e032      	b.n	8003402 <I2C_RequestMemoryWrite+0xb6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d105      	bne.n	80033ae <I2C_RequestMemoryWrite+0x62>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033a2:	893b      	ldrh	r3, [r7, #8]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28
 80033ac:	e01b      	b.n	80033e6 <I2C_RequestMemoryWrite+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033ae:	893b      	ldrh	r3, [r7, #8]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	69b9      	ldr	r1, [r7, #24]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f880 	bl	80034c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <I2C_RequestMemoryWrite+0x90>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d101      	bne.n	80033d8 <I2C_RequestMemoryWrite+0x8c>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e014      	b.n	8003402 <I2C_RequestMemoryWrite+0xb6>
      }
      else
      {
        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e012      	b.n	8003402 <I2C_RequestMemoryWrite+0xb6>
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033dc:	893b      	ldrh	r3, [r7, #8]
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2200      	movs	r2, #0
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f82e 	bl	8003452 <I2C_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <I2C_RequestMemoryWrite+0xb4>
  {
    return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e000      	b.n	8003402 <I2C_RequestMemoryWrite+0xb6>
  }

return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	d103      	bne.n	8003428 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2200      	movs	r2, #0
 8003426:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b01      	cmp	r3, #1
 8003434:	d007      	beq.n	8003446 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699a      	ldr	r2, [r3, #24]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0201 	orr.w	r2, r2, #1
 8003444:	619a      	str	r2, [r3, #24]
  }
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	603b      	str	r3, [r7, #0]
 800345e:	4613      	mov	r3, r2
 8003460:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003462:	e01c      	b.n	800349e <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346a:	d018      	beq.n	800349e <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003472:	f7fe fe79 	bl	8002168 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d20d      	bcs.n	800349e <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e00f      	b.n	80034be <I2C_WaitOnFlagUntilTimeout+0x6c>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699a      	ldr	r2, [r3, #24]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4013      	ands	r3, r2
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	bf0c      	ite	eq
 80034ae:	2301      	moveq	r3, #1
 80034b0:	2300      	movne	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d0d3      	beq.n	8003464 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034d2:	e02c      	b.n	800352e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f871 	bl	80035c0 <I2C_IsAcknowledgeFailed>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e02a      	b.n	800353e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ee:	d01e      	beq.n	800352e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034f6:	f7fe fe37 	bl	8002168 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	d213      	bcs.n	800352e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e007      	b.n	800353e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b02      	cmp	r3, #2
 800353a:	d1cb      	bne.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003552:	e028      	b.n	80035a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f831 	bl	80035c0 <I2C_IsAcknowledgeFailed>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e026      	b.n	80035b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800356e:	f7fe fdfb 	bl	8002168 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	d213      	bcs.n	80035a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e007      	b.n	80035b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d1cf      	bne.n	8003554 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b10      	cmp	r3, #16
 80035d8:	d148      	bne.n	800366c <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035da:	e01c      	b.n	8003616 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e2:	d018      	beq.n	8003616 <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <I2C_IsAcknowledgeFailed+0x3a>
 80035ea:	f7fe fdbd 	bl	8002168 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d20d      	bcs.n	8003616 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e02b      	b.n	800366e <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b20      	cmp	r3, #32
 8003622:	d1db      	bne.n	80035dc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2210      	movs	r2, #16
 800362a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2220      	movs	r2, #32
 8003632:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f7ff fee8 	bl	800340a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <I2C_IsAcknowledgeFailed+0xb8>)
 8003646:	400b      	ands	r3, r1
 8003648:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2204      	movs	r2, #4
 800364e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	fe00e800 	.word	0xfe00e800

0800367c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	817b      	strh	r3, [r7, #10]
 800368a:	4613      	mov	r3, r2
 800368c:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <I2C_TransferConfig+0x58>)
 800369e:	4013      	ands	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 80036a2:	897b      	ldrh	r3, [r7, #10]
 80036a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036a8:	7a7b      	ldrb	r3, [r7, #9]
 80036aa:	041b      	lsls	r3, r3, #16
 80036ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	431a      	orrs	r2, r3
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	605a      	str	r2, [r3, #4]
}
 80036c8:	bf00      	nop
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	fc009800 	.word	0xfc009800

080036d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036e2:	4b23      	ldr	r3, [pc, #140]	; (8003770 <HAL_PWREx_EnableOverDrive+0x98>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	4a22      	ldr	r2, [pc, #136]	; (8003770 <HAL_PWREx_EnableOverDrive+0x98>)
 80036e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ec:	6413      	str	r3, [r2, #64]	; 0x40
 80036ee:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_PWREx_EnableOverDrive+0x98>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036fa:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003706:	f7fe fd2f 	bl	8002168 <HAL_GetTick>
 800370a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800370c:	e009      	b.n	8003722 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800370e:	f7fe fd2b 	bl	8002168 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800371c:	d901      	bls.n	8003722 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e022      	b.n	8003768 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372e:	d1ee      	bne.n	800370e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003730:	4b10      	ldr	r3, [pc, #64]	; (8003774 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a0f      	ldr	r2, [pc, #60]	; (8003774 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800373c:	f7fe fd14 	bl	8002168 <HAL_GetTick>
 8003740:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003742:	e009      	b.n	8003758 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003744:	f7fe fd10 	bl	8002168 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003752:	d901      	bls.n	8003758 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e007      	b.n	8003768 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_PWREx_EnableOverDrive+0x9c>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003764:	d1ee      	bne.n	8003744 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40023800 	.word	0x40023800
 8003774:	40007000 	.word	0x40007000

08003778 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b092      	sub	sp, #72	; 0x48
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	643b      	str	r3, [r7, #64]	; 0x40
  FlagStatus pwrclkchanged = RESET;
 8003784:	2300      	movs	r3, #0
 8003786:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8087 	beq.w	80038a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003798:	4b97      	ldr	r3, [pc, #604]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d00c      	beq.n	80037be <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a4:	4b94      	ldr	r3, [pc, #592]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d112      	bne.n	80037d6 <HAL_RCC_OscConfig+0x5e>
 80037b0:	4b91      	ldr	r3, [pc, #580]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037bc:	d10b      	bne.n	80037d6 <HAL_RCC_OscConfig+0x5e>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037be:	4b8e      	ldr	r3, [pc, #568]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d06c      	beq.n	80038a4 <HAL_RCC_OscConfig+0x12c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d168      	bne.n	80038a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e281      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037de:	d106      	bne.n	80037ee <HAL_RCC_OscConfig+0x76>
 80037e0:	4b85      	ldr	r3, [pc, #532]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a84      	ldr	r2, [pc, #528]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	e02e      	b.n	800384c <HAL_RCC_OscConfig+0xd4>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0x98>
 80037f6:	4b80      	ldr	r3, [pc, #512]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a7f      	ldr	r2, [pc, #508]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80037fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	4b7d      	ldr	r3, [pc, #500]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a7c      	ldr	r2, [pc, #496]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e01d      	b.n	800384c <HAL_RCC_OscConfig+0xd4>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003818:	d10c      	bne.n	8003834 <HAL_RCC_OscConfig+0xbc>
 800381a:	4b77      	ldr	r3, [pc, #476]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a76      	ldr	r2, [pc, #472]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b74      	ldr	r3, [pc, #464]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a73      	ldr	r2, [pc, #460]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e00b      	b.n	800384c <HAL_RCC_OscConfig+0xd4>
 8003834:	4b70      	ldr	r3, [pc, #448]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a6f      	ldr	r2, [pc, #444]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 800383a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b6d      	ldr	r3, [pc, #436]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a6c      	ldr	r2, [pc, #432]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384a:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d013      	beq.n	800387c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7fe fc88 	bl	8002168 <HAL_GetTick>
 8003858:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800385c:	f7fe fc84 	bl	8002168 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	; 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e235      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	4b62      	ldr	r3, [pc, #392]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0xe4>
 800387a:	e014      	b.n	80038a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fe fc74 	bl	8002168 <HAL_GetTick>
 8003880:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x11e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003884:	f7fe fc70 	bl	8002168 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e221      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003896:	4b58      	ldr	r3, [pc, #352]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x10c>
 80038a2:	e000      	b.n	80038a6 <HAL_RCC_OscConfig+0x12e>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d07d      	beq.n	80039ae <HAL_RCC_OscConfig+0x236>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80038b2:	4b51      	ldr	r3, [pc, #324]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <HAL_RCC_OscConfig+0x15e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038be:	4b4e      	ldr	r3, [pc, #312]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d126      	bne.n	8003918 <HAL_RCC_OscConfig+0x1a0>
 80038ca:	4b4b      	ldr	r3, [pc, #300]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d120      	bne.n	8003918 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d6:	4b48      	ldr	r3, [pc, #288]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_RCC_OscConfig+0x176>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d001      	beq.n	80038ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e1f5      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ee:	4b42      	ldr	r3, [pc, #264]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6919      	ldr	r1, [r3, #16]
 80038fa:	23f8      	movs	r3, #248	; 0xf8
 80038fc:	63fb      	str	r3, [r7, #60]	; 0x3c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	4939      	ldr	r1, [pc, #228]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003916:	e04a      	b.n	80039ae <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d02d      	beq.n	800397c <HAL_RCC_OscConfig+0x204>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003920:	4b35      	ldr	r3, [pc, #212]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a34      	ldr	r2, [pc, #208]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fe fc1c 	bl	8002168 <HAL_GetTick>
 8003930:	6438      	str	r0, [r7, #64]	; 0x40

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x1ce>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003934:	f7fe fc18 	bl	8002168 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e1c9      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003946:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x1bc>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003952:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6919      	ldr	r1, [r3, #16]
 800395e:	23f8      	movs	r3, #248	; 0xf8
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003964:	fa93 f3a3 	rbit	r3, r3
 8003968:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	fab3 f383 	clz	r3, r3
 8003970:	fa01 f303 	lsl.w	r3, r1, r3
 8003974:	4920      	ldr	r1, [pc, #128]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]
 800397a:	e018      	b.n	80039ae <HAL_RCC_OscConfig+0x236>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397c:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe fbee 	bl	8002168 <HAL_GetTick>
 800398c:	6438      	str	r0, [r7, #64]	; 0x40
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003990:	f7fe fbea 	bl	8002168 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e19b      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x218>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d039      	beq.n	8003a2e <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01c      	beq.n	80039fc <HAL_RCC_OscConfig+0x284>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80039c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c6:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ce:	f7fe fbcb 	bl	8002168 <HAL_GetTick>
 80039d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d6:	f7fe fbc7 	bl	8002168 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e178      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <HAL_RCC_OscConfig+0x280>)
 80039ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x25e>
 80039f4:	e01b      	b.n	8003a2e <HAL_RCC_OscConfig+0x2b6>
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039fc:	4b9e      	ldr	r3, [pc, #632]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 80039fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a00:	4a9d      	ldr	r2, [pc, #628]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fe fbae 	bl	8002168 <HAL_GetTick>
 8003a0c:	6438      	str	r0, [r7, #64]	; 0x40
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x2aa>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a10:	f7fe fbaa 	bl	8002168 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x2aa>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e15b      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a22:	4b95      	ldr	r3, [pc, #596]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x298>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80a6 	beq.w	8003b88 <HAL_RCC_OscConfig+0x410>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3c:	4b8e      	ldr	r3, [pc, #568]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10e      	bne.n	8003a66 <HAL_RCC_OscConfig+0x2ee>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a48:	4b8b      	ldr	r3, [pc, #556]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	4a8a      	ldr	r2, [pc, #552]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a52:	6413      	str	r3, [r2, #64]	; 0x40
 8003a54:	4b88      	ldr	r3, [pc, #544]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a66:	4b85      	ldr	r3, [pc, #532]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d118      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x32c>
    {    
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a72:	4b82      	ldr	r3, [pc, #520]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a81      	ldr	r2, [pc, #516]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a7e:	f7fe fb73 	bl	8002168 <HAL_GetTick>
 8003a82:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x320>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a86:	f7fe fb6f 	bl	8002168 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b64      	cmp	r3, #100	; 0x64
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x320>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e120      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a98:	4b78      	ldr	r3, [pc, #480]	; (8003c7c <HAL_RCC_OscConfig+0x504>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x30e>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d106      	bne.n	8003aba <HAL_RCC_OscConfig+0x342>
 8003aac:	4b72      	ldr	r3, [pc, #456]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	4a71      	ldr	r2, [pc, #452]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab8:	e02d      	b.n	8003b16 <HAL_RCC_OscConfig+0x39e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0x364>
 8003ac2:	4b6d      	ldr	r3, [pc, #436]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	4a6c      	ldr	r2, [pc, #432]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ace:	4b6a      	ldr	r3, [pc, #424]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	4a69      	ldr	r2, [pc, #420]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003ad4:	f023 0304 	bic.w	r3, r3, #4
 8003ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ada:	e01c      	b.n	8003b16 <HAL_RCC_OscConfig+0x39e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b05      	cmp	r3, #5
 8003ae2:	d10c      	bne.n	8003afe <HAL_RCC_OscConfig+0x386>
 8003ae4:	4b64      	ldr	r3, [pc, #400]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	4a63      	ldr	r2, [pc, #396]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	6713      	str	r3, [r2, #112]	; 0x70
 8003af0:	4b61      	ldr	r3, [pc, #388]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	4a60      	ldr	r2, [pc, #384]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6713      	str	r3, [r2, #112]	; 0x70
 8003afc:	e00b      	b.n	8003b16 <HAL_RCC_OscConfig+0x39e>
 8003afe:	4b5e      	ldr	r3, [pc, #376]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	4a5d      	ldr	r2, [pc, #372]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0a:	4b5b      	ldr	r3, [pc, #364]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	4a5a      	ldr	r2, [pc, #360]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003b10:	f023 0304 	bic.w	r3, r3, #4
 8003b14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d015      	beq.n	8003b4a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1e:	f7fe fb23 	bl	8002168 <HAL_GetTick>
 8003b22:	6438      	str	r0, [r7, #64]	; 0x40
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b24:	e00a      	b.n	8003b3c <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b26:	f7fe fb1f 	bl	8002168 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e0ce      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3c:	4b4e      	ldr	r3, [pc, #312]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ee      	beq.n	8003b26 <HAL_RCC_OscConfig+0x3ae>
 8003b48:	e014      	b.n	8003b74 <HAL_RCC_OscConfig+0x3fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7fe fb0d 	bl	8002168 <HAL_GetTick>
 8003b4e:	6438      	str	r0, [r7, #64]	; 0x40
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b52:	f7fe fb09 	bl	8002168 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e0b8      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b68:	4b43      	ldr	r3, [pc, #268]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ee      	bne.n	8003b52 <HAL_RCC_OscConfig+0x3da>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d105      	bne.n	8003b88 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b7c:	4b3e      	ldr	r3, [pc, #248]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	4a3d      	ldr	r2, [pc, #244]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80a3 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x560>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b92:	4b39      	ldr	r3, [pc, #228]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	f000 809a 	beq.w	8003cd4 <HAL_RCC_OscConfig+0x55c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d17b      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x528>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba8:	4b33      	ldr	r3, [pc, #204]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a32      	ldr	r2, [pc, #200]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7fe fad8 	bl	8002168 <HAL_GetTick>
 8003bb8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fe fad4 	bl	8002168 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e085      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x444>
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003be8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	fa93 f3a3 	rbit	r3, r3
 8003bf4:	613b      	str	r3, [r7, #16]
  return(result);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	fab3 f383 	clz	r3, r3
 8003bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	1e59      	subs	r1, r3, #1
 8003c0a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003c0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	fa93 f3a3 	rbit	r3, r3
 8003c16:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c28:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	623b      	str	r3, [r7, #32]
  return(result);
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	fab3 f383 	clz	r3, r3
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c46:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	fa93 f3a3 	rbit	r3, r3
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	fab3 f383 	clz	r3, r3
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	4906      	ldr	r1, [pc, #24]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a03      	ldr	r2, [pc, #12]	; (8003c78 <HAL_RCC_OscConfig+0x500>)
 8003c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fe fa7a 	bl	8002168 <HAL_GetTick>
 8003c74:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c76:	e00c      	b.n	8003c92 <HAL_RCC_OscConfig+0x51a>
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fe fa72 	bl	8002168 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x51a>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e023      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c92:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <HAL_RCC_OscConfig+0x56c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x508>
 8003c9e:	e01b      	b.n	8003cd8 <HAL_RCC_OscConfig+0x560>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca0:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <HAL_RCC_OscConfig+0x56c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a0f      	ldr	r2, [pc, #60]	; (8003ce4 <HAL_RCC_OscConfig+0x56c>)
 8003ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003caa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fe fa5c 	bl	8002168 <HAL_GetTick>
 8003cb0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x54e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fe fa58 	bl	8002168 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x54e>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e009      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <HAL_RCC_OscConfig+0x56c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x53c>
 8003cd2:	e001      	b.n	8003cd8 <HAL_RCC_OscConfig+0x560>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x562>
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3748      	adds	r7, #72	; 0x48
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003cf6:	4b77      	ldr	r3, [pc, #476]	; (8003ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d910      	bls.n	8003d26 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d04:	4b73      	ldr	r3, [pc, #460]	; (8003ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f023 020f 	bic.w	r2, r3, #15
 8003d0c:	4971      	ldr	r1, [pc, #452]	; (8003ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d14:	4b6f      	ldr	r3, [pc, #444]	; (8003ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d001      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e0d2      	b.n	8003ecc <HAL_RCC_ClockConfig+0x1e4>
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d008      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d32:	4b69      	ldr	r3, [pc, #420]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4966      	ldr	r1, [pc, #408]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d06a      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d107      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d58:	4b5f      	ldr	r3, [pc, #380]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d115      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0b1      	b.n	8003ecc <HAL_RCC_ClockConfig+0x1e4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d70:	4b59      	ldr	r3, [pc, #356]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d109      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0a5      	b.n	8003ecc <HAL_RCC_ClockConfig+0x1e4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d80:	4b55      	ldr	r3, [pc, #340]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e09d      	b.n	8003ecc <HAL_RCC_ClockConfig+0x1e4>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d90:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f023 0203 	bic.w	r2, r3, #3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	494e      	ldr	r1, [pc, #312]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da2:	f7fe f9e1 	bl	8002168 <HAL_GetTick>
 8003da6:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d112      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db2:	f7fe f9d9 	bl	8002168 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e081      	b.n	8003ecc <HAL_RCC_ClockConfig+0x1e4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dc8:	4b43      	ldr	r3, [pc, #268]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 030c 	and.w	r3, r3, #12
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d1ee      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xca>
 8003dd4:	e027      	b.n	8003e26 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d11d      	bne.n	8003e1a <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de0:	f7fe f9c2 	bl	8002168 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e06a      	b.n	8003ecc <HAL_RCC_ClockConfig+0x1e4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003df6:	4b38      	ldr	r3, [pc, #224]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d1ee      	bne.n	8003de0 <HAL_RCC_ClockConfig+0xf8>
 8003e02:	e010      	b.n	8003e26 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e04:	f7fe f9b0 	bl	8002168 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e058      	b.n	8003ecc <HAL_RCC_ClockConfig+0x1e4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e1a:	4b2f      	ldr	r3, [pc, #188]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1ee      	bne.n	8003e04 <HAL_RCC_ClockConfig+0x11c>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003e26:	4b2b      	ldr	r3, [pc, #172]	; (8003ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d210      	bcs.n	8003e56 <HAL_RCC_ClockConfig+0x16e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e34:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 020f 	bic.w	r2, r3, #15
 8003e3c:	4925      	ldr	r1, [pc, #148]	; (8003ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e44:	4b23      	ldr	r3, [pc, #140]	; (8003ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d001      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e03a      	b.n	8003ecc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e62:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	491a      	ldr	r1, [pc, #104]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e80:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4912      	ldr	r1, [pc, #72]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003e94:	f000 f826 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003e98:	4601      	mov	r1, r0
 8003e9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ea2:	23f0      	movs	r3, #240	; 0xf0
 8003ea4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb8:	4a08      	ldr	r2, [pc, #32]	; (8003edc <HAL_RCC_ClockConfig+0x1f4>)
 8003eba:	5cd3      	ldrb	r3, [r2, r3]
 8003ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8003ec0:	4a07      	ldr	r2, [pc, #28]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ec2:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f7fe f925 	bl	8002114 <HAL_InitTick>
  
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40023c00 	.word	0x40023c00
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	080065ac 	.word	0x080065ac
 8003ee0:	20000008 	.word	0x20000008

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b08b      	sub	sp, #44	; 0x2c
 8003ee8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003efa:	4b38      	ldr	r3, [pc, #224]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d00c      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0x3c>
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d85d      	bhi.n	8003fc6 <HAL_RCC_GetSysClockFreq+0xe2>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0x30>
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0x36>
 8003f12:	e058      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f14:	4b32      	ldr	r3, [pc, #200]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f16:	623b      	str	r3, [r7, #32]
       break;
 8003f18:	e058      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f1a:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003f1c:	623b      	str	r3, [r7, #32]
      break;
 8003f1e:	e055      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f20:	4b2e      	ldr	r3, [pc, #184]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f28:	61fb      	str	r3, [r7, #28]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f2a:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d017      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8003f36:	4a2b      	ldr	r2, [pc, #172]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f3e:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f40:	6859      	ldr	r1, [r3, #4]
 8003f42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f46:	400b      	ands	r3, r1
 8003f48:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8003f4c:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	6979      	ldr	r1, [r7, #20]
 8003f50:	fa91 f1a1 	rbit	r1, r1
 8003f54:	6139      	str	r1, [r7, #16]
  return(result);
 8003f56:	6939      	ldr	r1, [r7, #16]
 8003f58:	fab1 f181 	clz	r1, r1
 8003f5c:	40cb      	lsrs	r3, r1
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
 8003f64:	e016      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8003f66:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f6e:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f70:	6859      	ldr	r1, [r3, #4]
 8003f72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f76:	400b      	ands	r3, r1
 8003f78:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8003f7c:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	fa91 f1a1 	rbit	r1, r1
 8003f84:	60b9      	str	r1, [r7, #8]
  return(result);
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	fab1 f181 	clz	r1, r1
 8003f8c:	40cb      	lsrs	r3, r1
 8003f8e:	fb02 f303 	mul.w	r3, r2, r3
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f9c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003fa0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	fa93 f3a3 	rbit	r3, r3
 8003fa8:	603b      	str	r3, [r7, #0]
  return(result);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	fab3 f383 	clz	r3, r3
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8003fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc2:	623b      	str	r3, [r7, #32]
      break;
 8003fc4:	e002      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fc6:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003fc8:	623b      	str	r3, [r7, #32]
      break;
 8003fca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	372c      	adds	r7, #44	; 0x2c
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	00f42400 	.word	0x00f42400
 8003fe4:	017d7840 	.word	0x017d7840

08003fe8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect. 
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000008 	.word	0x20000008

08004000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b0d8      	sub	sp, #352	; 0x160
 8004004:	af00      	add	r7, sp, #0
 8004006:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800400a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800400e:	6018      	str	r0, [r3, #0]
  uint32_t tickstart = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  uint32_t tmpreg0 = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  uint32_t tmpreg1 = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  uint32_t plli2sused = 0;
 8004022:	2300      	movs	r3, #0
 8004024:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  uint32_t pllsaiused = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800402e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004032:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01b      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004042:	4b94      	ldr	r3, [pc, #592]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	4a93      	ldr	r2, [pc, #588]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004048:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800404c:	6093      	str	r3, [r2, #8]
 800404e:	4b91      	ldr	r3, [pc, #580]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004056:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405e:	498d      	ldr	r1, [pc, #564]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004060:	4313      	orrs	r3, r2
 8004062:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004064:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004068:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004070:	2b00      	cmp	r3, #0
 8004072:	d102      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1; 
 8004074:	2301      	movs	r3, #1
 8004076:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800407a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800407e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d025      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800408e:	4b81      	ldr	r3, [pc, #516]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004098:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800409c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	497b      	ldr	r1, [pc, #492]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80040ac:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80040b0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040bc:	d102      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      plli2sused = 1; 
 80040be:	2301      	movs	r3, #1
 80040c0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040c4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80040c8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d102      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xda>
    {
      pllsaiused = 1; 
 80040d4:	2301      	movs	r3, #1
 80040d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80040da:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80040de:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d025      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040ee:	4b69      	ldr	r3, [pc, #420]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80040f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80040fc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	4963      	ldr	r1, [pc, #396]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800410c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004110:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800411c:	d102      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      plli2sused = 1; 
 800411e:	2301      	movs	r3, #1
 8004120:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004124:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004128:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      pllsaiused = 1; 
 8004134:	2301      	movs	r3, #1
 8004136:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800413a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800413e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {    
      plli2sused = 1; 
 800414e:	2301      	movs	r3, #1
 8004150:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004154:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004158:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80ae 	beq.w	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800416a:	4b4a      	ldr	r3, [pc, #296]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	4a49      	ldr	r2, [pc, #292]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004174:	6413      	str	r3, [r2, #64]	; 0x40
 8004176:	4b47      	ldr	r3, [pc, #284]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800417e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004182:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800418c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004190:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004192:	4b41      	ldr	r3, [pc, #260]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a40      	ldr	r2, [pc, #256]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419c:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419e:	f7fd ffe3 	bl	8002168 <HAL_GetTick>
 80041a2:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041a6:	e00a      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a8:	f7fd ffde 	bl	8002168 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b64      	cmp	r3, #100	; 0x64
 80041b6:	d902      	bls.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1be>
      {
        return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	f000 bfd9 	b.w	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041be:	4b36      	ldr	r3, [pc, #216]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0ee      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ca:	4b32      	ldr	r3, [pc, #200]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041d6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d03f      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80041de:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80041e2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ee:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d033      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041f6:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004202:	4b24      	ldr	r3, [pc, #144]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a23      	ldr	r2, [pc, #140]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800420e:	4b21      	ldr	r3, [pc, #132]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	4a20      	ldr	r2, [pc, #128]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004218:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800421a:	4a1e      	ldr	r2, [pc, #120]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800421c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004220:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004222:	4b1c      	ldr	r3, [pc, #112]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d017      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x25e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422e:	f7fd ff9b 	bl	8002168 <HAL_GetTick>
 8004232:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004236:	e00c      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x252>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fd ff96 	bl	8002168 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	f241 3288 	movw	r2, #5000	; 0x1388
 8004248:	4293      	cmp	r3, r2
 800424a:	d902      	bls.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x252>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	f000 bf8f 	b.w	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1170>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0ec      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x238>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800425e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004262:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004272:	d115      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8004274:	4b07      	ldr	r3, [pc, #28]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800427c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004280:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800428a:	400b      	ands	r3, r1
 800428c:	4901      	ldr	r1, [pc, #4]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
 8004292:	e00b      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004294:	40023800 	.word	0x40023800
 8004298:	40007000 	.word	0x40007000
 800429c:	0ffffcff 	.word	0x0ffffcff
 80042a0:	4bbb      	ldr	r3, [pc, #748]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4aba      	ldr	r2, [pc, #744]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80042a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042aa:	6093      	str	r3, [r2, #8]
 80042ac:	4bb8      	ldr	r3, [pc, #736]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80042ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042b0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80042b4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c0:	49b3      	ldr	r1, [pc, #716]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042c6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80042ca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d014      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042da:	4bad      	ldr	r3, [pc, #692]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80042dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e0:	4aab      	ldr	r2, [pc, #684]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80042e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042ea:	4ba9      	ldr	r3, [pc, #676]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80042ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042f0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80042f4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	49a4      	ldr	r1, [pc, #656]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004304:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004308:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00e      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004318:	4b9d      	ldr	r3, [pc, #628]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004322:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004326:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800432e:	4998      	ldr	r1, [pc, #608]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004336:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800433a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00e      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800434a:	4b91      	ldr	r3, [pc, #580]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004354:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004358:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004360:	498b      	ldr	r1, [pc, #556]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004368:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800436c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00e      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800437c:	4b84      	ldr	r3, [pc, #528]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004386:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800438a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004392:	497f      	ldr	r1, [pc, #508]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800439a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800439e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00e      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043ae:	4b78      	ldr	r3, [pc, #480]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043b8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80043bc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c4:	4972      	ldr	r1, [pc, #456]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043cc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80043d0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00e      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043e0:	4b6b      	ldr	r3, [pc, #428]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e6:	f023 0203 	bic.w	r2, r3, #3
 80043ea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80043ee:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	4966      	ldr	r1, [pc, #408]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043fe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004402:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00e      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004412:	4b5f      	ldr	r3, [pc, #380]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	f023 020c 	bic.w	r2, r3, #12
 800441c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004420:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004428:	4959      	ldr	r1, [pc, #356]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004430:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004434:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00e      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004444:	4b52      	ldr	r3, [pc, #328]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800444e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004452:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	494d      	ldr	r1, [pc, #308]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004462:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004466:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00e      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004476:	4b46      	ldr	r3, [pc, #280]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004480:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004484:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448c:	4940      	ldr	r1, [pc, #256]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004494:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004498:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00e      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044a8:	4b39      	ldr	r3, [pc, #228]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044b2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044b6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	4934      	ldr	r1, [pc, #208]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80044c6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044ca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00e      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80044da:	4b2d      	ldr	r3, [pc, #180]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044e4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044e8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	4927      	ldr	r1, [pc, #156]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044fc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00e      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800450c:	4b20      	ldr	r3, [pc, #128]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004512:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004516:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800451a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004522:	491b      	ldr	r1, [pc, #108]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800452a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800452e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00e      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800453e:	4b14      	ldr	r3, [pc, #80]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004548:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800454c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004554:	490e      	ldr	r1, [pc, #56]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800455c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004560:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d011      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800457a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800457e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004586:	4902      	ldr	r1, [pc, #8]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800458e:	e001      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004590:	40023800 	.word	0x40023800
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004594:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004598:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x5de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80045a8:	4b66      	ldr	r3, [pc, #408]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045b2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80045b6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045be:	4961      	ldr	r1, [pc, #388]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80045c6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80045ca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045d6:	d102      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x5de>
    {
      pllsaiused = 1; 
 80045d8:	2301      	movs	r3, #1
 80045da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045de:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80045e2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    pllsaiused = 1; 
 80045f2:	2301      	movs	r3, #1
 80045f4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80045fc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00e      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800460c:	4b4d      	ldr	r3, [pc, #308]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004616:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800461a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004622:	4948      	ldr	r1, [pc, #288]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800462a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800462e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00f      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x65e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800463e:	4b41      	ldr	r3, [pc, #260]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004644:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004648:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800464c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004656:	493b      	ldr	r1, [pc, #236]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800465e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004662:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00f      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004672:	4b34      	ldr	r3, [pc, #208]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004678:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800467c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004680:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468a:	492e      	ldr	r1, [pc, #184]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004692:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004696:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00f      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046a6:	4b27      	ldr	r3, [pc, #156]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80046a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046b0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046b4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	4921      	ldr	r1, [pc, #132]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80046c6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046ca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00f      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80046da:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80046dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046e4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046e8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f2:	4914      	ldr	r1, [pc, #80]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80046fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d009      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x716>
 8004702:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004706:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004712:	f040 8284 	bne.w	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800471c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004720:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004722:	f7fd fd21 	bl	8002168 <HAL_GetTick>
 8004726:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800472a:	e00d      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800472c:	f7fd fd1c 	bl	8002168 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b64      	cmp	r3, #100	; 0x64
 800473a:	d905      	bls.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x748>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	f000 bd17 	b.w	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1170>
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004748:	4be4      	ldr	r3, [pc, #912]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1eb      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x72c>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004754:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004758:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 808c 	beq.w	8004882 <HAL_RCCEx_PeriphCLKConfig+0x882>
 800476a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800476e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004776:	2b00      	cmp	r3, #0
 8004778:	f040 8083 	bne.w	8004882 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800477c:	4bd7      	ldr	r3, [pc, #860]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800477e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004786:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800478a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004792:	fa93 f3a3 	rbit	r3, r3
 8004796:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  return(result);
 800479a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800479e:	fab3 f383 	clz	r3, r3
 80047a2:	fa22 f303 	lsr.w	r3, r2, r3
 80047a6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80047aa:	4bcc      	ldr	r3, [pc, #816]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 80047ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047b4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80047b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047c0:	fa93 f3a3 	rbit	r3, r3
 80047c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  return(result);
 80047c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	fa22 f303 	lsr.w	r3, r2, r3
 80047d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80047d8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047dc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80047f0:	fa93 f3a3 	rbit	r3, r3
 80047f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return(result);
 80047f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047fc:	fab3 f383 	clz	r3, r3
 8004800:	409a      	lsls	r2, r3
 8004802:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004806:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800480e:	fa93 f3a3 	rbit	r3, r3
 8004812:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return(result);
 8004816:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004822:	fa01 f303 	lsl.w	r3, r1, r3
 8004826:	431a      	orrs	r2, r3
 8004828:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800482c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004830:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004834:	fa93 f3a3 	rbit	r3, r3
 8004838:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  return(result);
 800483c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004840:	fab3 f383 	clz	r3, r3
 8004844:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	431a      	orrs	r2, r3
 800484e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004852:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6899      	ldr	r1, [r3, #8]
 800485a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800485e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004866:	fa93 f3a3 	rbit	r3, r3
 800486a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  return(result);
 800486e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004872:	fab3 f383 	clz	r3, r3
 8004876:	fa01 f303 	lsl.w	r3, r1, r3
 800487a:	4998      	ldr	r1, [pc, #608]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004882:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004886:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d008      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004896:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800489a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a6:	d014      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80048a8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048ac:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 809d 	beq.w	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80048be:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048c2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ce:	f040 8093 	bne.w	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80048d2:	4b82      	ldr	r3, [pc, #520]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 80048d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048dc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80048e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80048e8:	fa93 f3a3 	rbit	r3, r3
 80048ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  return(result);
 80048f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048f4:	fab3 f383 	clz	r3, r3
 80048f8:	fa22 f303 	lsr.w	r3, r2, r3
 80048fc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8004900:	4b76      	ldr	r3, [pc, #472]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004906:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800490a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800490e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004912:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004916:	fa93 f3a3 	rbit	r3, r3
 800491a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  return(result);
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	fa22 f303 	lsr.w	r3, r2, r3
 800492a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800492e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004932:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800493e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  return(result);
 800494e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004952:	fab3 f383 	clz	r3, r3
 8004956:	409a      	lsls	r2, r3
 8004958:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800495c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004960:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004964:	fa93 f3a3 	rbit	r3, r3
 8004968:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  return(result);
 800496c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004970:	fab3 f383 	clz	r3, r3
 8004974:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004978:	fa01 f303 	lsl.w	r3, r1, r3
 800497c:	431a      	orrs	r2, r3
 800497e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004982:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68d9      	ldr	r1, [r3, #12]
 800498a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800498e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004996:	fa93 f3a3 	rbit	r3, r3
 800499a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return(result);
 800499e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	fa01 f303 	lsl.w	r3, r1, r3
 80049aa:	431a      	orrs	r2, r3
 80049ac:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80049b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  return(result);
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c4:	fab3 f383 	clz	r3, r3
 80049c8:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80049cc:	fa01 f303 	lsl.w	r3, r1, r3
 80049d0:	4942      	ldr	r1, [pc, #264]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 80049d8:	4b40      	ldr	r3, [pc, #256]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 80049da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049de:	f023 021f 	bic.w	r2, r3, #31
 80049e2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049e6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	3b01      	subs	r3, #1
 80049f0:	493a      	ldr	r1, [pc, #232]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049fc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8086 	beq.w	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8004a0e:	4b33      	ldr	r3, [pc, #204]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a18:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a24:	fa93 f3a3 	rbit	r3, r3
 8004a28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 8004a2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a30:	fab3 f383 	clz	r3, r3
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
 8004a38:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8004a3c:	4b27      	ldr	r3, [pc, #156]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a46:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004a4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a52:	fa93 f3a3 	rbit	r3, r3
 8004a56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 8004a5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a5e:	fab3 f383 	clz	r3, r3
 8004a62:	fa22 f303 	lsr.w	r3, r2, r3
 8004a66:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a6a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a6e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a82:	fa93 f3a3 	rbit	r3, r3
 8004a86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 8004a8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a8e:	fab3 f383 	clz	r3, r3
 8004a92:	409a      	lsls	r2, r3
 8004a94:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a98:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6919      	ldr	r1, [r3, #16]
 8004aa0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aac:	fa93 f3a3 	rbit	r3, r3
 8004ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8004ab4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ab8:	fab3 f383 	clz	r3, r3
 8004abc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004ac6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ace:	fa93 f3a3 	rbit	r3, r3
 8004ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  return(result);
 8004ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ada:	e001      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	fab3 f383 	clz	r3, r3
 8004ae4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aec:	431a      	orrs	r2, r3
 8004aee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004af2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004afa:	fa93 f3a3 	rbit	r3, r3
 8004afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  return(result);
 8004b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b06:	fab3 f383 	clz	r3, r3
 8004b0a:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8004b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b12:	4950      	ldr	r1, [pc, #320]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b1a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b1e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d05c      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b2e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b32:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b46:	fa93 f3a3 	rbit	r3, r3
 8004b4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 8004b4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b52:	fab3 f383 	clz	r3, r3
 8004b56:	409a      	lsls	r2, r3
 8004b58:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b5c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6919      	ldr	r1, [r3, #16]
 8004b64:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004b68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b70:	fa93 f3a3 	rbit	r3, r3
 8004b74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  return(result);
 8004b78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b7c:	fab3 f383 	clz	r3, r3
 8004b80:	fa01 f303 	lsl.w	r3, r1, r3
 8004b84:	431a      	orrs	r2, r3
 8004b86:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b8a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68d9      	ldr	r1, [r3, #12]
 8004b92:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004b96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b9e:	fa93 f3a3 	rbit	r3, r3
 8004ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 8004ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004baa:	fab3 f383 	clz	r3, r3
 8004bae:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004bb8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6899      	ldr	r1, [r3, #8]
 8004bc0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bcc:	fa93 f3a3 	rbit	r3, r3
 8004bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8004bd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004bd8:	fab3 f383 	clz	r3, r3
 8004bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004be0:	491c      	ldr	r1, [pc, #112]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004be8:	4b1a      	ldr	r3, [pc, #104]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004bee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bf2:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf4:	f7fd fab8 	bl	8002168 <HAL_GetTick>
 8004bf8:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bfc:	e009      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bfe:	f7fd fab3 	bl	8002168 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b64      	cmp	r3, #100	; 0x64
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xc12>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e2ae      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ef      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c1e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	f040 82a3 	bne.w	800516e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8004c28:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a09      	ldr	r2, [pc, #36]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c32:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c34:	f7fd fa98 	bl	8002168 <HAL_GetTick>
 8004c38:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c3c:	e00c      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xc58>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c3e:	f7fd fa93 	bl	8002168 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	; 0x64
 8004c4c:	d904      	bls.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xc58>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e28e      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1170>
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c58:	4bd4      	ldr	r3, [pc, #848]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c64:	d0eb      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xc3e>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c66:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c6a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 8004c7a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c7e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d013      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c8a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c8e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8093 	beq.w	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ca0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ca4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f040 808a 	bne.w	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8004cb2:	4bbe      	ldr	r3, [pc, #760]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cbc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004cc0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cc4:	fa93 f3a3 	rbit	r3, r3
 8004cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8004cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ccc:	fab3 f383 	clz	r3, r3
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8004cd8:	4bb4      	ldr	r3, [pc, #720]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cde:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004ce2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004ce6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cea:	fa93 f3a3 	rbit	r3, r3
 8004cee:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 8004cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf2:	fab3 f383 	clz	r3, r3
 8004cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfa:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cfe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d02:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695a      	ldr	r2, [r3, #20]
 8004d0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d16:	fa93 f3a3 	rbit	r3, r3
 8004d1a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8004d1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d1e:	fab3 f383 	clz	r3, r3
 8004d22:	409a      	lsls	r2, r3
 8004d24:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d30:	fa93 f3a3 	rbit	r3, r3
 8004d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8004d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d3c:	fab3 f383 	clz	r3, r3
 8004d40:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004d44:	fa01 f303 	lsl.w	r3, r1, r3
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d4e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6999      	ldr	r1, [r3, #24]
 8004d56:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d62:	fa93 f3a3 	rbit	r3, r3
 8004d66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8004d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d6e:	fab3 f383 	clz	r3, r3
 8004d72:	fa01 f303 	lsl.w	r3, r1, r3
 8004d76:	431a      	orrs	r2, r3
 8004d78:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d84:	fa93 f3a3 	rbit	r3, r3
 8004d88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8004d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d90:	fab3 f383 	clz	r3, r3
 8004d94:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8004d98:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9c:	4983      	ldr	r1, [pc, #524]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004da4:	4b81      	ldr	r3, [pc, #516]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004daa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004dae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004db2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	021b      	lsls	r3, r3, #8
 8004dbe:	497b      	ldr	r1, [pc, #492]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004dc6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004dca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 80c5 	beq.w	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xf66>
 8004ddc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004de0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dec:	f040 80bb 	bne.w	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8004df0:	4b6e      	ldr	r3, [pc, #440]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dfa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004dfe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004e02:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8004e06:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e08:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e0c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	fa93 f1a3 	rbit	r1, r3
 8004e16:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e1a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004e1e:	6019      	str	r1, [r3, #0]
  return(result);
 8004e20:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	fab3 f383 	clz	r3, r3
 8004e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e32:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8004e36:	4b5d      	ldr	r3, [pc, #372]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e40:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e48:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8004e4c:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e52:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	fa93 f1a3 	rbit	r1, r3
 8004e5c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e64:	6019      	str	r1, [r3, #0]
  return(result);
 8004e66:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	fab3 f383 	clz	r3, r3
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
 8004e78:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e7c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e80:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695a      	ldr	r2, [r3, #20]
 8004e88:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e90:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8004e94:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e9a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	fa93 f1a3 	rbit	r1, r3
 8004ea4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ea8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004eac:	6019      	str	r1, [r3, #0]
  return(result);
 8004eae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004eb2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	fab3 f383 	clz	r3, r3
 8004ebc:	409a      	lsls	r2, r3
 8004ebe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ec2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6a19      	ldr	r1, [r3, #32]
 8004eca:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed2:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8004ed6:	6018      	str	r0, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	fa93 f0a3 	rbit	r0, r3
 8004ee6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004eea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eee:	6018      	str	r0, [r3, #0]
  return(result);
 8004ef0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ef4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	fab3 f383 	clz	r3, r3
 8004efe:	fa01 f303 	lsl.w	r3, r1, r3
 8004f02:	431a      	orrs	r2, r3
 8004f04:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f0c:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8004f10:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f12:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f16:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	fa93 f1a3 	rbit	r1, r3
 8004f20:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f28:	6019      	str	r1, [r3, #0]
  return(result);
 8004f2a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	fab3 f383 	clz	r3, r3
 8004f38:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f40:	431a      	orrs	r2, r3
 8004f42:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004f46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f4a:	fa93 f3a3 	rbit	r3, r3
 8004f4e:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8004f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f52:	fab3 f383 	clz	r3, r3
 8004f56:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8004f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5e:	4913      	ldr	r1, [pc, #76]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f66:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f6a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 80dd 	beq.w	8005136 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f86:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f8a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004f8e:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8004f92:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f94:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f98:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	fa93 f1a3 	rbit	r1, r3
 8004fa2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004fa6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004faa:	e001      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	6019      	str	r1, [r3, #0]
  return(result);
 8004fb2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004fb6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	fab3 f383 	clz	r3, r3
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8004fc8:	4b6c      	ldr	r3, [pc, #432]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fd2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004fd6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004fda:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8004fde:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004fe4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	fa93 f1a3 	rbit	r1, r3
 8004fee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ff2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004ff6:	6019      	str	r1, [r3, #0]
  return(result);
 8004ff8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ffc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	fab3 f383 	clz	r3, r3
 8005006:	fa22 f303 	lsr.w	r3, r2, r3
 800500a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800500e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005012:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695a      	ldr	r2, [r3, #20]
 800501a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800501e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005022:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005026:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005028:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800502c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	fa93 f1a3 	rbit	r1, r3
 8005036:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800503a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800503e:	6019      	str	r1, [r3, #0]
  return(result);
 8005040:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005044:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	fab3 f383 	clz	r3, r3
 800504e:	409a      	lsls	r2, r3
 8005050:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005054:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005058:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800505c:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005062:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	fa93 f1a3 	rbit	r1, r3
 800506c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005070:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005074:	6019      	str	r1, [r3, #0]
  return(result);
 8005076:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800507a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	fab3 f383 	clz	r3, r3
 8005084:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8005088:	fa01 f303 	lsl.w	r3, r1, r3
 800508c:	431a      	orrs	r2, r3
 800508e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005096:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800509a:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80050a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	fa93 f1a3 	rbit	r1, r3
 80050aa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80050ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80050b2:	6019      	str	r1, [r3, #0]
  return(result);
 80050b4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80050b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	fab3 f383 	clz	r3, r3
 80050c2:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80050c6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ca:	431a      	orrs	r2, r3
 80050cc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80050d0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69d9      	ldr	r1, [r3, #28]
 80050d8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80050dc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050e0:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 80050e4:	6018      	str	r0, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80050ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	fa93 f0a3 	rbit	r0, r3
 80050f4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80050f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050fc:	6018      	str	r0, [r3, #0]
  return(result);
 80050fe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	fab3 f383 	clz	r3, r3
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	491a      	ldr	r1, [pc, #104]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005118:	4b18      	ldr	r3, [pc, #96]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800511a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800511e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005122:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005126:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	4913      	ldr	r1, [pc, #76]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005136:	4b11      	ldr	r3, [pc, #68]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a10      	ldr	r2, [pc, #64]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800513c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005140:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005142:	f7fd f811 	bl	8002168 <HAL_GetTick>
 8005146:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800514a:	e009      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1160>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800514c:	f7fd f80c 	bl	8002168 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b64      	cmp	r3, #100	; 0x64
 800515a:	d901      	bls.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1160>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e007      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800516c:	d1ee      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x114c>
      }
    }
  }
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800

08005180 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005180:	b480      	push	{r7}
 8005182:	b09b      	sub	sp, #108	; 0x6c
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	667b      	str	r3, [r7, #100]	; 0x64
  
  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4ab6      	ldr	r2, [pc, #728]	; (8005468 <HAL_RCCEx_GetPeriphCLKConfig+0x2e8>)
 8005190:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8005192:	4bb6      	ldr	r3, [pc, #728]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005194:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005198:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800519c:	4013      	ands	r3, r2
 800519e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80051a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	fa92 f2a2 	rbit	r2, r2
 80051aa:	60fa      	str	r2, [r7, #12]
  return(result);
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	fab2 f282 	clz	r2, r2
 80051b2:	fa23 f202 	lsr.w	r2, r3, r2
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80051ba:	4bac      	ldr	r3, [pc, #688]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80051bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051c4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80051c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	fa93 f3a3 	rbit	r3, r3
 80051d0:	617b      	str	r3, [r7, #20]
  return(result);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	fab3 f383 	clz	r3, r3
 80051d8:	40da      	lsrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80051de:	4ba3      	ldr	r3, [pc, #652]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80051e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051e8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80051ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	fa93 f3a3 	rbit	r3, r3
 80051f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	fab3 f383 	clz	r3, r3
 80051fc:	40da      	lsrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005202:	4b9a      	ldr	r3, [pc, #616]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005208:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800520c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005210:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	fa93 f3a3 	rbit	r3, r3
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	fab3 f383 	clz	r3, r3
 8005220:	40da      	lsrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	609a      	str	r2, [r3, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 8005226:	4b91      	ldr	r3, [pc, #580]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005228:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800522c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005230:	4013      	ands	r3, r2
 8005232:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005236:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523a:	fa92 f2a2 	rbit	r2, r2
 800523e:	62fa      	str	r2, [r7, #44]	; 0x2c
  return(result);
 8005240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005242:	fab2 f282 	clz	r2, r2
 8005246:	fa23 f202 	lsr.w	r2, r3, r2
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800524e:	4b87      	ldr	r3, [pc, #540]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005258:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800525c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005260:	fa93 f3a3 	rbit	r3, r3
 8005264:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005268:	fab3 f383 	clz	r3, r3
 800526c:	40da      	lsrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 8005272:	4b7e      	ldr	r3, [pc, #504]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005278:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800527c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005280:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005284:	fa93 f3a3 	rbit	r3, r3
 8005288:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800528a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528c:	fab3 f383 	clz	r3, r3
 8005290:	40da      	lsrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 8005296:	4b75      	ldr	r3, [pc, #468]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80052a0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80052a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a8:	fa93 f3a3 	rbit	r3, r3
 80052ac:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 80052ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b0:	fab3 f383 	clz	r3, r3
 80052b4:	40da      	lsrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	61da      	str	r2, [r3, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 80052ba:	4b6c      	ldr	r3, [pc, #432]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80052bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052c0:	f003 021f 	and.w	r2, r3, #31
 80052c4:	231f      	movs	r3, #31
 80052c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ca:	fa93 f3a3 	rbit	r3, r3
 80052ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80052d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d2:	fab3 f383 	clz	r3, r3
 80052d6:	40da      	lsrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 80052dc:	4b63      	ldr	r3, [pc, #396]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80052de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052e2:	f403 52f8 	and.w	r2, r3, #7936	; 0x1f00
 80052e6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80052ea:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052ee:	fa93 f3a3 	rbit	r3, r3
 80052f2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80052f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052f6:	fab3 f383 	clz	r3, r3
 80052fa:	40da      	lsrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 8005300:	4b5a      	ldr	r3, [pc, #360]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005306:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800530a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800530e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005312:	fa93 f3a3 	rbit	r3, r3
 8005316:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8005318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800531a:	fab3 f383 	clz	r3, r3
 800531e:	40da      	lsrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8005324:	4b51      	ldr	r3, [pc, #324]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800532a:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8005332:	4b4e      	ldr	r3, [pc, #312]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005338:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8005340:	4b4a      	ldr	r3, [pc, #296]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800534c:	4b47      	ldr	r3, [pc, #284]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	665a      	str	r2, [r3, #100]	; 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800535a:	4b44      	ldr	r3, [pc, #272]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005360:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	669a      	str	r2, [r3, #104]	; 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8005368:	4b40      	ldr	r3, [pc, #256]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536e:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	66da      	str	r2, [r3, #108]	; 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8005376:	4b3d      	ldr	r3, [pc, #244]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	671a      	str	r2, [r3, #112]	; 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8005384:	4b39      	ldr	r3, [pc, #228]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	f003 0203 	and.w	r2, r3, #3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8005392:	4b36      	ldr	r3, [pc, #216]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005398:	f003 020c 	and.w	r2, r3, #12
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80053a0:	4b32      	ldr	r3, [pc, #200]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a6:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80053ae:	4b2f      	ldr	r3, [pc, #188]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80053b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80053bc:	4b2b      	ldr	r3, [pc, #172]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80053ca:	4b28      	ldr	r3, [pc, #160]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80053cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80053d8:	4b24      	ldr	r3, [pc, #144]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053de:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80053e6:	4b21      	ldr	r3, [pc, #132]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ec:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	661a      	str	r2, [r3, #96]	; 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80053f4:	4b1d      	ldr	r3, [pc, #116]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fa:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8005402:	4b1a      	ldr	r3, [pc, #104]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005408:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	679a      	str	r2, [r3, #120]	; 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8005410:	4b16      	ldr	r3, [pc, #88]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005416:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800541e:	4b13      	ldr	r3, [pc, #76]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005424:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 800542e:	4b0f      	ldr	r3, [pc, #60]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005434:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	
  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 800543e:	4b0b      	ldr	r3, [pc, #44]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005444:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
 800544e:	4b07      	ldr	r3, [pc, #28]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005454:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800545e:	4b03      	ldr	r3, [pc, #12]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005466:	e003      	b.n	8005470 <HAL_RCCEx_GetPeriphCLKConfig+0x2f0>
 8005468:	1cfffff1 	.word	0x1cfffff1
 800546c:	40023800 	.word	0x40023800
 8005470:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005472:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <HAL_RCCEx_GetPeriphCLKConfig+0x32c>)
 8005474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005476:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800547a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8005482:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <HAL_RCCEx_GetPeriphCLKConfig+0x32c>)
 8005484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d103      	bne.n	8005498 <HAL_RCCEx_GetPeriphCLKConfig+0x318>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8005496:	e003      	b.n	80054a0 <HAL_RCCEx_GetPeriphCLKConfig+0x320>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800549e:	639a      	str	r2, [r3, #56]	; 0x38
}
 80054a0:	bf00      	nop
 80054a2:	376c      	adds	r7, #108	; 0x6c
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	40023800 	.word	0x40023800

080054b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60bb      	str	r3, [r7, #8]
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054ce:	f040 80a4 	bne.w	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;   
 80054d2:	4ba6      	ldr	r3, [pc, #664]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80054d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80054e0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054e8:	f000 808a 	beq.w	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054f2:	f200 8091 	bhi.w	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054fc:	d07d      	beq.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005504:	f200 8088 	bhi.w	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d004      	beq.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005514:	d039      	beq.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;       
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
    default :
      {
        break;
 8005516:	e07f      	b.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005518:	4b94      	ldr	r3, [pc, #592]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d108      	bne.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005524:	4b91      	ldr	r3, [pc, #580]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800552c:	4a90      	ldr	r2, [pc, #576]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800552e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	e007      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005536:	4b8d      	ldr	r3, [pc, #564]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800553e:	4a8d      	ldr	r2, [pc, #564]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005540:	fbb2 f3f3 	udiv	r3, r2, r3
 8005544:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005546:	4b89      	ldr	r3, [pc, #548]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	0e1b      	lsrs	r3, r3, #24
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005554:	4b85      	ldr	r3, [pc, #532]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555a:	099b      	lsrs	r3, r3, #6
 800555c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	fb03 f202 	mul.w	r2, r3, r2
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800556e:	4b7f      	ldr	r3, [pc, #508]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005574:	0a1b      	lsrs	r3, r3, #8
 8005576:	f003 031f 	and.w	r3, r3, #31
 800557a:	3301      	adds	r3, #1
 800557c:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg); 
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	fbb2 f3f3 	udiv	r3, r2, r3
 8005586:	617b      	str	r3, [r7, #20]
        break;       
 8005588:	e047      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800558a:	4b78      	ldr	r3, [pc, #480]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d108      	bne.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005596:	4b75      	ldr	r3, [pc, #468]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800559e:	4a74      	ldr	r2, [pc, #464]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	e007      	b.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80055a8:	4b70      	ldr	r3, [pc, #448]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b0:	4a70      	ldr	r2, [pc, #448]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80055b8:	4b6c      	ldr	r3, [pc, #432]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80055ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055be:	0e1b      	lsrs	r3, r3, #24
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80055c6:	4b69      	ldr	r3, [pc, #420]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80055c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055cc:	099b      	lsrs	r3, r3, #6
 80055ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	fb03 f202 	mul.w	r2, r3, r2
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	fbb2 f3f3 	udiv	r3, r2, r3
 80055de:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 80055e0:	4b62      	ldr	r3, [pc, #392]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80055e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	3301      	adds	r3, #1
 80055ec:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f6:	617b      	str	r3, [r7, #20]
        break;
 80055f8:	e00f      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 80055fa:	4b5f      	ldr	r3, [pc, #380]	; (8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80055fc:	617b      	str	r3, [r7, #20]
        break;       
 80055fe:	e00c      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005600:	4b5a      	ldr	r3, [pc, #360]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d102      	bne.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800560c:	4b58      	ldr	r3, [pc, #352]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800560e:	617b      	str	r3, [r7, #20]
        break;       
 8005610:	e003      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 8005612:	4b58      	ldr	r3, [pc, #352]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005614:	617b      	str	r3, [r7, #20]
        break;       
 8005616:	e000      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 8005618:	bf00      	nop
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005620:	f040 80ad 	bne.w	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;   
 8005624:	4b51      	ldr	r3, [pc, #324]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800562a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005632:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800563a:	f000 808a 	beq.w	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005644:	f200 809a 	bhi.w	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800564e:	d07d      	beq.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005656:	f200 8091 	bhi.w	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005666:	d039      	beq.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;       
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
    default :
      {
        break;
 8005668:	e088      	b.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800566a:	4b40      	ldr	r3, [pc, #256]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d108      	bne.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005676:	4b3d      	ldr	r3, [pc, #244]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800567e:	4a3c      	ldr	r2, [pc, #240]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	e007      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005688:	4b38      	ldr	r3, [pc, #224]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005690:	4a38      	ldr	r2, [pc, #224]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005692:	fbb2 f3f3 	udiv	r3, r2, r3
 8005696:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005698:	4b34      	ldr	r3, [pc, #208]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569e:	0e1b      	lsrs	r3, r3, #24
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80056a6:	4b31      	ldr	r3, [pc, #196]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ac:	099b      	lsrs	r3, r3, #6
 80056ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	fb03 f202 	mul.w	r2, r3, r2
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80056be:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80056c0:	4b2a      	ldr	r3, [pc, #168]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80056c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056c6:	0a1b      	lsrs	r3, r3, #8
 80056c8:	f003 031f 	and.w	r3, r3, #31
 80056cc:	3301      	adds	r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg); 
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]
        break;       
 80056da:	e050      	b.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80056dc:	4b23      	ldr	r3, [pc, #140]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d108      	bne.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056e8:	4b20      	ldr	r3, [pc, #128]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056f0:	4a1f      	ldr	r2, [pc, #124]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80056f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	e007      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80056fa:	4b1c      	ldr	r3, [pc, #112]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005702:	4a1c      	ldr	r2, [pc, #112]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005704:	fbb2 f3f3 	udiv	r3, r2, r3
 8005708:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800570a:	4b18      	ldr	r3, [pc, #96]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800570c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005710:	0e1b      	lsrs	r3, r3, #24
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005718:	4b14      	ldr	r3, [pc, #80]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800571a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800571e:	099b      	lsrs	r3, r3, #6
 8005720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	fb03 f202 	mul.w	r2, r3, r2
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005730:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8005732:	4b0e      	ldr	r3, [pc, #56]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	3301      	adds	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	617b      	str	r3, [r7, #20]
        break;
 800574a:	e018      	b.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 800574c:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800574e:	617b      	str	r3, [r7, #20]
        break;       
 8005750:	e015      	b.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005752:	4b06      	ldr	r3, [pc, #24]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d102      	bne.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 800575e:	4b04      	ldr	r3, [pc, #16]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005760:	617b      	str	r3, [r7, #20]
        break;       
 8005762:	e00c      	b.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 8005764:	4b03      	ldr	r3, [pc, #12]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005766:	617b      	str	r3, [r7, #20]
        break;       
 8005768:	e009      	b.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800576a:	bf00      	nop
 800576c:	40023800 	.word	0x40023800
 8005770:	00f42400 	.word	0x00f42400
 8005774:	017d7840 	.word	0x017d7840
 8005778:	00bb8000 	.word	0x00bb8000
        break;
 800577c:	bf00      	nop
      }
    }
  }
  
  return frequency;
 800577e:	697b      	ldr	r3, [r7, #20]
}
 8005780:	4618      	mov	r0, r3
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_SAI_Init>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005798:	2300      	movs	r3, #0
 800579a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e14d      	b.n	8005a46 <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f95a 	bl	8005a78 <HAL_SAI_MspInit>
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 facd 	bl	8005d6c <SAI_Disable>
  
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d00c      	beq.n	80057f4 <HAL_SAI_Init+0x68>
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d80d      	bhi.n	80057fa <HAL_SAI_Init+0x6e>
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <HAL_SAI_Init+0x5c>
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d003      	beq.n	80057ee <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80057e6:	e008      	b.n	80057fa <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61fb      	str	r3, [r7, #28]
      break;
 80057ec:	e006      	b.n	80057fc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80057ee:	2310      	movs	r3, #16
 80057f0:	61fb      	str	r3, [r7, #28]
      break;
 80057f2:	e003      	b.n	80057fc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80057f4:	2320      	movs	r3, #32
 80057f6:	61fb      	str	r3, [r7, #28]
      break;
 80057f8:	e000      	b.n	80057fc <HAL_SAI_Init+0x70>
    break;
 80057fa:	bf00      	nop
  }
  
  switch(hsai->Init.Synchro)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d81e      	bhi.n	8005842 <HAL_SAI_Init+0xb6>
 8005804:	a201      	add	r2, pc, #4	; (adr r2, 800580c <HAL_SAI_Init+0x80>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	0800581d 	.word	0x0800581d
 8005810:	08005823 	.word	0x08005823
 8005814:	0800582b 	.word	0x0800582b
 8005818:	08005833 	.word	0x08005833
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]
      }
      break;
 8005820:	e010      	b.n	8005844 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8005822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005826:	617b      	str	r3, [r7, #20]
      }
      break;
 8005828:	e00c      	b.n	8005844 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800582a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800582e:	617b      	str	r3, [r7, #20]
      }
      break;
 8005830:	e008      	b.n	8005844 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005832:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005836:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8005840:	e000      	b.n	8005844 <HAL_SAI_Init+0xb8>
  default:
    break;      
 8005842:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a81      	ldr	r2, [pc, #516]	; (8005a50 <HAL_SAI_Init+0x2c4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d004      	beq.n	8005858 <HAL_SAI_Init+0xcc>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a80      	ldr	r2, [pc, #512]	; (8005a54 <HAL_SAI_Init+0x2c8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d103      	bne.n	8005860 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005858:	4a7f      	ldr	r2, [pc, #508]	; (8005a58 <HAL_SAI_Init+0x2cc>)
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e002      	b.n	8005866 <HAL_SAI_Init+0xda>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 8005860:	4a7e      	ldr	r2, [pc, #504]	; (8005a5c <HAL_SAI_Init+0x2d0>)
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d043      	beq.n	80058f6 <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a76      	ldr	r2, [pc, #472]	; (8005a50 <HAL_SAI_Init+0x2c4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d004      	beq.n	8005886 <HAL_SAI_Init+0xfa>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a74      	ldr	r2, [pc, #464]	; (8005a54 <HAL_SAI_Init+0x2c8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d104      	bne.n	8005890 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005886:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800588a:	f7ff fe11 	bl	80054b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800588e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a72      	ldr	r2, [pc, #456]	; (8005a60 <HAL_SAI_Init+0x2d4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d004      	beq.n	80058a4 <HAL_SAI_Init+0x118>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a71      	ldr	r2, [pc, #452]	; (8005a64 <HAL_SAI_Init+0x2d8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d104      	bne.n	80058ae <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80058a4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80058a8:	f7ff fe02 	bl	80054b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80058ac:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	461a      	mov	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	025b      	lsls	r3, r3, #9
 80058c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4a67      	ldr	r2, [pc, #412]	; (8005a68 <HAL_SAI_Init+0x2dc>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	08da      	lsrs	r2, r3, #3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	621a      	str	r2, [r3, #32]
    
    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80058d4:	68f9      	ldr	r1, [r7, #12]
 80058d6:	4b64      	ldr	r3, [pc, #400]	; (8005a68 <HAL_SAI_Init+0x2dc>)
 80058d8:	fba3 2301 	umull	r2, r3, r3, r1
 80058dc:	08da      	lsrs	r2, r3, #3
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	1aca      	subs	r2, r1, r3
 80058e8:	2a08      	cmp	r2, #8
 80058ea:	d904      	bls.n	80058f6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	621a      	str	r2, [r3, #32]
    }
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_SAI_Init+0x17a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d109      	bne.n	800591a <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_SAI_Init+0x186>
 800590e:	2300      	movs	r3, #0
 8005910:	e001      	b.n	8005916 <HAL_SAI_Init+0x18a>
 8005912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	e008      	b.n	800592c <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <HAL_SAI_Init+0x19c>
 8005922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005926:	e000      	b.n	800592a <HAL_SAI_Init+0x19e>
 8005928:	2300      	movs	r3, #0
 800592a:	61bb      	str	r3, [r7, #24]
  }
  
  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6819      	ldr	r1, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	4b4d      	ldr	r3, [pc, #308]	; (8005a6c <HAL_SAI_Init+0x2e0>)
 8005938:	400b      	ands	r3, r1
 800593a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6819      	ldr	r1, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005950:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	431a      	orrs	r2, r3
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8005964:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005970:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	051b      	lsls	r3, r3, #20
 8005978:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	601a      	str	r2, [r3, #0]
  
  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6859      	ldr	r1, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	4b38      	ldr	r3, [pc, #224]	; (8005a70 <HAL_SAI_Init+0x2e4>)
 800598e:	400b      	ands	r3, r1
 8005990:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6859      	ldr	r1, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699a      	ldr	r2, [r3, #24]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	605a      	str	r2, [r3, #4]
  
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6899      	ldr	r1, [r3, #8]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	4b2e      	ldr	r3, [pc, #184]	; (8005a74 <HAL_SAI_Init+0x2e8>)
 80059bc:	400b      	ands	r3, r1
 80059be:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6899      	ldr	r1, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80059d0:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80059d6:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80059dc:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	3b01      	subs	r3, #1
 80059e4:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80059e6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	609a      	str	r2, [r3, #8]
  
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68d9      	ldr	r1, [r3, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	f24f 0320 	movw	r3, #61472	; 0xf020
 80059fe:	400b      	ands	r3, r1
 8005a00:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68d9      	ldr	r1, [r3, #12]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a10:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40015804 	.word	0x40015804
 8005a54:	40015824 	.word	0x40015824
 8005a58:	40015800 	.word	0x40015800
 8005a5c:	40015c00 	.word	0x40015c00
 8005a60:	40015c04 	.word	0x40015c04
 8005a64:	40015c24 	.word	0x40015c24
 8005a68:	cccccccd 	.word	0xcccccccd
 8005a6c:	ff05c010 	.word	0xff05c010
 8005a70:	ffff1ff0 	.word	0xffff1ff0
 8005a74:	fff88000 	.word	0xfff88000

08005a78 <HAL_SAI_MspInit>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_SAI_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	4613      	mov	r3, r2
 8005a98:	80fb      	strh	r3, [r7, #6]
  if((pData == NULL) || (Size == 0))
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_SAI_Transmit_DMA+0x1a>
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_SAI_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e074      	b.n	8005b94 <HAL_SAI_Transmit_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d16d      	bne.n	8005b92 <HAL_SAI_Transmit_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_SAI_Transmit_DMA+0x38>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e067      	b.n	8005b94 <HAL_SAI_Transmit_DMA+0x108>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	88fa      	ldrh	r2, [r7, #6]
 8005ad6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	88fa      	ldrh	r2, [r7, #6]
 8005ade:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2212      	movs	r2, #18
 8005aee:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005af6:	4a29      	ldr	r2, [pc, #164]	; (8005b9c <HAL_SAI_Transmit_DMA+0x110>)
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005afe:	4a28      	ldr	r2, [pc, #160]	; (8005ba0 <HAL_SAI_Transmit_DMA+0x114>)
 8005b00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b06:	4a27      	ldr	r2, [pc, #156]	; (8005ba4 <HAL_SAI_Transmit_DMA+0x118>)
 8005b08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b0e:	2200      	movs	r2, #0
 8005b10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	331c      	adds	r3, #28
 8005b22:	461a      	mov	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005b2a:	f7fc fd73 	bl	8002614 <HAL_DMA_Start_IT>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <HAL_SAI_Transmit_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e029      	b.n	8005b94 <HAL_SAI_Transmit_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d107      	bne.n	8005b5e <HAL_SAI_Transmit_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005b5c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005b5e:	2100      	movs	r1, #0
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f8cd 	bl	8005d00 <SAI_InterruptFlag>
 8005b66:	4601      	mov	r1, r0
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005b84:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	e000      	b.n	8005b94 <HAL_SAI_Transmit_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005b92:	2302      	movs	r3, #2
  }
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	08005e3d 	.word	0x08005e3d
 8005ba0:	08005dd9 	.word	0x08005dd9
 8005ba4:	08005ed9 	.word	0x08005ed9

08005ba8 <HAL_SAI_Receive_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <HAL_SAI_Receive_DMA+0x1a>
 8005bbc:	88fb      	ldrh	r3, [r7, #6]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e074      	b.n	8005cb0 <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d16d      	bne.n	8005cae <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_SAI_Receive_DMA+0x38>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e067      	b.n	8005cb0 <HAL_SAI_Receive_DMA+0x108>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	88fa      	ldrh	r2, [r7, #6]
 8005bfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2222      	movs	r2, #34	; 0x22
 8005c0a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c12:	4a29      	ldr	r2, [pc, #164]	; (8005cb8 <HAL_SAI_Receive_DMA+0x110>)
 8005c14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1a:	4a28      	ldr	r2, [pc, #160]	; (8005cbc <HAL_SAI_Receive_DMA+0x114>)
 8005c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <HAL_SAI_Receive_DMA+0x118>)
 8005c24:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	331c      	adds	r3, #28
 8005c38:	4619      	mov	r1, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c3e:	461a      	mov	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005c46:	f7fc fce5 	bl	8002614 <HAL_DMA_Start_IT>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e029      	b.n	8005cb0 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d107      	bne.n	8005c7a <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c78:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f83f 	bl	8005d00 <SAI_InterruptFlag>
 8005c82:	4601      	mov	r1, r0
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005ca0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e000      	b.n	8005cb0 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
  }
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	08005ebd 	.word	0x08005ebd
 8005cbc:	08005e59 	.word	0x08005e59
 8005cc0:	08005ed9 	.word	0x08005ed9

08005cc4 <HAL_SAI_TxCpltCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
 __weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_SAI_ErrorCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode: SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]
  
  if(mode == SAI_MODE_IT)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d103      	bne.n	8005d1c <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f043 0308 	orr.w	r3, r3, #8
 8005d1a:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d10b      	bne.n	8005d3c <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d003      	beq.n	8005d34 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d103      	bne.n	8005d3c <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f043 0310 	orr.w	r3, r3, #16
 8005d3a:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d003      	beq.n	8005d4c <SAI_InterruptFlag+0x4c>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d104      	bne.n	8005d56 <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	e003      	b.n	8005d5e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f043 0304 	orr.w	r3, r3, #4
 8005d5c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <SAI_Disable>:
  * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005d6c:	b490      	push	{r4, r7}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005d74:	4b16      	ldr	r3, [pc, #88]	; (8005dd0 <SAI_Disable+0x64>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a16      	ldr	r2, [pc, #88]	; (8005dd4 <SAI_Disable+0x68>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	0b1b      	lsrs	r3, r3, #12
 8005d80:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d94:	601a      	str	r2, [r3, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005d96:	4623      	mov	r3, r4
 8005d98:	1e5c      	subs	r4, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <SAI_Disable+0x48>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005da4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	73fb      	strb	r3, [r7, #15]
      break;
 8005db2:	e006      	b.n	8005dc2 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e9      	bne.n	8005d96 <SAI_Disable+0x2a>

  return status;
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc90      	pop	{r4, r7}
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20000008 	.word	0x20000008
 8005dd4:	95cbec1b 	.word	0x95cbec1b

08005dd8 <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	60fb      	str	r3, [r7, #12]

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d11c      	bne.n	8005e2e <SAI_DMATxCplt+0x56>
  {
    hsai->XferCount = 0;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005e0a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f7ff ff76 	bl	8005d00 <SAI_InterruptFlag>
 8005e14:	4603      	mov	r3, r0
 8005e16:	43d9      	mvns	r1, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	400a      	ands	r2, r1
 8005e24:	611a      	str	r2, [r3, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7ff ff48 	bl	8005cc4 <HAL_SAI_TxCpltCallback>
}
 8005e34:	bf00      	nop
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <SAI_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	60fb      	str	r3, [r7, #12]

  HAL_SAI_TxHalfCpltCallback(hsai);
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f7ff ff44 	bl	8005cd8 <HAL_SAI_TxHalfCpltCallback>
}
 8005e50:	bf00      	nop
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	60fb      	str	r3, [r7, #12]
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d11c      	bne.n	8005eae <SAI_DMARxCplt+0x56>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005e82:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f7ff ff36 	bl	8005d00 <SAI_InterruptFlag>
 8005e94:	4603      	mov	r3, r0
 8005e96:	43d9      	mvns	r1, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691a      	ldr	r2, [r3, #16]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	400a      	ands	r2, r1
 8005ea4:	611a      	str	r2, [r3, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7fa fe9e 	bl	8000bf0 <HAL_SAI_RxCpltCallback>
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	60fb      	str	r3, [r7, #12]

  HAL_SAI_RxHalfCpltCallback(hsai);
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f7fa fe86 	bl	8000bdc <HAL_SAI_RxHalfCpltCallback>
}
 8005ed0:	bf00      	nop
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d004      	beq.n	8005f0a <SAI_DMAError+0x32>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d112      	bne.n	8005f30 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005f18:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f7ff ff26 	bl	8005d6c <SAI_Disable>
    
    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f7ff fedb 	bl	8005cec <HAL_SAI_ErrorCallback>
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <__errno>:
 8005f40:	4b01      	ldr	r3, [pc, #4]	; (8005f48 <__errno+0x8>)
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	20000068 	.word	0x20000068

08005f4c <__libc_init_array>:
 8005f4c:	b570      	push	{r4, r5, r6, lr}
 8005f4e:	4d0d      	ldr	r5, [pc, #52]	; (8005f84 <__libc_init_array+0x38>)
 8005f50:	4c0d      	ldr	r4, [pc, #52]	; (8005f88 <__libc_init_array+0x3c>)
 8005f52:	1b64      	subs	r4, r4, r5
 8005f54:	10a4      	asrs	r4, r4, #2
 8005f56:	2600      	movs	r6, #0
 8005f58:	42a6      	cmp	r6, r4
 8005f5a:	d109      	bne.n	8005f70 <__libc_init_array+0x24>
 8005f5c:	4d0b      	ldr	r5, [pc, #44]	; (8005f8c <__libc_init_array+0x40>)
 8005f5e:	4c0c      	ldr	r4, [pc, #48]	; (8005f90 <__libc_init_array+0x44>)
 8005f60:	f000 fb0e 	bl	8006580 <_init>
 8005f64:	1b64      	subs	r4, r4, r5
 8005f66:	10a4      	asrs	r4, r4, #2
 8005f68:	2600      	movs	r6, #0
 8005f6a:	42a6      	cmp	r6, r4
 8005f6c:	d105      	bne.n	8005f7a <__libc_init_array+0x2e>
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
 8005f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f74:	4798      	blx	r3
 8005f76:	3601      	adds	r6, #1
 8005f78:	e7ee      	b.n	8005f58 <__libc_init_array+0xc>
 8005f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7e:	4798      	blx	r3
 8005f80:	3601      	adds	r6, #1
 8005f82:	e7f2      	b.n	8005f6a <__libc_init_array+0x1e>
 8005f84:	08007e80 	.word	0x08007e80
 8005f88:	08007e80 	.word	0x08007e80
 8005f8c:	08007e80 	.word	0x08007e80
 8005f90:	08007e84 	.word	0x08007e84

08005f94 <checkint>:
 8005f94:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005f98:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	b570      	push	{r4, r5, r6, lr}
 8005fa0:	dd2a      	ble.n	8005ff8 <checkint+0x64>
 8005fa2:	f240 4333 	movw	r3, #1075	; 0x433
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	dc24      	bgt.n	8005ff4 <checkint+0x60>
 8005faa:	1a9b      	subs	r3, r3, r2
 8005fac:	f1a3 0620 	sub.w	r6, r3, #32
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fb4:	fa02 f403 	lsl.w	r4, r2, r3
 8005fb8:	fa02 f606 	lsl.w	r6, r2, r6
 8005fbc:	f1c3 0520 	rsb	r5, r3, #32
 8005fc0:	fa22 f505 	lsr.w	r5, r2, r5
 8005fc4:	4334      	orrs	r4, r6
 8005fc6:	432c      	orrs	r4, r5
 8005fc8:	409a      	lsls	r2, r3
 8005fca:	ea20 0202 	bic.w	r2, r0, r2
 8005fce:	ea21 0404 	bic.w	r4, r1, r4
 8005fd2:	4322      	orrs	r2, r4
 8005fd4:	f1a3 0420 	sub.w	r4, r3, #32
 8005fd8:	f1c3 0220 	rsb	r2, r3, #32
 8005fdc:	d10c      	bne.n	8005ff8 <checkint+0x64>
 8005fde:	40d8      	lsrs	r0, r3
 8005fe0:	fa01 f302 	lsl.w	r3, r1, r2
 8005fe4:	4318      	orrs	r0, r3
 8005fe6:	40e1      	lsrs	r1, r4
 8005fe8:	4308      	orrs	r0, r1
 8005fea:	f000 0001 	and.w	r0, r0, #1
 8005fee:	f1d0 0002 	rsbs	r0, r0, #2
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}
 8005ff4:	2002      	movs	r0, #2
 8005ff6:	e7fc      	b.n	8005ff2 <checkint+0x5e>
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	e7fa      	b.n	8005ff2 <checkint+0x5e>
 8005ffc:	0000      	movs	r0, r0
	...

08006000 <pow>:
 8006000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	ee10 4a90 	vmov	r4, s1
 8006008:	ed2d 8b0a 	vpush	{d8-d12}
 800600c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8006010:	ee11 aa90 	vmov	sl, s3
 8006014:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8006018:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800601c:	429a      	cmp	r2, r3
 800601e:	ee10 5a10 	vmov	r5, s0
 8006022:	ee11 0a10 	vmov	r0, s2
 8006026:	b087      	sub	sp, #28
 8006028:	46c4      	mov	ip, r8
 800602a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800602e:	d806      	bhi.n	800603e <pow+0x3e>
 8006030:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8006034:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8006038:	2b7f      	cmp	r3, #127	; 0x7f
 800603a:	f240 8156 	bls.w	80062ea <pow+0x2ea>
 800603e:	1802      	adds	r2, r0, r0
 8006040:	eb4a 010a 	adc.w	r1, sl, sl
 8006044:	f06f 0b01 	mvn.w	fp, #1
 8006048:	1e57      	subs	r7, r2, #1
 800604a:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 800604e:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 8006052:	45bb      	cmp	fp, r7
 8006054:	eb7e 0303 	sbcs.w	r3, lr, r3
 8006058:	d242      	bcs.n	80060e0 <pow+0xe0>
 800605a:	ea52 0301 	orrs.w	r3, r2, r1
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	d10c      	bne.n	800607e <pow+0x7e>
 8006064:	196d      	adds	r5, r5, r5
 8006066:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800606a:	4164      	adcs	r4, r4
 800606c:	42ab      	cmp	r3, r5
 800606e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006072:	41a3      	sbcs	r3, r4
 8006074:	f0c0 808f 	bcc.w	8006196 <pow+0x196>
 8006078:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800607c:	e02b      	b.n	80060d6 <pow+0xd6>
 800607e:	4ed4      	ldr	r6, [pc, #848]	; (80063d0 <pow+0x3d0>)
 8006080:	42b4      	cmp	r4, r6
 8006082:	bf08      	it	eq
 8006084:	429d      	cmpeq	r5, r3
 8006086:	d109      	bne.n	800609c <pow+0x9c>
 8006088:	1800      	adds	r0, r0, r0
 800608a:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 800608e:	eb4a 0a0a 	adc.w	sl, sl, sl
 8006092:	4283      	cmp	r3, r0
 8006094:	4bcf      	ldr	r3, [pc, #828]	; (80063d4 <pow+0x3d4>)
 8006096:	eb73 030a 	sbcs.w	r3, r3, sl
 800609a:	e7eb      	b.n	8006074 <pow+0x74>
 800609c:	196d      	adds	r5, r5, r5
 800609e:	48ce      	ldr	r0, [pc, #824]	; (80063d8 <pow+0x3d8>)
 80060a0:	4164      	adcs	r4, r4
 80060a2:	42ab      	cmp	r3, r5
 80060a4:	eb70 0604 	sbcs.w	r6, r0, r4
 80060a8:	d375      	bcc.n	8006196 <pow+0x196>
 80060aa:	4281      	cmp	r1, r0
 80060ac:	bf08      	it	eq
 80060ae:	429a      	cmpeq	r2, r3
 80060b0:	d171      	bne.n	8006196 <pow+0x196>
 80060b2:	4aca      	ldr	r2, [pc, #808]	; (80063dc <pow+0x3dc>)
 80060b4:	4294      	cmp	r4, r2
 80060b6:	bf08      	it	eq
 80060b8:	429d      	cmpeq	r5, r3
 80060ba:	d0dd      	beq.n	8006078 <pow+0x78>
 80060bc:	4294      	cmp	r4, r2
 80060be:	ea6f 0a0a 	mvn.w	sl, sl
 80060c2:	bf34      	ite	cc
 80060c4:	2400      	movcc	r4, #0
 80060c6:	2401      	movcs	r4, #1
 80060c8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 80060cc:	4554      	cmp	r4, sl
 80060ce:	f040 81dc 	bne.w	800648a <pow+0x48a>
 80060d2:	ee21 0b01 	vmul.f64	d0, d1, d1
 80060d6:	b007      	add	sp, #28
 80060d8:	ecbd 8b0a 	vpop	{d8-d12}
 80060dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e0:	196f      	adds	r7, r5, r5
 80060e2:	eb44 0904 	adc.w	r9, r4, r4
 80060e6:	1e7a      	subs	r2, r7, #1
 80060e8:	f169 0300 	sbc.w	r3, r9, #0
 80060ec:	4593      	cmp	fp, r2
 80060ee:	eb7e 0303 	sbcs.w	r3, lr, r3
 80060f2:	d225      	bcs.n	8006140 <pow+0x140>
 80060f4:	ee20 0b00 	vmul.f64	d0, d0, d0
 80060f8:	2c00      	cmp	r4, #0
 80060fa:	da13      	bge.n	8006124 <pow+0x124>
 80060fc:	4651      	mov	r1, sl
 80060fe:	f7ff ff49 	bl	8005f94 <checkint>
 8006102:	2801      	cmp	r0, #1
 8006104:	d10e      	bne.n	8006124 <pow+0x124>
 8006106:	eeb1 0b40 	vneg.f64	d0, d0
 800610a:	ea57 0909 	orrs.w	r9, r7, r9
 800610e:	d10b      	bne.n	8006128 <pow+0x128>
 8006110:	f1ba 0f00 	cmp.w	sl, #0
 8006114:	dadf      	bge.n	80060d6 <pow+0xd6>
 8006116:	b007      	add	sp, #28
 8006118:	ecbd 8b0a 	vpop	{d8-d12}
 800611c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006120:	f000 b9ea 	b.w	80064f8 <__math_divzero>
 8006124:	2000      	movs	r0, #0
 8006126:	e7f0      	b.n	800610a <pow+0x10a>
 8006128:	f1ba 0f00 	cmp.w	sl, #0
 800612c:	dad3      	bge.n	80060d6 <pow+0xd6>
 800612e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006132:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8006136:	ed8d 7b00 	vstr	d7, [sp]
 800613a:	ed9d 0b00 	vldr	d0, [sp]
 800613e:	e7ca      	b.n	80060d6 <pow+0xd6>
 8006140:	2c00      	cmp	r4, #0
 8006142:	da2b      	bge.n	800619c <pow+0x19c>
 8006144:	4651      	mov	r1, sl
 8006146:	f7ff ff25 	bl	8005f94 <checkint>
 800614a:	b930      	cbnz	r0, 800615a <pow+0x15a>
 800614c:	b007      	add	sp, #28
 800614e:	ecbd 8b0a 	vpop	{d8-d12}
 8006152:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006156:	f000 b9e7 	b.w	8006528 <__math_invalid>
 800615a:	1e41      	subs	r1, r0, #1
 800615c:	4248      	negs	r0, r1
 800615e:	4148      	adcs	r0, r1
 8006160:	0480      	lsls	r0, r0, #18
 8006162:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006166:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800616a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800616e:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8006172:	2b7f      	cmp	r3, #127	; 0x7f
 8006174:	d92d      	bls.n	80061d2 <pow+0x1d2>
 8006176:	4b96      	ldr	r3, [pc, #600]	; (80063d0 <pow+0x3d0>)
 8006178:	2000      	movs	r0, #0
 800617a:	429c      	cmp	r4, r3
 800617c:	bf08      	it	eq
 800617e:	4285      	cmpeq	r5, r0
 8006180:	f43f af7a 	beq.w	8006078 <pow+0x78>
 8006184:	f240 31bd 	movw	r1, #957	; 0x3bd
 8006188:	428a      	cmp	r2, r1
 800618a:	d80c      	bhi.n	80061a6 <pow+0x1a6>
 800618c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006190:	42a8      	cmp	r0, r5
 8006192:	41a3      	sbcs	r3, r4
 8006194:	d204      	bcs.n	80061a0 <pow+0x1a0>
 8006196:	ee31 0b00 	vadd.f64	d0, d1, d0
 800619a:	e79c      	b.n	80060d6 <pow+0xd6>
 800619c:	2000      	movs	r0, #0
 800619e:	e7e4      	b.n	800616a <pow+0x16a>
 80061a0:	ee30 0b41 	vsub.f64	d0, d0, d1
 80061a4:	e797      	b.n	80060d6 <pow+0xd6>
 80061a6:	2d01      	cmp	r5, #1
 80061a8:	eb74 0303 	sbcs.w	r3, r4, r3
 80061ac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80061b0:	bf34      	ite	cc
 80061b2:	2301      	movcc	r3, #1
 80061b4:	2300      	movcs	r3, #0
 80061b6:	4296      	cmp	r6, r2
 80061b8:	bf8c      	ite	hi
 80061ba:	2600      	movhi	r6, #0
 80061bc:	2601      	movls	r6, #1
 80061be:	42b3      	cmp	r3, r6
 80061c0:	f000 809b 	beq.w	80062fa <pow+0x2fa>
 80061c4:	b007      	add	sp, #28
 80061c6:	ecbd 8b0a 	vpop	{d8-d12}
 80061ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ce:	f000 b98b 	b.w	80064e8 <__math_oflow>
 80061d2:	f1bc 0f00 	cmp.w	ip, #0
 80061d6:	d10b      	bne.n	80061f0 <pow+0x1f0>
 80061d8:	ed9f 7b79 	vldr	d7, [pc, #484]	; 80063c0 <pow+0x3c0>
 80061dc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80061e0:	ec53 2b17 	vmov	r2, r3, d7
 80061e4:	ee17 5a10 	vmov	r5, s14
 80061e8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80061ec:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80061f0:	4b7b      	ldr	r3, [pc, #492]	; (80063e0 <pow+0x3e0>)
 80061f2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80061f6:	4423      	add	r3, r4
 80061f8:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80061fc:	1519      	asrs	r1, r3, #20
 80061fe:	0d1b      	lsrs	r3, r3, #20
 8006200:	051b      	lsls	r3, r3, #20
 8006202:	1ae7      	subs	r7, r4, r3
 8006204:	4b77      	ldr	r3, [pc, #476]	; (80063e4 <pow+0x3e4>)
 8006206:	ee03 1a10 	vmov	s6, r1
 800620a:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800620e:	1e2e      	subs	r6, r5, #0
 8006210:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8006214:	ec47 6b15 	vmov	d5, r6, r7
 8006218:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800621c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8006220:	ed93 7b00 	vldr	d7, [r3]
 8006224:	ed93 5b02 	vldr	d5, [r3, #8]
 8006228:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800622c:	eea3 2b07 	vfma.f64	d2, d3, d7
 8006230:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8006234:	ee36 4b02 	vadd.f64	d4, d6, d2
 8006238:	ee32 2b44 	vsub.f64	d2, d2, d4
 800623c:	eea3 7b05 	vfma.f64	d7, d3, d5
 8006240:	ed93 5b04 	vldr	d5, [r3, #16]
 8006244:	ee32 2b06 	vadd.f64	d2, d2, d6
 8006248:	ee37 7b02 	vadd.f64	d7, d7, d2
 800624c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8006250:	ee26 0b05 	vmul.f64	d0, d6, d5
 8006254:	ee34 8b00 	vadd.f64	d8, d4, d0
 8006258:	eeb0 9b40 	vmov.f64	d9, d0
 800625c:	ee34 4b48 	vsub.f64	d4, d4, d8
 8006260:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8006264:	ee34 ab00 	vadd.f64	d10, d4, d0
 8006268:	ed93 5b06 	vldr	d5, [r3, #24]
 800626c:	ee26 bb00 	vmul.f64	d11, d6, d0
 8006270:	ee37 7b09 	vadd.f64	d7, d7, d9
 8006274:	ed93 4b08 	vldr	d4, [r3, #32]
 8006278:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800627c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8006280:	eea6 5b04 	vfma.f64	d5, d6, d4
 8006284:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8006288:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800628c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8006290:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8006294:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8006298:	eea0 4b03 	vfma.f64	d4, d0, d3
 800629c:	eea0 5b04 	vfma.f64	d5, d0, d4
 80062a0:	eeab 7b05 	vfma.f64	d7, d11, d5
 80062a4:	ee38 4b07 	vadd.f64	d4, d8, d7
 80062a8:	ee21 6b04 	vmul.f64	d6, d1, d4
 80062ac:	ee16 3a90 	vmov	r3, s13
 80062b0:	eeb0 5b46 	vmov.f64	d5, d6
 80062b4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80062b8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80062bc:	18b2      	adds	r2, r6, r2
 80062be:	2a3e      	cmp	r2, #62	; 0x3e
 80062c0:	ee91 5b04 	vfnms.f64	d5, d1, d4
 80062c4:	ee38 8b44 	vsub.f64	d8, d8, d4
 80062c8:	ee38 8b07 	vadd.f64	d8, d8, d7
 80062cc:	eea1 5b08 	vfma.f64	d5, d1, d8
 80062d0:	d91b      	bls.n	800630a <pow+0x30a>
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	da0b      	bge.n	80062ee <pow+0x2ee>
 80062d6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80062da:	ee36 0b00 	vadd.f64	d0, d6, d0
 80062de:	2800      	cmp	r0, #0
 80062e0:	f43f aef9 	beq.w	80060d6 <pow+0xd6>
 80062e4:	eeb1 0b40 	vneg.f64	d0, d0
 80062e8:	e6f5      	b.n	80060d6 <pow+0xd6>
 80062ea:	2000      	movs	r0, #0
 80062ec:	e780      	b.n	80061f0 <pow+0x1f0>
 80062ee:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 80062f2:	d909      	bls.n	8006308 <pow+0x308>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f6bf af65 	bge.w	80061c4 <pow+0x1c4>
 80062fa:	b007      	add	sp, #28
 80062fc:	ecbd 8b0a 	vpop	{d8-d12}
 8006300:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006304:	f000 b8e8 	b.w	80064d8 <__math_uflow>
 8006308:	2600      	movs	r6, #0
 800630a:	4937      	ldr	r1, [pc, #220]	; (80063e8 <pow+0x3e8>)
 800630c:	ed91 4b02 	vldr	d4, [r1, #8]
 8006310:	ed91 3b00 	vldr	d3, [r1]
 8006314:	eeb0 7b44 	vmov.f64	d7, d4
 8006318:	eea6 7b03 	vfma.f64	d7, d6, d3
 800631c:	ee17 5a10 	vmov	r5, s14
 8006320:	ee37 7b44 	vsub.f64	d7, d7, d4
 8006324:	ed91 4b04 	vldr	d4, [r1, #16]
 8006328:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800632c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8006330:	ed91 4b06 	vldr	d4, [r1, #24]
 8006334:	18dc      	adds	r4, r3, r3
 8006336:	f104 030f 	add.w	r3, r4, #15
 800633a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800633e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8006342:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8006346:	ee35 5b06 	vadd.f64	d5, d5, d6
 800634a:	ee25 6b05 	vmul.f64	d6, d5, d5
 800634e:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8006352:	ed91 4b08 	vldr	d4, [r1, #32]
 8006356:	ee35 7b07 	vadd.f64	d7, d5, d7
 800635a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800635e:	eea5 4b03 	vfma.f64	d4, d5, d3
 8006362:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8006366:	eea6 7b04 	vfma.f64	d7, d6, d4
 800636a:	ee26 6b06 	vmul.f64	d6, d6, d6
 800636e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8006372:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8006376:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800637a:	eea5 4b03 	vfma.f64	d4, d5, d3
 800637e:	1940      	adds	r0, r0, r5
 8006380:	2700      	movs	r7, #0
 8006382:	eb17 020c 	adds.w	r2, r7, ip
 8006386:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800638a:	eea6 7b04 	vfma.f64	d7, d6, d4
 800638e:	2e00      	cmp	r6, #0
 8006390:	d176      	bne.n	8006480 <pow+0x480>
 8006392:	42bd      	cmp	r5, r7
 8006394:	db2a      	blt.n	80063ec <pow+0x3ec>
 8006396:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800639a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800639e:	4610      	mov	r0, r2
 80063a0:	ec41 0b10 	vmov	d0, r0, r1
 80063a4:	eea7 0b00 	vfma.f64	d0, d7, d0
 80063a8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80063c8 <pow+0x3c8>
 80063ac:	ee20 0b07 	vmul.f64	d0, d0, d7
 80063b0:	b007      	add	sp, #28
 80063b2:	ecbd 8b0a 	vpop	{d8-d12}
 80063b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ba:	f000 b8cd 	b.w	8006558 <__math_check_oflow>
 80063be:	bf00      	nop
 80063c0:	00000000 	.word	0x00000000
 80063c4:	43300000 	.word	0x43300000
 80063c8:	00000000 	.word	0x00000000
 80063cc:	7f000000 	.word	0x7f000000
 80063d0:	3ff00000 	.word	0x3ff00000
 80063d4:	fff00000 	.word	0xfff00000
 80063d8:	ffe00000 	.word	0xffe00000
 80063dc:	7fe00000 	.word	0x7fe00000
 80063e0:	c0196aab 	.word	0xc0196aab
 80063e4:	080065c8 	.word	0x080065c8
 80063e8:	08007610 	.word	0x08007610
 80063ec:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80063f0:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80063f4:	4610      	mov	r0, r2
 80063f6:	ec41 0b15 	vmov	d5, r0, r1
 80063fa:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 80063fe:	ee27 6b05 	vmul.f64	d6, d7, d5
 8006402:	ee35 7b06 	vadd.f64	d7, d5, d6
 8006406:	eeb0 4bc7 	vabs.f64	d4, d7
 800640a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800640e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006412:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8006490 <pow+0x490>
 8006416:	d52a      	bpl.n	800646e <pow+0x46e>
 8006418:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800641c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006424:	ee35 5b06 	vadd.f64	d5, d5, d6
 8006428:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800642c:	bf58      	it	pl
 800642e:	eeb0 4b43 	vmovpl.f64	d4, d3
 8006432:	ee37 3b04 	vadd.f64	d3, d7, d4
 8006436:	ee34 6b43 	vsub.f64	d6, d4, d3
 800643a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800643e:	ee36 6b05 	vadd.f64	d6, d6, d5
 8006442:	ee36 6b03 	vadd.f64	d6, d6, d3
 8006446:	ee36 7b44 	vsub.f64	d7, d6, d4
 800644a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800644e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006452:	d104      	bne.n	800645e <pow+0x45e>
 8006454:	4632      	mov	r2, r6
 8006456:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800645a:	ec43 2b17 	vmov	d7, r2, r3
 800645e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006462:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006466:	ee26 6b00 	vmul.f64	d6, d6, d0
 800646a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800646e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8006472:	b007      	add	sp, #28
 8006474:	ecbd 8b0a 	vpop	{d8-d12}
 8006478:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	f000 b863 	b.w	8006546 <__math_check_uflow>
 8006480:	ec43 2b10 	vmov	d0, r2, r3
 8006484:	eea7 0b00 	vfma.f64	d0, d7, d0
 8006488:	e625      	b.n	80060d6 <pow+0xd6>
 800648a:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8006498 <pow+0x498>
 800648e:	e622      	b.n	80060d6 <pow+0xd6>
 8006490:	00000000 	.word	0x00000000
 8006494:	00100000 	.word	0x00100000
	...

080064a0 <with_errno>:
 80064a0:	b513      	push	{r0, r1, r4, lr}
 80064a2:	4604      	mov	r4, r0
 80064a4:	ed8d 0b00 	vstr	d0, [sp]
 80064a8:	f7ff fd4a 	bl	8005f40 <__errno>
 80064ac:	ed9d 0b00 	vldr	d0, [sp]
 80064b0:	6004      	str	r4, [r0, #0]
 80064b2:	b002      	add	sp, #8
 80064b4:	bd10      	pop	{r4, pc}

080064b6 <xflow>:
 80064b6:	b082      	sub	sp, #8
 80064b8:	b158      	cbz	r0, 80064d2 <xflow+0x1c>
 80064ba:	eeb1 7b40 	vneg.f64	d7, d0
 80064be:	ed8d 7b00 	vstr	d7, [sp]
 80064c2:	ed9d 7b00 	vldr	d7, [sp]
 80064c6:	2022      	movs	r0, #34	; 0x22
 80064c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80064cc:	b002      	add	sp, #8
 80064ce:	f7ff bfe7 	b.w	80064a0 <with_errno>
 80064d2:	eeb0 7b40 	vmov.f64	d7, d0
 80064d6:	e7f2      	b.n	80064be <xflow+0x8>

080064d8 <__math_uflow>:
 80064d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80064e0 <__math_uflow+0x8>
 80064dc:	f7ff bfeb 	b.w	80064b6 <xflow>
 80064e0:	00000000 	.word	0x00000000
 80064e4:	10000000 	.word	0x10000000

080064e8 <__math_oflow>:
 80064e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80064f0 <__math_oflow+0x8>
 80064ec:	f7ff bfe3 	b.w	80064b6 <xflow>
 80064f0:	00000000 	.word	0x00000000
 80064f4:	70000000 	.word	0x70000000

080064f8 <__math_divzero>:
 80064f8:	b082      	sub	sp, #8
 80064fa:	2800      	cmp	r0, #0
 80064fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006500:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8006504:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8006508:	ed8d 7b00 	vstr	d7, [sp]
 800650c:	ed9d 0b00 	vldr	d0, [sp]
 8006510:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8006520 <__math_divzero+0x28>
 8006514:	2022      	movs	r0, #34	; 0x22
 8006516:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800651a:	b002      	add	sp, #8
 800651c:	f7ff bfc0 	b.w	80064a0 <with_errno>
	...

08006528 <__math_invalid>:
 8006528:	eeb0 7b40 	vmov.f64	d7, d0
 800652c:	eeb4 7b47 	vcmp.f64	d7, d7
 8006530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006534:	ee30 6b40 	vsub.f64	d6, d0, d0
 8006538:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800653c:	d602      	bvs.n	8006544 <__math_invalid+0x1c>
 800653e:	2021      	movs	r0, #33	; 0x21
 8006540:	f7ff bfae 	b.w	80064a0 <with_errno>
 8006544:	4770      	bx	lr

08006546 <__math_check_uflow>:
 8006546:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800654a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800654e:	d102      	bne.n	8006556 <__math_check_uflow+0x10>
 8006550:	2022      	movs	r0, #34	; 0x22
 8006552:	f7ff bfa5 	b.w	80064a0 <with_errno>
 8006556:	4770      	bx	lr

08006558 <__math_check_oflow>:
 8006558:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8006578 <__math_check_oflow+0x20>
 800655c:	eeb0 7bc0 	vabs.f64	d7, d0
 8006560:	eeb4 7b46 	vcmp.f64	d7, d6
 8006564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006568:	dd02      	ble.n	8006570 <__math_check_oflow+0x18>
 800656a:	2022      	movs	r0, #34	; 0x22
 800656c:	f7ff bf98 	b.w	80064a0 <with_errno>
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	f3af 8000 	nop.w
 8006578:	ffffffff 	.word	0xffffffff
 800657c:	7fefffff 	.word	0x7fefffff

08006580 <_init>:
 8006580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006582:	bf00      	nop
 8006584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006586:	bc08      	pop	{r3}
 8006588:	469e      	mov	lr, r3
 800658a:	4770      	bx	lr

0800658c <_fini>:
 800658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658e:	bf00      	nop
 8006590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006592:	bc08      	pop	{r3}
 8006594:	469e      	mov	lr, r3
 8006596:	4770      	bx	lr
