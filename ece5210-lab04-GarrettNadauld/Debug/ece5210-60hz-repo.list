
ece5210-60hz-repo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eb4  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080060ac  080060ac  000160ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d8  080060d8  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080060d8  080060d8  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060d8  080060d8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060dc  080060dc  000160dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080060e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000525c  20000028  08006108  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005284  08006108  00025284  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c176  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000222f  00000000  00000000  0002c20f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  0002e440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000870  00000000  00000000  0002ef60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002deb0  00000000  00000000  0002f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f68e  00000000  00000000  0005d680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010d502  00000000  00000000  0006cd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002be8  00000000  00000000  0017a210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0017cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000028 	.word	0x20000028
 8000214:	00000000 	.word	0x00000000
 8000218:	08006094 	.word	0x08006094

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000002c 	.word	0x2000002c
 8000234:	08006094 	.word	0x08006094

08000238 <fir>:
float x[2] = {0.0f};
int cnt = 0;
float buffer[NUM_TAPS] = {0.0f};
uint16_t buffer_index = 0;

float fir(float sample_in, float *b, uint16_t len_b){
 8000238:	b480      	push	{r7}
 800023a:	b089      	sub	sp, #36	; 0x24
 800023c:	af00      	add	r7, sp, #0
 800023e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000242:	60b8      	str	r0, [r7, #8]
 8000244:	460b      	mov	r3, r1
 8000246:	80fb      	strh	r3, [r7, #6]

    float sample_out_f = 0.0f; // Output sample
 8000248:	f04f 0300 	mov.w	r3, #0
 800024c:	61fb      	str	r3, [r7, #28]

    buffer[buffer_index] = sample_in;
 800024e:	4b24      	ldr	r3, [pc, #144]	; (80002e0 <fir+0xa8>)
 8000250:	881b      	ldrh	r3, [r3, #0]
 8000252:	4a24      	ldr	r2, [pc, #144]	; (80002e4 <fir+0xac>)
 8000254:	009b      	lsls	r3, r3, #2
 8000256:	4413      	add	r3, r2
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	601a      	str	r2, [r3, #0]

    for(uint16_t n = 0; n < len_b; n++) {
 800025c:	2300      	movs	r3, #0
 800025e:	837b      	strh	r3, [r7, #26]
 8000260:	e024      	b.n	80002ac <fir+0x74>
    	int k = (buffer_index + len_b - n) % len_b;
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <fir+0xa8>)
 8000264:	881b      	ldrh	r3, [r3, #0]
 8000266:	461a      	mov	r2, r3
 8000268:	88fb      	ldrh	r3, [r7, #6]
 800026a:	441a      	add	r2, r3
 800026c:	8b7b      	ldrh	r3, [r7, #26]
 800026e:	1ad3      	subs	r3, r2, r3
 8000270:	88fa      	ldrh	r2, [r7, #6]
 8000272:	fb93 f1f2 	sdiv	r1, r3, r2
 8000276:	fb01 f202 	mul.w	r2, r1, r2
 800027a:	1a9b      	subs	r3, r3, r2
 800027c:	617b      	str	r3, [r7, #20]
        sample_out_f += b[n] * buffer[k];
 800027e:	8b7b      	ldrh	r3, [r7, #26]
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	68ba      	ldr	r2, [r7, #8]
 8000284:	4413      	add	r3, r2
 8000286:	ed93 7a00 	vldr	s14, [r3]
 800028a:	4a16      	ldr	r2, [pc, #88]	; (80002e4 <fir+0xac>)
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	4413      	add	r3, r2
 8000292:	edd3 7a00 	vldr	s15, [r3]
 8000296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800029a:	ed97 7a07 	vldr	s14, [r7, #28]
 800029e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002a2:	edc7 7a07 	vstr	s15, [r7, #28]
    for(uint16_t n = 0; n < len_b; n++) {
 80002a6:	8b7b      	ldrh	r3, [r7, #26]
 80002a8:	3301      	adds	r3, #1
 80002aa:	837b      	strh	r3, [r7, #26]
 80002ac:	8b7a      	ldrh	r2, [r7, #26]
 80002ae:	88fb      	ldrh	r3, [r7, #6]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d3d6      	bcc.n	8000262 <fir+0x2a>
    }

    buffer_index = (buffer_index + 1) % len_b;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <fir+0xa8>)
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	3301      	adds	r3, #1
 80002ba:	88fa      	ldrh	r2, [r7, #6]
 80002bc:	fb93 f1f2 	sdiv	r1, r3, r2
 80002c0:	fb01 f202 	mul.w	r2, r1, r2
 80002c4:	1a9b      	subs	r3, r3, r2
 80002c6:	b29a      	uxth	r2, r3
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <fir+0xa8>)
 80002ca:	801a      	strh	r2, [r3, #0]

    return sample_out_f;
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	ee07 3a90 	vmov	s15, r3
}
 80002d2:	eeb0 0a67 	vmov.f32	s0, s15
 80002d6:	3724      	adds	r7, #36	; 0x24
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	2000005c 	.word	0x2000005c
 80002e4:	20000050 	.word	0x20000050

080002e8 <process_sample>:

int16_t process_sample(int16_t sample_in){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	80fb      	strh	r3, [r7, #6]
    h[1] = (float)(-2.0*(float)cos((float)(120.0/480.0 * M_PI)));
 80002f2:	4b4d      	ldr	r3, [pc, #308]	; (8000428 <process_sample+0x140>)
 80002f4:	4a4d      	ldr	r2, [pc, #308]	; (800042c <process_sample+0x144>)
 80002f6:	605a      	str	r2, [r3, #4]
    float sample_in_f = (float)sample_in;
 80002f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002fc:	ee07 3a90 	vmov	s15, r3
 8000300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000304:	edc7 7a04 	vstr	s15, [r7, #16]
    float sample_out_f = 0;
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	617b      	str	r3, [r7, #20]

    if(cnt==0){
 800030e:	4b48      	ldr	r3, [pc, #288]	; (8000430 <process_sample+0x148>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d13b      	bne.n	800038e <process_sample+0xa6>
    	x[0] = x[1];
 8000316:	4b47      	ldr	r3, [pc, #284]	; (8000434 <process_sample+0x14c>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	4a46      	ldr	r2, [pc, #280]	; (8000434 <process_sample+0x14c>)
 800031c:	6013      	str	r3, [r2, #0]
    	x[1] = fir(sample_in_f, h, NUM_TAPS);
 800031e:	2103      	movs	r1, #3
 8000320:	4841      	ldr	r0, [pc, #260]	; (8000428 <process_sample+0x140>)
 8000322:	ed97 0a04 	vldr	s0, [r7, #16]
 8000326:	f7ff ff87 	bl	8000238 <fir>
 800032a:	eef0 7a40 	vmov.f32	s15, s0
 800032e:	4b41      	ldr	r3, [pc, #260]	; (8000434 <process_sample+0x14c>)
 8000330:	edc3 7a01 	vstr	s15, [r3, #4]
    	sample_out_f = (x[0] + (float)((float)(cnt+1.0) * ((x[1]-x[0])/100.0)));
 8000334:	4b3f      	ldr	r3, [pc, #252]	; (8000434 <process_sample+0x14c>)
 8000336:	edd3 3a00 	vldr	s7, [r3]
 800033a:	4b3d      	ldr	r3, [pc, #244]	; (8000430 <process_sample+0x148>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	ee07 3a90 	vmov	s15, r3
 8000342:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000346:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800034a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800034e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000352:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000356:	4b37      	ldr	r3, [pc, #220]	; (8000434 <process_sample+0x14c>)
 8000358:	ed93 7a01 	vldr	s14, [r3, #4]
 800035c:	4b35      	ldr	r3, [pc, #212]	; (8000434 <process_sample+0x14c>)
 800035e:	edd3 7a00 	vldr	s15, [r3]
 8000362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000366:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800036a:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8000420 <process_sample+0x138>
 800036e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000372:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000376:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800037a:	ee73 7aa7 	vadd.f32	s15, s7, s15
 800037e:	edc7 7a05 	vstr	s15, [r7, #20]
    	cnt += 1;
 8000382:	4b2b      	ldr	r3, [pc, #172]	; (8000430 <process_sample+0x148>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	3301      	adds	r3, #1
 8000388:	4a29      	ldr	r2, [pc, #164]	; (8000430 <process_sample+0x148>)
 800038a:	6013      	str	r3, [r2, #0]
 800038c:	e039      	b.n	8000402 <process_sample+0x11a>
    }
    else{
   	   	sample_out_f = (x[0] + (float)((float)(cnt+1.0) * ((x[1]-x[0])/100.0)));
 800038e:	4b29      	ldr	r3, [pc, #164]	; (8000434 <process_sample+0x14c>)
 8000390:	edd3 3a00 	vldr	s7, [r3]
 8000394:	4b26      	ldr	r3, [pc, #152]	; (8000430 <process_sample+0x148>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	ee07 3a90 	vmov	s15, r3
 800039c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80003a0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80003a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80003a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80003ac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80003b0:	4b20      	ldr	r3, [pc, #128]	; (8000434 <process_sample+0x14c>)
 80003b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80003b6:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <process_sample+0x14c>)
 80003b8:	edd3 7a00 	vldr	s15, [r3]
 80003bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80003c0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80003c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8000420 <process_sample+0x138>
 80003c8:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80003cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80003d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80003d4:	ee73 7aa7 	vadd.f32	s15, s7, s15
 80003d8:	edc7 7a05 	vstr	s15, [r7, #20]
       	cnt += 1;
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <process_sample+0x148>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	3301      	adds	r3, #1
 80003e2:	4a13      	ldr	r2, [pc, #76]	; (8000430 <process_sample+0x148>)
 80003e4:	6013      	str	r3, [r2, #0]
    	cnt = cnt % 100;
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <process_sample+0x148>)
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <process_sample+0x150>)
 80003ec:	fb83 1302 	smull	r1, r3, r3, r2
 80003f0:	1159      	asrs	r1, r3, #5
 80003f2:	17d3      	asrs	r3, r2, #31
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	2164      	movs	r1, #100	; 0x64
 80003f8:	fb01 f303 	mul.w	r3, r1, r3
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <process_sample+0x148>)
 8000400:	6013      	str	r3, [r2, #0]
    }

    int16_t sample_out = (int16_t)sample_out_f;
 8000402:	edd7 7a05 	vldr	s15, [r7, #20]
 8000406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800040a:	ee17 3a90 	vmov	r3, s15
 800040e:	81fb      	strh	r3, [r7, #14]
    return sample_out;
 8000410:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000414:	4618      	mov	r0, r3
 8000416:	3718      	adds	r7, #24
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	f3af 8000 	nop.w
 8000420:	00000000 	.word	0x00000000
 8000424:	40590000 	.word	0x40590000
 8000428:	20000000 	.word	0x20000000
 800042c:	bfb504f3 	.word	0xbfb504f3
 8000430:	2000004c 	.word	0x2000004c
 8000434:	20000044 	.word	0x20000044
 8000438:	51eb851f 	.word	0x51eb851f

0800043c <main>:
#include "myaudio.h"

void SystemClock_Config(void);

int main(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000440:	f001 fee1 	bl	8002206 <HAL_Init>

  BSP_LED_Init(LED_RED);
 8000444:	2000      	movs	r0, #0
 8000446:	f001 fd03 	bl	8001e50 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800044a:	2001      	movs	r0, #1
 800044c:	f001 fd00 	bl	8001e50 <BSP_LED_Init>
  BSP_LED_Off(LED_RED);
 8000450:	2000      	movs	r0, #0
 8000452:	f001 fd47 	bl	8001ee4 <BSP_LED_Off>
  BSP_LED_On(LED_GREEN);
 8000456:	2001      	movs	r0, #1
 8000458:	f001 fd2a 	bl	8001eb0 <BSP_LED_On>

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f804 	bl	8000468 <SystemClock_Config>

  audio_init();
 8000460:	f000 f8b4 	bl	80005cc <audio_init>
  while (1)
 8000464:	e7fe      	b.n	8000464 <main+0x28>
	...

08000468 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b0b8      	sub	sp, #224	; 0xe0
 800046c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b4f      	ldr	r3, [pc, #316]	; (80005ac <SystemClock_Config+0x144>)
 8000470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000472:	4a4e      	ldr	r2, [pc, #312]	; (80005ac <SystemClock_Config+0x144>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000478:	6413      	str	r3, [r2, #64]	; 0x40
 800047a:	4b4c      	ldr	r3, [pc, #304]	; (80005ac <SystemClock_Config+0x144>)
 800047c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800047e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000486:	4b4a      	ldr	r3, [pc, #296]	; (80005b0 <SystemClock_Config+0x148>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a49      	ldr	r2, [pc, #292]	; (80005b0 <SystemClock_Config+0x148>)
 800048c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000490:	6013      	str	r3, [r2, #0]
 8000492:	4b47      	ldr	r3, [pc, #284]	; (80005b0 <SystemClock_Config+0x148>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800049e:	2301      	movs	r3, #1
 80004a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ac:	2302      	movs	r3, #2
 80004ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80004ba:	2319      	movs	r3, #25
 80004bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 80004c0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80004c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004c8:	2302      	movs	r3, #2
 80004ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80004ce:	2304      	movs	r3, #4
 80004d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80004d8:	4618      	mov	r0, r3
 80004da:	f003 f9d3 	bl	8003884 <HAL_RCC_OscConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d003      	beq.n	80004ec <SystemClock_Config+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 80004e4:	215f      	movs	r1, #95	; 0x5f
 80004e6:	4833      	ldr	r0, [pc, #204]	; (80005b4 <SystemClock_Config+0x14c>)
 80004e8:	f000 f86a 	bl	80005c0 <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80004ec:	f003 f97a 	bl	80037e4 <HAL_PWREx_EnableOverDrive>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d003      	beq.n	80004fe <SystemClock_Config+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 80004f6:	2166      	movs	r1, #102	; 0x66
 80004f8:	482e      	ldr	r0, [pc, #184]	; (80005b4 <SystemClock_Config+0x14c>)
 80004fa:	f000 f861 	bl	80005c0 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fe:	230f      	movs	r3, #15
 8000500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000504:	2302      	movs	r3, #2
 8000506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000510:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000514:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800051c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000520:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000524:	2107      	movs	r1, #7
 8000526:	4618      	mov	r0, r3
 8000528:	f003 fc64 	bl	8003df4 <HAL_RCC_ClockConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d003      	beq.n	800053a <SystemClock_Config+0xd2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000532:	2174      	movs	r1, #116	; 0x74
 8000534:	481f      	ldr	r0, [pc, #124]	; (80005b4 <SystemClock_Config+0x14c>)
 8000536:	f000 f843 	bl	80005c0 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 800053a:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <SystemClock_Config+0x150>)
 800053c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800053e:	23c0      	movs	r3, #192	; 0xc0
 8000540:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000542:	2302      	movs	r3, #2
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8000546:	2303      	movs	r3, #3
 8000548:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800054a:	2300      	movs	r3, #0
 800054c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000552:	2300      	movs	r3, #0
 8000554:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000556:	2300      	movs	r3, #0
 8000558:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800055a:	2300      	movs	r3, #0
 800055c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800055e:	2300      	movs	r3, #0
 8000560:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	4618      	mov	r0, r3
 800056a:	f003 fdcf 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d003      	beq.n	800057c <SystemClock_Config+0x114>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000574:	2184      	movs	r1, #132	; 0x84
 8000576:	480f      	ldr	r0, [pc, #60]	; (80005b4 <SystemClock_Config+0x14c>)
 8000578:	f000 f822 	bl	80005c0 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800057c:	f003 fdba 	bl	80040f4 <HAL_RCC_GetHCLKFreq>
 8000580:	4603      	mov	r3, r0
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <SystemClock_Config+0x154>)
 8000584:	fba2 2303 	umull	r2, r3, r2, r3
 8000588:	099b      	lsrs	r3, r3, #6
 800058a:	4618      	mov	r0, r3
 800058c:	f001 ff97 	bl	80024be <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000590:	2004      	movs	r0, #4
 8000592:	f001 ffa1 	bl	80024d8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800059e:	f001 ff64 	bl	800246a <HAL_NVIC_SetPriority>
}
 80005a2:	bf00      	nop
 80005a4:	37e0      	adds	r7, #224	; 0xe0
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40007000 	.word	0x40007000
 80005b4:	080060ac 	.word	0x080060ac
 80005b8:	08080040 	.word	0x08080040
 80005bc:	10624dd3 	.word	0x10624dd3

080005c0 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 80005ca:	e7fe      	b.n	80005ca <_Error_Handler+0xa>

080005cc <audio_init>:
///////////////////////////////////////////////////////////



void audio_init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    haudio_out_sai.Instance = SAI1_Block_A;
 80005d0:	4b37      	ldr	r3, [pc, #220]	; (80006b0 <audio_init+0xe4>)
 80005d2:	4a38      	ldr	r2, [pc, #224]	; (80006b4 <audio_init+0xe8>)
 80005d4:	601a      	str	r2, [r3, #0]
    haudio_in_sai.Instance = SAI1_Block_B;
 80005d6:	4b38      	ldr	r3, [pc, #224]	; (80006b8 <audio_init+0xec>)
 80005d8:	4a38      	ldr	r2, [pc, #224]	; (80006bc <audio_init+0xf0>)
 80005da:	601a      	str	r2, [r3, #0]

    fill_buffer_with_square_wave(playbackBuffer,
 80005dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e0:	4837      	ldr	r0, [pc, #220]	; (80006c0 <audio_init+0xf4>)
 80005e2:	f000 f883 	bl	80006ec <fill_buffer_with_square_wave>
                                 MY_BUFFER_SIZE_SAMPLES);

    ConvertSampleBufferToDMABuffer(playbackBuffer,
 80005e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ea:	4a36      	ldr	r2, [pc, #216]	; (80006c4 <audio_init+0xf8>)
 80005ec:	4934      	ldr	r1, [pc, #208]	; (80006c0 <audio_init+0xf4>)
 80005ee:	4834      	ldr	r0, [pc, #208]	; (80006c0 <audio_init+0xf4>)
 80005f0:	f000 f8b4 	bl	800075c <ConvertSampleBufferToDMABuffer>
                                   playbackBuffer,
                                   saiDMATransmitBuffer,
                                   MY_BUFFER_SIZE_SAMPLES);

    My_SAI_ClockConfig(frequency);
 80005f4:	4b34      	ldr	r3, [pc, #208]	; (80006c8 <audio_init+0xfc>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f925 	bl	8000848 <My_SAI_ClockConfig>

    My_AUDIO_OUT_MspInit();
 80005fe:	f000 f965 	bl	80008cc <My_AUDIO_OUT_MspInit>
    My_SAI_Out_Init(frequency);
 8000602:	4b31      	ldr	r3, [pc, #196]	; (80006c8 <audio_init+0xfc>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f9fc 	bl	8000a04 <My_SAI_Out_Init>

    My_AUDIO_IN_MspInit();
 800060c:	f000 fa62 	bl	8000ad4 <My_AUDIO_IN_MspInit>
    My_SAI_In_Init(frequency);
 8000610:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <audio_init+0xfc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fae3 	bl	8000be0 <My_SAI_In_Init>

    wm8994_Init(AUDIO_I2C_ADDRESS,
 800061a:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <audio_init+0x100>)
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <audio_init+0xfc>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f240 3102 	movw	r1, #770	; 0x302
 8000626:	2034      	movs	r0, #52	; 0x34
 8000628:	f000 fc24 	bl	8000e74 <wm8994_Init>
                INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_HEADPHONE,
                volume, frequency);
    
    HAL_SAI_Transmit_DMA(&haudio_out_sai,
 800062c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000630:	4924      	ldr	r1, [pc, #144]	; (80006c4 <audio_init+0xf8>)
 8000632:	481f      	ldr	r0, [pc, #124]	; (80006b0 <audio_init+0xe4>)
 8000634:	f005 fab0 	bl	8005b98 <HAL_SAI_Transmit_DMA>
                         (uint8_t*) saiDMATransmitBuffer,
                         MY_DMA_BUFFER_SIZE_MSIZES);
    HAL_SAI_Receive_DMA(&haudio_in_sai,
 8000638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800063c:	4924      	ldr	r1, [pc, #144]	; (80006d0 <audio_init+0x104>)
 800063e:	481e      	ldr	r0, [pc, #120]	; (80006b8 <audio_init+0xec>)
 8000640:	f005 fb38 	bl	8005cb4 <HAL_SAI_Receive_DMA>
                        (uint8_t*) saiDMAReceiveBuffer,
                        MY_DMA_BUFFER_SIZE_MSIZES);
    
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <audio_init+0x108>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]

    while (1)
    {
        if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <audio_init+0x108>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0fb      	beq.n	800064a <audio_init+0x7e>
        {
            if (audio_rec_buffer_state == BUFFER_OFFSET_HALF)
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <audio_init+0x108>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d113      	bne.n	8000682 <audio_init+0xb6>
            {
                ExtractSamplesFromDMABuffer(
 800065a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065e:	491e      	ldr	r1, [pc, #120]	; (80006d8 <audio_init+0x10c>)
 8000660:	481b      	ldr	r0, [pc, #108]	; (80006d0 <audio_init+0x104>)
 8000662:	f000 f8a9 	bl	80007b8 <ExtractSamplesFromDMABuffer>
                    &saiDMAReceiveBuffer[0],
                    &recordBuffer[0],
                    MY_BUFFER_SIZE_SAMPLES/2);

                CopySampleBuffer(
 8000666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066a:	491b      	ldr	r1, [pc, #108]	; (80006d8 <audio_init+0x10c>)
 800066c:	4814      	ldr	r0, [pc, #80]	; (80006c0 <audio_init+0xf4>)
 800066e:	f000 f8c7 	bl	8000800 <CopySampleBuffer>
                    &playbackBuffer[0],
                    &recordBuffer[0],
                    MY_BUFFER_SIZE_SAMPLES / 2);

                ConvertSampleBufferToDMABuffer(
 8000672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000676:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <audio_init+0xf8>)
 8000678:	4911      	ldr	r1, [pc, #68]	; (80006c0 <audio_init+0xf4>)
 800067a:	4817      	ldr	r0, [pc, #92]	; (80006d8 <audio_init+0x10c>)
 800067c:	f000 f86e 	bl	800075c <ConvertSampleBufferToDMABuffer>
 8000680:	e012      	b.n	80006a8 <audio_init+0xdc>
                    &saiDMATransmitBuffer[0],
                    MY_BUFFER_SIZE_SAMPLES / 2);
            }
            else
            {
                ExtractSamplesFromDMABuffer(
 8000682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000686:	4915      	ldr	r1, [pc, #84]	; (80006dc <audio_init+0x110>)
 8000688:	4815      	ldr	r0, [pc, #84]	; (80006e0 <audio_init+0x114>)
 800068a:	f000 f895 	bl	80007b8 <ExtractSamplesFromDMABuffer>
                    &saiDMAReceiveBuffer[MY_DMA_BUFFER_SIZE_BYTES / 2],
                    &recordBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    MY_BUFFER_SIZE_SAMPLES/2);

                CopySampleBuffer(
 800068e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000692:	4912      	ldr	r1, [pc, #72]	; (80006dc <audio_init+0x110>)
 8000694:	4813      	ldr	r0, [pc, #76]	; (80006e4 <audio_init+0x118>)
 8000696:	f000 f8b3 	bl	8000800 <CopySampleBuffer>
                    &playbackBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    &recordBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    MY_BUFFER_SIZE_SAMPLES / 2);

                ConvertSampleBufferToDMABuffer(
 800069a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <audio_init+0x11c>)
 80006a0:	4910      	ldr	r1, [pc, #64]	; (80006e4 <audio_init+0x118>)
 80006a2:	480e      	ldr	r0, [pc, #56]	; (80006dc <audio_init+0x110>)
 80006a4:	f000 f85a 	bl	800075c <ConvertSampleBufferToDMABuffer>
                    &playbackBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    &saiDMATransmitBuffer[MY_DMA_BUFFER_SIZE_BYTES / 2],
                    MY_BUFFER_SIZE_SAMPLES / 2);

            }
            audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <audio_init+0x108>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
        if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 80006ae:	e7cc      	b.n	800064a <audio_init+0x7e>
 80006b0:	200050e4 	.word	0x200050e4
 80006b4:	40015804 	.word	0x40015804
 80006b8:	20005060 	.word	0x20005060
 80006bc:	40015824 	.word	0x40015824
 80006c0:	20004060 	.word	0x20004060
 80006c4:	20000060 	.word	0x20000060
 80006c8:	2000000c 	.word	0x2000000c
 80006cc:	20000010 	.word	0x20000010
 80006d0:	20002060 	.word	0x20002060
 80006d4:	20005168 	.word	0x20005168
 80006d8:	20004860 	.word	0x20004860
 80006dc:	20004c60 	.word	0x20004c60
 80006e0:	20003060 	.word	0x20003060
 80006e4:	20004460 	.word	0x20004460
 80006e8:	20001060 	.word	0x20001060

080006ec <fill_buffer_with_square_wave>:



static void fill_buffer_with_square_wave(int16_t *buf,
                                         uint32_t num_samples)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
    // Fill up a 100hz square wave
    // 48khz sample rate --> 480 samples in 100 hz --> toggle every 240 samples

    int toggle_period = 240;
 80006f6:	23f0      	movs	r3, #240	; 0xf0
 80006f8:	613b      	str	r3, [r7, #16]
    int count = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
    int wave_state = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	61bb      	str	r3, [r7, #24]
    int magnitude = 30000;
 8000702:	f247 5330 	movw	r3, #30000	; 0x7530
 8000706:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < num_samples; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	e01b      	b.n	8000746 <fill_buffer_with_square_wave+0x5a>
    {
        buf[i] = magnitude*wave_state;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	b29a      	uxth	r2, r3
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	b29b      	uxth	r3, r3
 8000716:	fb12 f303 	smulbb	r3, r2, r3
 800071a:	b299      	uxth	r1, r3
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	4413      	add	r3, r2
 8000724:	b20a      	sxth	r2, r1
 8000726:	801a      	strh	r2, [r3, #0]
        count++;
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	3301      	adds	r3, #1
 800072c:	61fb      	str	r3, [r7, #28]

        if (count >= toggle_period)
 800072e:	69fa      	ldr	r2, [r7, #28]
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	429a      	cmp	r2, r3
 8000734:	db04      	blt.n	8000740 <fill_buffer_with_square_wave+0x54>
        {
            count = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
            wave_state = wave_state*(-1); // toggle here
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	425b      	negs	r3, r3
 800073e:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < num_samples; i++)
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	3301      	adds	r3, #1
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	429a      	cmp	r2, r3
 800074c:	d8df      	bhi.n	800070e <fill_buffer_with_square_wave+0x22>
        }
        
    }
}
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	3724      	adds	r7, #36	; 0x24
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <ConvertSampleBufferToDMABuffer>:
*/
static void ConvertSampleBufferToDMABuffer(int16_t *sampleInBuffer,
                                           int16_t *processOutBuffer,
                                           uint8_t *dmaBuffer,
                                           uint32_t num_samples)
{
 800075c:	b480      	push	{r7}
 800075e:	b087      	sub	sp, #28
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	e018      	b.n	80007a2 <ConvertSampleBufferToDMABuffer+0x46>
    {
        // samples are spaced 8 bytes apart
        int16_t *p = (int16_t *) &dmaBuffer[i*8];
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	613b      	str	r3, [r7, #16]
        *p = processOutBuffer[i]; // left channel
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	4413      	add	r3, r2
 8000782:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	801a      	strh	r2, [r3, #0]

#ifdef PASSTHROUGH_RIGHT
        *(p+2) = sampleInBuffer[i]; // right channel
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	441a      	add	r2, r3
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	3304      	adds	r3, #4
 8000796:	f9b2 2000 	ldrsh.w	r2, [r2]
 800079a:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	3301      	adds	r3, #1
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d3e2      	bcc.n	8000770 <ConvertSampleBufferToDMABuffer+0x14>
#else
        *(p+2) = processOutBuffer[i];
#endif
    }
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	371c      	adds	r7, #28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <ExtractSamplesFromDMABuffer>:
   for now just take 1 channel
*/
static void ExtractSamplesFromDMABuffer(uint8_t *dmaBuffer,
                                        int16_t *sampleBuffer,
                                        uint32_t num_samples)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < num_samples; ++i)
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e00f      	b.n	80007ea <ExtractSamplesFromDMABuffer+0x32>
    {
        int16_t * samplePointer = (int16_t *) &dmaBuffer[i*8];
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	4413      	add	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
        sampleBuffer[i] = *samplePointer;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	4413      	add	r3, r2
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80007e2:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < num_samples; ++i)
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3301      	adds	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d3eb      	bcc.n	80007ca <ExtractSamplesFromDMABuffer+0x12>
    }
}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	371c      	adds	r7, #28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <CopySampleBuffer>:

static void CopySampleBuffer(int16_t *dst, int16_t *src,
                             uint32_t num_samples)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b087      	sub	sp, #28
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < num_samples; i++)
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	e011      	b.n	8000836 <CopySampleBuffer+0x36>
          the process_sample() function is defined in ece5210.c

          the default is for a straight passthrough, but you can 
          modify it to do some signal processing
        */
        dst[i] = process_sample(src[i]);
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	4413      	add	r3, r2
 800081a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	18d4      	adds	r4, r2, r3
 8000826:	4608      	mov	r0, r1
 8000828:	f7ff fd5e 	bl	80002e8 <process_sample>
 800082c:	4603      	mov	r3, r0
 800082e:	8023      	strh	r3, [r4, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	3301      	adds	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	429a      	cmp	r2, r3
 800083c:	d3e9      	bcc.n	8000812 <CopySampleBuffer+0x12>
    }
}
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	371c      	adds	r7, #28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd90      	pop	{r4, r7, pc}

08000848 <My_SAI_ClockConfig>:


///////////////////////////////////////////////////////////

static void My_SAI_ClockConfig(uint32_t AudioFreq)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0a6      	sub	sp, #152	; 0x98
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
    RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

    HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	4618      	mov	r0, r3
 8000856:	f004 fd19 	bl	800528c <HAL_RCCEx_GetPeriphCLKConfig>

    /* Set the PLL configuration according to the audio frequency */
    if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000860:	4293      	cmp	r3, r2
 8000862:	d009      	beq.n	8000878 <My_SAI_ClockConfig+0x30>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f245 6222 	movw	r2, #22050	; 0x5622
 800086a:	4293      	cmp	r3, r2
 800086c:	d004      	beq.n	8000878 <My_SAI_ClockConfig+0x30>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000874:	4293      	cmp	r3, r2
 8000876:	d112      	bne.n	800089e <My_SAI_ClockConfig+0x56>
    {
        /* Configure PLLSAI prescalers */
        /* PLLSAI_VCO: VCO_429M
           SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
           SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz */
        rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000878:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800087c:	60bb      	str	r3, [r7, #8]
        rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 800087e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8000884:	f240 13ad 	movw	r3, #429	; 0x1ad
 8000888:	60fb      	str	r3, [r7, #12]
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	617b      	str	r3, [r7, #20]
        rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800088e:	2313      	movs	r3, #19
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c

        HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4618      	mov	r0, r3
 8000898:	f003 fc38 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 800089c:	e012      	b.n	80008c4 <My_SAI_ClockConfig+0x7c>
    {
        /* SAI clock config
           PLLSAI_VCO: VCO_344M
           SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
           SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 49.142/1 = 49.142 Mhz */
        rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800089e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80008a2:	60bb      	str	r3, [r7, #8]
        rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 80008a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80008a8:	647b      	str	r3, [r7, #68]	; 0x44
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 80008aa:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80008ae:	60fb      	str	r3, [r7, #12]
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80008b0:	2307      	movs	r3, #7
 80008b2:	617b      	str	r3, [r7, #20]
        rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c

        HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4618      	mov	r0, r3
 80008be:	f003 fc25 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
    }
}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	3798      	adds	r7, #152	; 0x98
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <My_AUDIO_OUT_MspInit>:

static void My_AUDIO_OUT_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
    static DMA_HandleTypeDef hdma_sai_tx;
    GPIO_InitTypeDef  gpio_init_structure;

    /* Enable SAI clock */
    AUDIO_OUT_SAIx_CLK_ENABLE();
 80008d2:	4b46      	ldr	r3, [pc, #280]	; (80009ec <My_AUDIO_OUT_MspInit+0x120>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a45      	ldr	r2, [pc, #276]	; (80009ec <My_AUDIO_OUT_MspInit+0x120>)
 80008d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b43      	ldr	r3, [pc, #268]	; (80009ec <My_AUDIO_OUT_MspInit+0x120>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    /* Enable GPIO clock */
    AUDIO_OUT_SAIx_MCLK_ENABLE();
 80008ea:	4b40      	ldr	r3, [pc, #256]	; (80009ec <My_AUDIO_OUT_MspInit+0x120>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a3f      	ldr	r2, [pc, #252]	; (80009ec <My_AUDIO_OUT_MspInit+0x120>)
 80008f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b3d      	ldr	r3, [pc, #244]	; (80009ec <My_AUDIO_OUT_MspInit+0x120>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8000902:	4b3a      	ldr	r3, [pc, #232]	; (80009ec <My_AUDIO_OUT_MspInit+0x120>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a39      	ldr	r2, [pc, #228]	; (80009ec <My_AUDIO_OUT_MspInit+0x120>)
 8000908:	f043 0310 	orr.w	r3, r3, #16
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b37      	ldr	r3, [pc, #220]	; (80009ec <My_AUDIO_OUT_MspInit+0x120>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 800091a:	2370      	movs	r3, #112	; 0x70
 800091c:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 800092a:	2306      	movs	r3, #6
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	482e      	ldr	r0, [pc, #184]	; (80009f0 <My_AUDIO_OUT_MspInit+0x124>)
 8000936:	f002 f9c1 	bl	8002cbc <HAL_GPIO_Init>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	482b      	ldr	r0, [pc, #172]	; (80009f4 <My_AUDIO_OUT_MspInit+0x128>)
 8000946:	f002 f9b9 	bl	8002cbc <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <My_AUDIO_OUT_MspInit+0x120>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a27      	ldr	r2, [pc, #156]	; (80009ec <My_AUDIO_OUT_MspInit+0x120>)
 8000950:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <My_AUDIO_OUT_MspInit+0x120>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000968:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 800096a:	2240      	movs	r2, #64	; 0x40
 800096c:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800096e:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000974:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800097a:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 800097e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000982:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800098a:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 800098e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000992:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 8000996:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800099a:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 800099e:	2204      	movs	r2, #4
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 80009a4:	2203      	movs	r2, #3
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 80009b6:	4a11      	ldr	r2, [pc, #68]	; (80009fc <My_AUDIO_OUT_MspInit+0x130>)
 80009b8:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_out_sai, hdmatx, hdma_sai_tx);
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <My_AUDIO_OUT_MspInit+0x134>)
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 80009be:	66da      	str	r2, [r3, #108]	; 0x6c
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <My_AUDIO_OUT_MspInit+0x134>)
 80009c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 80009c6:	480c      	ldr	r0, [pc, #48]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 80009c8:	f001 fe5e 	bl	8002688 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
 80009cc:	480a      	ldr	r0, [pc, #40]	; (80009f8 <My_AUDIO_OUT_MspInit+0x12c>)
 80009ce:	f001 fdad 	bl	800252c <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	210e      	movs	r1, #14
 80009d6:	2039      	movs	r0, #57	; 0x39
 80009d8:	f001 fd47 	bl	800246a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80009dc:	2039      	movs	r0, #57	; 0x39
 80009de:	f001 fd60 	bl	80024a2 <HAL_NVIC_EnableIRQ>
}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	; 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40021800 	.word	0x40021800
 80009f8:	2000516c 	.word	0x2000516c
 80009fc:	40026428 	.word	0x40026428
 8000a00:	200050e4 	.word	0x200050e4

08000a04 <My_SAI_Out_Init>:

static void My_SAI_Out_Init(uint32_t AudioFreq)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&haudio_out_sai);
 8000a0c:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a1a:	601a      	str	r2, [r3, #0]

    /* Configure SAI_Block_x
       LSBFirst: Disabled
       DataSize: 16 */
    haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
    haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8000a22:	4a2b      	ldr	r2, [pc, #172]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	61d3      	str	r3, [r2, #28]
    haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8000a28:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
    haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8000a2e:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
    haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8000a34:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	631a      	str	r2, [r3, #48]	; 0x30
    haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	635a      	str	r2, [r3, #52]	; 0x34
    haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	639a      	str	r2, [r3, #56]	; 0x38
    haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	63da      	str	r2, [r3, #60]	; 0x3c
    haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
    haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a58:	611a      	str	r2, [r3, #16]
    haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	619a      	str	r2, [r3, #24]
    haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
    haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
    haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	62da      	str	r2, [r3, #44]	; 0x2c
    haudio_out_sai.Init.Mckdiv         = 0;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
       Frame Length: 64
       Frame active Length: 32
       FS Definition: Start frame + Channel Side identification
       FS Polarity: FS active Low
       FS Offset: FS asserted one bit before the first bit of slot 0 */
    haudio_out_sai.FrameInit.FrameLength = 64;
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a7a:	2240      	movs	r2, #64	; 0x40
 8000a7c:	641a      	str	r2, [r3, #64]	; 0x40
    haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a80:	2220      	movs	r2, #32
 8000a82:	645a      	str	r2, [r3, #68]	; 0x44
    haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a8a:	649a      	str	r2, [r3, #72]	; 0x48
    haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	64da      	str	r2, [r3, #76]	; 0x4c
    haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a98:	651a      	str	r2, [r3, #80]	; 0x50
    /* Configure SAI Block_x Slot
       Slot First Bit Offset: 0
       Slot Size  : 16
       Slot Number: 4
       Slot Active: All slot actives */
    haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	655a      	str	r2, [r3, #84]	; 0x54
    haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	659a      	str	r2, [r3, #88]	; 0x58
    haudio_out_sai.SlotInit.SlotNumber = 4;
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	65da      	str	r2, [r3, #92]	; 0x5c
    haudio_out_sai.SlotInit.SlotActive = 0xF;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000aae:	220f      	movs	r2, #15
 8000ab0:	661a      	str	r2, [r3, #96]	; 0x60

    HAL_SAI_Init(&haudio_out_sai);
 8000ab2:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000ab4:	f004 fef0 	bl	8005898 <HAL_SAI_Init>

    /* Enable SAI peripheral to generate MCLK */
    __HAL_SAI_ENABLE(&haudio_out_sai);
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <My_SAI_Out_Init+0xcc>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ac6:	601a      	str	r2, [r3, #0]

}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200050e4 	.word	0x200050e4

08000ad4 <My_AUDIO_IN_MspInit>:

static void My_AUDIO_IN_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
    static DMA_HandleTypeDef hdma_sai_rx;
    GPIO_InitTypeDef  gpio_init_structure;

    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 8000ada:	4b3c      	ldr	r3, [pc, #240]	; (8000bcc <My_AUDIO_IN_MspInit+0xf8>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a3b      	ldr	r2, [pc, #236]	; (8000bcc <My_AUDIO_IN_MspInit+0xf8>)
 8000ae0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b39      	ldr	r3, [pc, #228]	; (8000bcc <My_AUDIO_IN_MspInit+0xf8>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 8000af2:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <My_AUDIO_IN_MspInit+0xf8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a35      	ldr	r2, [pc, #212]	; (8000bcc <My_AUDIO_IN_MspInit+0xf8>)
 8000af8:	f043 0310 	orr.w	r3, r3, #16
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <My_AUDIO_IN_MspInit+0xf8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8000b1a:	2306      	movs	r3, #6
 8000b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4619      	mov	r1, r3
 8000b24:	482a      	ldr	r0, [pc, #168]	; (8000bd0 <My_AUDIO_IN_MspInit+0xfc>)
 8000b26:	f002 f8c9 	bl	8002cbc <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8000b2a:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <My_AUDIO_IN_MspInit+0xf8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <My_AUDIO_IN_MspInit+0xf8>)
 8000b30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <My_AUDIO_IN_MspInit+0xf8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8000b42:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000b44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b48:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000b4a:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000b58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b5c:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b64:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000b68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6c:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b74:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000b78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b7c:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000b86:	2203      	movs	r2, #3
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000b98:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <My_AUDIO_IN_MspInit+0x104>)
 8000b9a:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_in_sai, hdmarx, hdma_sai_rx);
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <My_AUDIO_IN_MspInit+0x108>)
 8000b9e:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000ba0:	671a      	str	r2, [r3, #112]	; 0x70
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <My_AUDIO_IN_MspInit+0x108>)
 8000ba6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000baa:	f001 fd6d 	bl	8002688 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8000bae:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <My_AUDIO_IN_MspInit+0x100>)
 8000bb0:	f001 fcbc 	bl	800252c <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	203c      	movs	r0, #60	; 0x3c
 8000bba:	f001 fc56 	bl	800246a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8000bbe:	203c      	movs	r0, #60	; 0x3c
 8000bc0:	f001 fc6f 	bl	80024a2 <HAL_NVIC_EnableIRQ>
}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	200051cc 	.word	0x200051cc
 8000bd8:	40026470 	.word	0x40026470
 8000bdc:	20005060 	.word	0x20005060

08000be0 <My_SAI_In_Init>:

static void My_SAI_In_Init(uint32_t AudioFreq)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
    /* Initialize SAI1 block B in SLAVE RX synchronous from SAI1 block A */
    /* Initialize the haudio_in_sai Instance parameter */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8000be8:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000bea:	4a32      	ldr	r2, [pc, #200]	; (8000cb4 <My_SAI_In_Init+0xd4>)
 8000bec:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&haudio_in_sai);
 8000bee:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000bfc:	601a      	str	r2, [r3, #0]

    /* Configure SAI_Block_x */
    haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24
    haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8000c04:	4a2a      	ldr	r2, [pc, #168]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	61d3      	str	r3, [r2, #28]
    haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 8000c0a:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	605a      	str	r2, [r3, #4]
    haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
    haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8000c16:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	631a      	str	r2, [r3, #48]	; 0x30
    haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 8000c1c:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
    haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8000c22:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	639a      	str	r2, [r3, #56]	; 0x38
    haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c28:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	63da      	str	r2, [r3, #60]	; 0x3c
    haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	609a      	str	r2, [r3, #8]
    haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
    haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	619a      	str	r2, [r3, #24]
    haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
    haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
    haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c4e:	2210      	movs	r2, #16
 8000c50:	62da      	str	r2, [r3, #44]	; 0x2c
    haudio_in_sai.Init.Mckdiv         = 0;
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]

    /* Configure SAI_Block_x Frame */
    haudio_in_sai.FrameInit.FrameLength       = 64;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c5a:	2240      	movs	r2, #64	; 0x40
 8000c5c:	641a      	str	r2, [r3, #64]	; 0x40
    haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c60:	2220      	movs	r2, #32
 8000c62:	645a      	str	r2, [r3, #68]	; 0x44
    haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c6a:	649a      	str	r2, [r3, #72]	; 0x48
    haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8000c6c:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	64da      	str	r2, [r3, #76]	; 0x4c
    haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c74:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Configure SAI Block_x Slot */
    haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	655a      	str	r2, [r3, #84]	; 0x54
    haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	659a      	str	r2, [r3, #88]	; 0x58
    haudio_in_sai.SlotInit.SlotNumber     = 4;
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c88:	2204      	movs	r2, #4
 8000c8a:	65da      	str	r2, [r3, #92]	; 0x5c
    haudio_in_sai.SlotInit.SlotActive     = 0xF;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c8e:	220f      	movs	r2, #15
 8000c90:	661a      	str	r2, [r3, #96]	; 0x60

    HAL_SAI_Init(&haudio_in_sai);
 8000c92:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c94:	f004 fe00 	bl	8005898 <HAL_SAI_Init>

    /* Enable SAI peripheral */
    __HAL_SAI_ENABLE(&haudio_in_sai);
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <My_SAI_In_Init+0xd0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ca6:	601a      	str	r2, [r3, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20005060 	.word	0x20005060
 8000cb4:	40015824 	.word	0x40015824

08000cb8 <BSP_AUDIO_IN_TransferComplete_CallBack>:

void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
    audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	601a      	str	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	20005168 	.word	0x20005168

08000cd0 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
    audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	20005168 	.word	0x20005168

08000ce8 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32769i_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8000cf0:	f7ff ffee 	bl	8000cd0 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8000d04:	f7ff ffd8 	bl	8000cb8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <DMA2_Stream4_IRQHandler+0x14>)
 8000d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 fd61 	bl	80027e0 <HAL_DMA_IRQHandler>
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20005060 	.word	0x20005060

08000d28 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <DMA2_Stream1_IRQHandler+0x14>)
 8000d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 fd55 	bl	80027e0 <HAL_DMA_IRQHandler>
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200050e4 	.word	0x200050e4

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f001 fb85 	bl	8002454 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f06f 000b 	mvn.w	r0, #11
 8000d52:	f001 fb8a 	bl	800246a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f06f 000a 	mvn.w	r0, #10
 8000d5e:	f001 fb84 	bl	800246a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	f06f 0009 	mvn.w	r0, #9
 8000d6a:	f001 fb7e 	bl	800246a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	f06f 0004 	mvn.w	r0, #4
 8000d76:	f001 fb78 	bl	800246a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f06f 0003 	mvn.w	r0, #3
 8000d82:	f001 fb72 	bl	800246a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f06f 0001 	mvn.w	r0, #1
 8000d8e:	f001 fb6c 	bl	800246a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d9a:	f001 fb66 	bl	800246a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da6:	f001 fa57 	bl	8002258 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000daa:	f001 fbb1 	bl	8002510 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <SystemInit+0x5c>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <SystemInit+0x5c>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <SystemInit+0x60>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <SystemInit+0x60>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <SystemInit+0x60>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <SystemInit+0x60>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	490d      	ldr	r1, [pc, #52]	; (8000e14 <SystemInit+0x60>)
 8000de0:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <SystemInit+0x64>)
 8000de2:	4013      	ands	r3, r2
 8000de4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <SystemInit+0x60>)
 8000de8:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <SystemInit+0x68>)
 8000dea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <SystemInit+0x60>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <SystemInit+0x60>)
 8000df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SystemInit+0x60>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SystemInit+0x5c>)
 8000e00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e04:	609a      	str	r2, [r3, #8]
#endif
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	40023800 	.word	0x40023800
 8000e18:	fef6ffff 	.word	0xfef6ffff
 8000e1c:	24003010 	.word	0x24003010

08000e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e26:	490e      	ldr	r1, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e28:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e3c:	4c0b      	ldr	r4, [pc, #44]	; (8000e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e4a:	f7ff ffb3 	bl	8000db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f005 f8fd 	bl	800604c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e52:	f7ff faf3 	bl	800043c <main>
  bx  lr    
 8000e56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e58:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000e64:	080060e0 	.word	0x080060e0
  ldr r2, =_sbss
 8000e68:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000e6c:	20005284 	.word	0x20005284

08000e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC_IRQHandler>
	...

08000e74 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	81fb      	strh	r3, [r7, #14]
 8000e80:	460b      	mov	r3, r1
 8000e82:	81bb      	strh	r3, [r7, #12]
 8000e84:	4613      	mov	r3, r2
 8000e86:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000e8c:	89bb      	ldrh	r3, [r7, #12]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000e92:	89bb      	ldrh	r3, [r7, #12]
 8000e94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e98:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8000e9e:	f001 f973 	bl	8002188 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000ea2:	89fb      	ldrh	r3, [r7, #14]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 ffb7 	bl	8001e20 <CODEC_IO_Write>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	4413      	add	r3, r2
 8000eba:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8000ebc:	89fb      	ldrh	r3, [r7, #14]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f640 0117 	movw	r1, #2071	; 0x817
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 ffaa 	bl	8001e20 <CODEC_IO_Write>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8000ed6:	89fb      	ldrh	r3, [r7, #14]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 ff9d 	bl	8001e20 <CODEC_IO_Write>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	4413      	add	r3, r2
 8000eee:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8000ef0:	89fb      	ldrh	r3, [r7, #14]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	226c      	movs	r2, #108	; 0x6c
 8000ef6:	2139      	movs	r1, #57	; 0x39
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 ff91 	bl	8001e20 <CODEC_IO_Write>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	4413      	add	r3, r2
 8000f06:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8000f08:	8afb      	ldrh	r3, [r7, #22]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00c      	beq.n	8000f28 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2213      	movs	r2, #19
 8000f14:	2101      	movs	r1, #1
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 ff82 	bl	8001e20 <CODEC_IO_Write>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	4413      	add	r3, r2
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e00b      	b.n	8000f40 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8000f28:	89fb      	ldrh	r3, [r7, #14]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 ff75 	bl	8001e20 <CODEC_IO_Write>
 8000f36:	4603      	mov	r3, r0
 8000f38:	461a      	mov	r2, r3
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8000f40:	2032      	movs	r0, #50	; 0x32
 8000f42:	f001 f955 	bl	80021f0 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8000f46:	8b3b      	ldrh	r3, [r7, #24]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 815f 	beq.w	800120c <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8000f4e:	4bae      	ldr	r3, [pc, #696]	; (8001208 <wm8994_Init+0x394>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8000f54:	8b3b      	ldrh	r3, [r7, #24]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	f000 808c 	beq.w	8001074 <wm8994_Init+0x200>
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	f300 8111 	bgt.w	8001184 <wm8994_Init+0x310>
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d002      	beq.n	8000f6c <wm8994_Init+0xf8>
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d042      	beq.n	8000ff0 <wm8994_Init+0x17c>
 8000f6a:	e10b      	b.n	8001184 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	f640 420c 	movw	r2, #3084	; 0xc0c
 8000f74:	2105      	movs	r1, #5
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 ff52 	bl	8001e20 <CODEC_IO_Write>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	4413      	add	r3, r2
 8000f84:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f240 6101 	movw	r1, #1537	; 0x601
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 ff45 	bl	8001e20 <CODEC_IO_Write>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000fa0:	89fb      	ldrh	r3, [r7, #14]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f240 6102 	movw	r1, #1538	; 0x602
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 ff38 	bl	8001e20 <CODEC_IO_Write>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	f240 6104 	movw	r1, #1540	; 0x604
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 ff2b 	bl	8001e20 <CODEC_IO_Write>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000fd4:	89fb      	ldrh	r3, [r7, #14]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2202      	movs	r2, #2
 8000fda:	f240 6105 	movw	r1, #1541	; 0x605
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 ff1e 	bl	8001e20 <CODEC_IO_Write>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	4413      	add	r3, r2
 8000fec:	61fb      	str	r3, [r7, #28]
      break;
 8000fee:	e110      	b.n	8001212 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	f240 3203 	movw	r2, #771	; 0x303
 8000ff8:	2105      	movs	r1, #5
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 ff10 	bl	8001e20 <CODEC_IO_Write>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	4413      	add	r3, r2
 8001008:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2201      	movs	r2, #1
 8001010:	f240 6101 	movw	r1, #1537	; 0x601
 8001014:	4618      	mov	r0, r3
 8001016:	f000 ff03 	bl	8001e20 <CODEC_IO_Write>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	4413      	add	r3, r2
 8001022:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001024:	89fb      	ldrh	r3, [r7, #14]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2201      	movs	r2, #1
 800102a:	f240 6102 	movw	r1, #1538	; 0x602
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fef6 	bl	8001e20 <CODEC_IO_Write>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	4413      	add	r3, r2
 800103c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2200      	movs	r2, #0
 8001044:	f240 6104 	movw	r1, #1540	; 0x604
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fee9 	bl	8001e20 <CODEC_IO_Write>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	4413      	add	r3, r2
 8001056:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001058:	89fb      	ldrh	r3, [r7, #14]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2200      	movs	r2, #0
 800105e:	f240 6105 	movw	r1, #1541	; 0x605
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fedc 	bl	8001e20 <CODEC_IO_Write>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	4413      	add	r3, r2
 8001070:	61fb      	str	r3, [r7, #28]
      break;
 8001072:	e0ce      	b.n	8001212 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001074:	8afb      	ldrh	r3, [r7, #22]
 8001076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800107a:	d141      	bne.n	8001100 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800107c:	89fb      	ldrh	r3, [r7, #14]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001084:	2105      	movs	r1, #5
 8001086:	4618      	mov	r0, r3
 8001088:	f000 feca 	bl	8001e20 <CODEC_IO_Write>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	4413      	add	r3, r2
 8001094:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2203      	movs	r2, #3
 800109c:	f240 6101 	movw	r1, #1537	; 0x601
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 febd 	bl	8001e20 <CODEC_IO_Write>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	4413      	add	r3, r2
 80010ae:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80010b0:	89fb      	ldrh	r3, [r7, #14]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2203      	movs	r2, #3
 80010b6:	f240 6102 	movw	r1, #1538	; 0x602
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 feb0 	bl	8001e20 <CODEC_IO_Write>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	4413      	add	r3, r2
 80010c8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2203      	movs	r2, #3
 80010d0:	f240 6104 	movw	r1, #1540	; 0x604
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fea3 	bl	8001e20 <CODEC_IO_Write>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	4413      	add	r3, r2
 80010e2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80010e4:	89fb      	ldrh	r3, [r7, #14]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2203      	movs	r2, #3
 80010ea:	f240 6105 	movw	r1, #1541	; 0x605
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fe96 	bl	8001e20 <CODEC_IO_Write>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	4413      	add	r3, r2
 80010fc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80010fe:	e088      	b.n	8001212 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001108:	2105      	movs	r1, #5
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fe88 	bl	8001e20 <CODEC_IO_Write>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	4413      	add	r3, r2
 8001118:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800111a:	89fb      	ldrh	r3, [r7, #14]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2201      	movs	r2, #1
 8001120:	f240 6101 	movw	r1, #1537	; 0x601
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fe7b 	bl	8001e20 <CODEC_IO_Write>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	4413      	add	r3, r2
 8001132:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001134:	89fb      	ldrh	r3, [r7, #14]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2201      	movs	r2, #1
 800113a:	f240 6102 	movw	r1, #1538	; 0x602
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fe6e 	bl	8001e20 <CODEC_IO_Write>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	4413      	add	r3, r2
 800114c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800114e:	89fb      	ldrh	r3, [r7, #14]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2202      	movs	r2, #2
 8001154:	f240 6104 	movw	r1, #1540	; 0x604
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fe61 	bl	8001e20 <CODEC_IO_Write>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	4413      	add	r3, r2
 8001166:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8001168:	89fb      	ldrh	r3, [r7, #14]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2202      	movs	r2, #2
 800116e:	f240 6105 	movw	r1, #1541	; 0x605
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fe54 	bl	8001e20 <CODEC_IO_Write>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	4413      	add	r3, r2
 8001180:	61fb      	str	r3, [r7, #28]
      break;
 8001182:	e046      	b.n	8001212 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f240 3203 	movw	r2, #771	; 0x303
 800118c:	2105      	movs	r1, #5
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fe46 	bl	8001e20 <CODEC_IO_Write>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	4413      	add	r3, r2
 800119c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2201      	movs	r2, #1
 80011a4:	f240 6101 	movw	r1, #1537	; 0x601
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 fe39 	bl	8001e20 <CODEC_IO_Write>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	4413      	add	r3, r2
 80011b6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80011b8:	89fb      	ldrh	r3, [r7, #14]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2201      	movs	r2, #1
 80011be:	f240 6102 	movw	r1, #1538	; 0x602
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fe2c 	bl	8001e20 <CODEC_IO_Write>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	4413      	add	r3, r2
 80011d0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2200      	movs	r2, #0
 80011d8:	f240 6104 	movw	r1, #1540	; 0x604
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fe1f 	bl	8001e20 <CODEC_IO_Write>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	4413      	add	r3, r2
 80011ea:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2200      	movs	r2, #0
 80011f2:	f240 6105 	movw	r1, #1541	; 0x605
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fe12 	bl	8001e20 <CODEC_IO_Write>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	4413      	add	r3, r2
 8001204:	61fb      	str	r3, [r7, #28]
      break;
 8001206:	e004      	b.n	8001212 <wm8994_Init+0x39e>
 8001208:	2000522c 	.word	0x2000522c
    }
  }
  else
  {
    outputEnabled = 0;
 800120c:	4b99      	ldr	r3, [pc, #612]	; (8001474 <wm8994_Init+0x600>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8001212:	8afb      	ldrh	r3, [r7, #22]
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 81ab 	beq.w	8001570 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800121a:	4b97      	ldr	r3, [pc, #604]	; (8001478 <wm8994_Init+0x604>)
 800121c:	2201      	movs	r2, #1
 800121e:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8001220:	8afb      	ldrh	r3, [r7, #22]
 8001222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001226:	f000 8129 	beq.w	800147c <wm8994_Init+0x608>
 800122a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800122e:	f300 819b 	bgt.w	8001568 <wm8994_Init+0x6f4>
 8001232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001236:	d05a      	beq.n	80012ee <wm8994_Init+0x47a>
 8001238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800123c:	f300 8194 	bgt.w	8001568 <wm8994_Init+0x6f4>
 8001240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001244:	f000 80c6 	beq.w	80013d4 <wm8994_Init+0x560>
 8001248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800124c:	f040 818c 	bne.w	8001568 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8001250:	89fb      	ldrh	r3, [r7, #14]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8001258:	2104      	movs	r1, #4
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fde0 	bl	8001e20 <CODEC_IO_Write>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	4413      	add	r3, r2
 8001268:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	22db      	movs	r2, #219	; 0xdb
 8001270:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001274:	4618      	mov	r0, r3
 8001276:	f000 fdd3 	bl	8001e20 <CODEC_IO_Write>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	4413      	add	r3, r2
 8001282:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800128c:	2102      	movs	r1, #2
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fdc6 	bl	8001e20 <CODEC_IO_Write>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	4413      	add	r3, r2
 800129c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800129e:	89fb      	ldrh	r3, [r7, #14]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2202      	movs	r2, #2
 80012a4:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fdb9 	bl	8001e20 <CODEC_IO_Write>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	4413      	add	r3, r2
 80012b6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80012b8:	89fb      	ldrh	r3, [r7, #14]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2202      	movs	r2, #2
 80012be:	f240 6109 	movw	r1, #1545	; 0x609
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fdac 	bl	8001e20 <CODEC_IO_Write>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	4413      	add	r3, r2
 80012d0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	220e      	movs	r2, #14
 80012d8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fd9f 	bl	8001e20 <CODEC_IO_Write>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	4413      	add	r3, r2
 80012ea:	61fb      	str	r3, [r7, #28]
      break;
 80012ec:	e143      	b.n	8001576 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80012ee:	89fb      	ldrh	r3, [r7, #14]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2211      	movs	r2, #17
 80012f4:	2128      	movs	r1, #40	; 0x28
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fd92 	bl	8001e20 <CODEC_IO_Write>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	4413      	add	r3, r2
 8001304:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      //counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);

      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8001306:	89fb      	ldrh	r3, [r7, #14]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2220      	movs	r2, #32
 800130c:	2129      	movs	r1, #41	; 0x29
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fd86 	bl	8001e20 <CODEC_IO_Write>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	4413      	add	r3, r2
 800131c:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);

      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2220      	movs	r2, #32
 8001324:	212a      	movs	r1, #42	; 0x2a
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fd7a 	bl	8001e20 <CODEC_IO_Write>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	4413      	add	r3, r2
 8001334:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8001336:	89fb      	ldrh	r3, [r7, #14]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f240 3203 	movw	r2, #771	; 0x303
 800133e:	2104      	movs	r1, #4
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fd6d 	bl	8001e20 <CODEC_IO_Write>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	4413      	add	r3, r2
 800134e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001350:	89fb      	ldrh	r3, [r7, #14]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	22db      	movs	r2, #219	; 0xdb
 8001356:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fd60 	bl	8001e20 <CODEC_IO_Write>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	4413      	add	r3, r2
 8001368:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f246 3250 	movw	r2, #25424	; 0x6350
 8001372:	2102      	movs	r1, #2
 8001374:	4618      	mov	r0, r3
 8001376:	f000 fd53 	bl	8001e20 <CODEC_IO_Write>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	4413      	add	r3, r2
 8001382:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2202      	movs	r2, #2
 800138a:	f240 6106 	movw	r1, #1542	; 0x606
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fd46 	bl	8001e20 <CODEC_IO_Write>
 8001394:	4603      	mov	r3, r0
 8001396:	461a      	mov	r2, r3
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	4413      	add	r3, r2
 800139c:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2202      	movs	r2, #2
 80013a4:	f240 6107 	movw	r1, #1543	; 0x607
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 fd39 	bl	8001e20 <CODEC_IO_Write>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4413      	add	r3, r2
 80013b6:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80013b8:	89fb      	ldrh	r3, [r7, #14]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	220d      	movs	r2, #13
 80013be:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fd2c 	bl	8001e20 <CODEC_IO_Write>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	4413      	add	r3, r2
 80013d0:	61fb      	str	r3, [r7, #28]
      break;
 80013d2:	e0d0      	b.n	8001576 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80013d4:	89fb      	ldrh	r3, [r7, #14]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80013dc:	2104      	movs	r1, #4
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fd1e 	bl	8001e20 <CODEC_IO_Write>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	4413      	add	r3, r2
 80013ec:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	22db      	movs	r2, #219	; 0xdb
 80013f4:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fd11 	bl	8001e20 <CODEC_IO_Write>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8001408:	89fb      	ldrh	r3, [r7, #14]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f246 3250 	movw	r2, #25424	; 0x6350
 8001410:	2102      	movs	r1, #2
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fd04 	bl	8001e20 <CODEC_IO_Write>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	4413      	add	r3, r2
 8001420:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2202      	movs	r2, #2
 8001428:	f240 6106 	movw	r1, #1542	; 0x606
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fcf7 	bl	8001e20 <CODEC_IO_Write>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	4413      	add	r3, r2
 800143a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800143c:	89fb      	ldrh	r3, [r7, #14]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2202      	movs	r2, #2
 8001442:	f240 6107 	movw	r1, #1543	; 0x607
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fcea 	bl	8001e20 <CODEC_IO_Write>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4413      	add	r3, r2
 8001454:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001456:	89fb      	ldrh	r3, [r7, #14]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	220d      	movs	r2, #13
 800145c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fcdd 	bl	8001e20 <CODEC_IO_Write>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	4413      	add	r3, r2
 800146e:	61fb      	str	r3, [r7, #28]
      break; 
 8001470:	e081      	b.n	8001576 <wm8994_Init+0x702>
 8001472:	bf00      	nop
 8001474:	2000522c 	.word	0x2000522c
 8001478:	20005230 	.word	0x20005230
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f640 723c 	movw	r2, #3900	; 0xf3c
 8001484:	2104      	movs	r1, #4
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fcca 	bl	8001e20 <CODEC_IO_Write>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8001496:	89fb      	ldrh	r3, [r7, #14]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	22db      	movs	r2, #219	; 0xdb
 800149c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fcbd 	bl	8001e20 <CODEC_IO_Write>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4413      	add	r3, r2
 80014ae:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80014b0:	89fb      	ldrh	r3, [r7, #14]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	22db      	movs	r2, #219	; 0xdb
 80014b6:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fcb0 	bl	8001e20 <CODEC_IO_Write>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	4413      	add	r3, r2
 80014c8:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80014d2:	2102      	movs	r1, #2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fca3 	bl	8001e20 <CODEC_IO_Write>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	4413      	add	r3, r2
 80014e2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2202      	movs	r2, #2
 80014ea:	f240 6106 	movw	r1, #1542	; 0x606
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 fc96 	bl	8001e20 <CODEC_IO_Write>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	4413      	add	r3, r2
 80014fc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80014fe:	89fb      	ldrh	r3, [r7, #14]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2202      	movs	r2, #2
 8001504:	f240 6107 	movw	r1, #1543	; 0x607
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fc89 	bl	8001e20 <CODEC_IO_Write>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	4413      	add	r3, r2
 8001516:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8001518:	89fb      	ldrh	r3, [r7, #14]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2202      	movs	r2, #2
 800151e:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001522:	4618      	mov	r0, r3
 8001524:	f000 fc7c 	bl	8001e20 <CODEC_IO_Write>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	4413      	add	r3, r2
 8001530:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8001532:	89fb      	ldrh	r3, [r7, #14]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2202      	movs	r2, #2
 8001538:	f240 6109 	movw	r1, #1545	; 0x609
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fc6f 	bl	8001e20 <CODEC_IO_Write>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	4413      	add	r3, r2
 800154a:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800154c:	89fb      	ldrh	r3, [r7, #14]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	220d      	movs	r2, #13
 8001552:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fc62 	bl	8001e20 <CODEC_IO_Write>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	4413      	add	r3, r2
 8001564:	61fb      	str	r3, [r7, #28]
      break;    
 8001566:	e006      	b.n	8001576 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	3301      	adds	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
      break;
 800156e:	e002      	b.n	8001576 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8001570:	4bb1      	ldr	r3, [pc, #708]	; (8001838 <wm8994_Init+0x9c4>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4ab0      	ldr	r2, [pc, #704]	; (800183c <wm8994_Init+0x9c8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d079      	beq.n	8001672 <wm8994_Init+0x7fe>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4aae      	ldr	r2, [pc, #696]	; (800183c <wm8994_Init+0x9c8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	f200 80ad 	bhi.w	80016e2 <wm8994_Init+0x86e>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800158e:	4293      	cmp	r3, r2
 8001590:	d061      	beq.n	8001656 <wm8994_Init+0x7e2>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001598:	4293      	cmp	r3, r2
 800159a:	f200 80a2 	bhi.w	80016e2 <wm8994_Init+0x86e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80015a4:	4293      	cmp	r3, r2
 80015a6:	f000 808e 	beq.w	80016c6 <wm8994_Init+0x852>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f64a 4244 	movw	r2, #44100	; 0xac44
 80015b0:	4293      	cmp	r3, r2
 80015b2:	f200 8096 	bhi.w	80016e2 <wm8994_Init+0x86e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80015bc:	d03d      	beq.n	800163a <wm8994_Init+0x7c6>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80015c4:	f200 808d 	bhi.w	80016e2 <wm8994_Init+0x86e>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f245 6222 	movw	r2, #22050	; 0x5622
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d06b      	beq.n	80016aa <wm8994_Init+0x836>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f245 6222 	movw	r2, #22050	; 0x5622
 80015d8:	4293      	cmp	r3, r2
 80015da:	f200 8082 	bhi.w	80016e2 <wm8994_Init+0x86e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80015e4:	d01b      	beq.n	800161e <wm8994_Init+0x7aa>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80015ec:	d879      	bhi.n	80016e2 <wm8994_Init+0x86e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80015f4:	d005      	beq.n	8001602 <wm8994_Init+0x78e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f642 3211 	movw	r2, #11025	; 0x2b11
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d046      	beq.n	800168e <wm8994_Init+0x81a>
 8001600:	e06f      	b.n	80016e2 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8001602:	89fb      	ldrh	r3, [r7, #14]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2203      	movs	r2, #3
 8001608:	f44f 7104 	mov.w	r1, #528	; 0x210
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fc07 	bl	8001e20 <CODEC_IO_Write>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	4413      	add	r3, r2
 800161a:	61fb      	str	r3, [r7, #28]
    break;
 800161c:	e06f      	b.n	80016fe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2233      	movs	r2, #51	; 0x33
 8001624:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fbf9 	bl	8001e20 <CODEC_IO_Write>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	4413      	add	r3, r2
 8001636:	61fb      	str	r3, [r7, #28]
    break;
 8001638:	e061      	b.n	80016fe <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800163a:	89fb      	ldrh	r3, [r7, #14]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2263      	movs	r2, #99	; 0x63
 8001640:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fbeb 	bl	8001e20 <CODEC_IO_Write>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	4413      	add	r3, r2
 8001652:	61fb      	str	r3, [r7, #28]
    break;
 8001654:	e053      	b.n	80016fe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2283      	movs	r2, #131	; 0x83
 800165c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001660:	4618      	mov	r0, r3
 8001662:	f000 fbdd 	bl	8001e20 <CODEC_IO_Write>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	4413      	add	r3, r2
 800166e:	61fb      	str	r3, [r7, #28]
    break;
 8001670:	e045      	b.n	80016fe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8001672:	89fb      	ldrh	r3, [r7, #14]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	22a3      	movs	r2, #163	; 0xa3
 8001678:	f44f 7104 	mov.w	r1, #528	; 0x210
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fbcf 	bl	8001e20 <CODEC_IO_Write>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	61fb      	str	r3, [r7, #28]
    break;
 800168c:	e037      	b.n	80016fe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800168e:	89fb      	ldrh	r3, [r7, #14]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2213      	movs	r2, #19
 8001694:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fbc1 	bl	8001e20 <CODEC_IO_Write>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	4413      	add	r3, r2
 80016a6:	61fb      	str	r3, [r7, #28]
    break;
 80016a8:	e029      	b.n	80016fe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80016aa:	89fb      	ldrh	r3, [r7, #14]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2243      	movs	r2, #67	; 0x43
 80016b0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 fbb3 	bl	8001e20 <CODEC_IO_Write>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	4413      	add	r3, r2
 80016c2:	61fb      	str	r3, [r7, #28]
    break;
 80016c4:	e01b      	b.n	80016fe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2273      	movs	r2, #115	; 0x73
 80016cc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fba5 	bl	8001e20 <CODEC_IO_Write>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	4413      	add	r3, r2
 80016de:	61fb      	str	r3, [r7, #28]
    break; 
 80016e0:	e00d      	b.n	80016fe <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80016e2:	89fb      	ldrh	r3, [r7, #14]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2283      	movs	r2, #131	; 0x83
 80016e8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 fb97 	bl	8001e20 <CODEC_IO_Write>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	4413      	add	r3, r2
 80016fa:	61fb      	str	r3, [r7, #28]
    break; 
 80016fc:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80016fe:	8afb      	ldrh	r3, [r7, #22]
 8001700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001704:	d10e      	bne.n	8001724 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8001706:	89fb      	ldrh	r3, [r7, #14]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f244 0218 	movw	r2, #16408	; 0x4018
 800170e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fb84 	bl	8001e20 <CODEC_IO_Write>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	4413      	add	r3, r2
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	e00d      	b.n	8001740 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8001724:	89fb      	ldrh	r3, [r7, #14]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f244 0210 	movw	r2, #16400	; 0x4010
 800172c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001730:	4618      	mov	r0, r3
 8001732:	f000 fb75 	bl	8001e20 <CODEC_IO_Write>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	4413      	add	r3, r2
 800173e:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8001740:	89fb      	ldrh	r3, [r7, #14]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2200      	movs	r2, #0
 8001746:	f240 3102 	movw	r1, #770	; 0x302
 800174a:	4618      	mov	r0, r3
 800174c:	f000 fb68 	bl	8001e20 <CODEC_IO_Write>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800175a:	89fb      	ldrh	r3, [r7, #14]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	220a      	movs	r2, #10
 8001760:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fb5b 	bl	8001e20 <CODEC_IO_Write>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	4413      	add	r3, r2
 8001772:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8001774:	89fb      	ldrh	r3, [r7, #14]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2201      	movs	r2, #1
 800177a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800177e:	4618      	mov	r0, r3
 8001780:	f000 fb4e 	bl	8001e20 <CODEC_IO_Write>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800178e:	8b3b      	ldrh	r3, [r7, #24]
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8123 	beq.w	80019dc <wm8994_Init+0xb68>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8001796:	89fb      	ldrh	r3, [r7, #14]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800179e:	2103      	movs	r1, #3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fb3d 	bl	8001e20 <CODEC_IO_Write>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80017b0:	89fb      	ldrh	r3, [r7, #14]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2200      	movs	r2, #0
 80017b6:	2122      	movs	r1, #34	; 0x22
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fb31 	bl	8001e20 <CODEC_IO_Write>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	4413      	add	r3, r2
 80017c6:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80017c8:	89fb      	ldrh	r3, [r7, #14]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2200      	movs	r2, #0
 80017ce:	2123      	movs	r1, #35	; 0x23
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fb25 	bl	8001e20 <CODEC_IO_Write>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	4413      	add	r3, r2
 80017de:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80017e0:	89fb      	ldrh	r3, [r7, #14]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017e8:	2136      	movs	r1, #54	; 0x36
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 fb18 	bl	8001e20 <CODEC_IO_Write>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80017fa:	89fb      	ldrh	r3, [r7, #14]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	f243 0203 	movw	r2, #12291	; 0x3003
 8001802:	2101      	movs	r1, #1
 8001804:	4618      	mov	r0, r3
 8001806:	f000 fb0b 	bl	8001e20 <CODEC_IO_Write>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001814:	8afb      	ldrh	r3, [r7, #22]
 8001816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800181a:	d111      	bne.n	8001840 <wm8994_Init+0x9cc>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 800181c:	89fb      	ldrh	r3, [r7, #14]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f240 2205 	movw	r2, #517	; 0x205
 8001824:	2151      	movs	r1, #81	; 0x51
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fafa 	bl	8001e20 <CODEC_IO_Write>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	4413      	add	r3, r2
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	e00f      	b.n	8001858 <wm8994_Init+0x9e4>
 8001838:	20005230 	.word	0x20005230
 800183c:	00017700 	.word	0x00017700
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8001840:	89fb      	ldrh	r3, [r7, #14]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2205      	movs	r2, #5
 8001846:	2151      	movs	r1, #81	; 0x51
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fae9 	bl	8001e20 <CODEC_IO_Write>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8001858:	8b7b      	ldrh	r3, [r7, #26]
 800185a:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 800185e:	f043 0303 	orr.w	r3, r3, #3
 8001862:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001864:	89fb      	ldrh	r3, [r7, #14]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	8b7a      	ldrh	r2, [r7, #26]
 800186a:	2101      	movs	r1, #1
 800186c:	4618      	mov	r0, r3
 800186e:	f000 fad7 	bl	8001e20 <CODEC_IO_Write>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4413      	add	r3, r2
 800187a:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2222      	movs	r2, #34	; 0x22
 8001882:	2160      	movs	r1, #96	; 0x60
 8001884:	4618      	mov	r0, r3
 8001886:	f000 facb 	bl	8001e20 <CODEC_IO_Write>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8001894:	89fb      	ldrh	r3, [r7, #14]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f649 7225 	movw	r2, #40741	; 0x9f25
 800189c:	214c      	movs	r1, #76	; 0x4c
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fabe 	bl	8001e20 <CODEC_IO_Write>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80018ae:	200f      	movs	r0, #15
 80018b0:	f000 fc9e 	bl	80021f0 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80018b4:	89fb      	ldrh	r3, [r7, #14]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2201      	movs	r2, #1
 80018ba:	212d      	movs	r1, #45	; 0x2d
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 faaf 	bl	8001e20 <CODEC_IO_Write>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80018cc:	89fb      	ldrh	r3, [r7, #14]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2201      	movs	r2, #1
 80018d2:	212e      	movs	r1, #46	; 0x2e
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 faa3 	bl	8001e20 <CODEC_IO_Write>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f44f 724c 	mov.w	r2, #816	; 0x330
 80018ec:	2103      	movs	r1, #3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fa96 	bl	8001e20 <CODEC_IO_Write>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	4413      	add	r3, r2
 80018fc:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 80018fe:	89fb      	ldrh	r3, [r7, #14]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2233      	movs	r2, #51	; 0x33
 8001904:	2154      	movs	r1, #84	; 0x54
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fa8a 	bl	8001e20 <CODEC_IO_Write>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	4413      	add	r3, r2
 8001914:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(250);
 8001916:	20fa      	movs	r0, #250	; 0xfa
 8001918:	f000 fc6a 	bl	80021f0 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 800191c:	89fb      	ldrh	r3, [r7, #14]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	22ee      	movs	r2, #238	; 0xee
 8001922:	2160      	movs	r1, #96	; 0x60
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fa7b 	bl	8001e20 <CODEC_IO_Write>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	4413      	add	r3, r2
 8001932:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8001934:	89fb      	ldrh	r3, [r7, #14]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	22c0      	movs	r2, #192	; 0xc0
 800193a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fa6e 	bl	8001e20 <CODEC_IO_Write>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800194e:	89fb      	ldrh	r3, [r7, #14]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	22c0      	movs	r2, #192	; 0xc0
 8001954:	f240 6111 	movw	r1, #1553	; 0x611
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fa61 	bl	8001e20 <CODEC_IO_Write>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8001968:	89fb      	ldrh	r3, [r7, #14]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2200      	movs	r2, #0
 800196e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fa54 	bl	8001e20 <CODEC_IO_Write>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	4413      	add	r3, r2
 8001980:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8001982:	89fb      	ldrh	r3, [r7, #14]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	22c0      	movs	r2, #192	; 0xc0
 8001988:	f240 6112 	movw	r1, #1554	; 0x612
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fa47 	bl	8001e20 <CODEC_IO_Write>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	4413      	add	r3, r2
 800199a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 800199c:	89fb      	ldrh	r3, [r7, #14]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	22c0      	movs	r2, #192	; 0xc0
 80019a2:	f240 6113 	movw	r1, #1555	; 0x613
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fa3a 	bl	8001e20 <CODEC_IO_Write>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461a      	mov	r2, r3
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	4413      	add	r3, r2
 80019b4:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 80019b6:	89fb      	ldrh	r3, [r7, #14]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2200      	movs	r2, #0
 80019bc:	f240 4122 	movw	r1, #1058	; 0x422
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fa2d 	bl	8001e20 <CODEC_IO_Write>
 80019c6:	4603      	mov	r3, r0
 80019c8:	461a      	mov	r2, r3
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	4413      	add	r3, r2
 80019ce:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80019d0:	7afa      	ldrb	r2, [r7, #11]
 80019d2:	89fb      	ldrh	r3, [r7, #14]
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f8b0 	bl	8001b3c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80019dc:	8afb      	ldrh	r3, [r7, #22]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80a6 	beq.w	8001b30 <wm8994_Init+0xcbc>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80019e4:	8afb      	ldrh	r3, [r7, #22]
 80019e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019ea:	d003      	beq.n	80019f4 <wm8994_Init+0xb80>
 80019ec:	8afb      	ldrh	r3, [r7, #22]
 80019ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f2:	d12b      	bne.n	8001a4c <wm8994_Init+0xbd8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80019f4:	8b7b      	ldrh	r3, [r7, #26]
 80019f6:	f043 0313 	orr.w	r3, r3, #19
 80019fa:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80019fc:	89fb      	ldrh	r3, [r7, #14]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	8b7a      	ldrh	r2, [r7, #26]
 8001a02:	2101      	movs	r1, #1
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fa0b 	bl	8001e20 <CODEC_IO_Write>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	4413      	add	r3, r2
 8001a12:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001a14:	89fb      	ldrh	r3, [r7, #14]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2202      	movs	r2, #2
 8001a1a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f9fe 	bl	8001e20 <CODEC_IO_Write>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8001a2e:	89fb      	ldrh	r3, [r7, #14]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a36:	f240 4111 	movw	r1, #1041	; 0x411
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f9f0 	bl	8001e20 <CODEC_IO_Write>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	4413      	add	r3, r2
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	e06b      	b.n	8001b24 <wm8994_Init+0xcb0>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001a4c:	8afb      	ldrh	r3, [r7, #22]
 8001a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a52:	d139      	bne.n	8001ac8 <wm8994_Init+0xc54>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001a54:	8b7b      	ldrh	r3, [r7, #26]
 8001a56:	f043 0313 	orr.w	r3, r3, #19
 8001a5a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001a5c:	89fb      	ldrh	r3, [r7, #14]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	8b7a      	ldrh	r2, [r7, #26]
 8001a62:	2101      	movs	r1, #1
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 f9db 	bl	8001e20 <CODEC_IO_Write>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	4413      	add	r3, r2
 8001a72:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001a74:	89fb      	ldrh	r3, [r7, #14]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2202      	movs	r2, #2
 8001a7a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f9ce 	bl	8001e20 <CODEC_IO_Write>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001a8e:	89fb      	ldrh	r3, [r7, #14]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001a96:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f9c0 	bl	8001e20 <CODEC_IO_Write>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8001aaa:	89fb      	ldrh	r3, [r7, #14]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001ab2:	f240 4111 	movw	r1, #1041	; 0x411
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f9b2 	bl	8001e20 <CODEC_IO_Write>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	e02d      	b.n	8001b24 <wm8994_Init+0xcb0>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8001ac8:	8afb      	ldrh	r3, [r7, #22]
 8001aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ace:	d003      	beq.n	8001ad8 <wm8994_Init+0xc64>
 8001ad0:	8afb      	ldrh	r3, [r7, #22]
 8001ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad6:	d125      	bne.n	8001b24 <wm8994_Init+0xcb0>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8001ad8:	89fb      	ldrh	r3, [r7, #14]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	220b      	movs	r2, #11
 8001ade:	2118      	movs	r1, #24
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 f99d 	bl	8001e20 <CODEC_IO_Write>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	4413      	add	r3, r2
 8001aee:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8001af0:	89fb      	ldrh	r3, [r7, #14]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	220b      	movs	r2, #11
 8001af6:	211a      	movs	r1, #26
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f991 	bl	8001e20 <CODEC_IO_Write>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	4413      	add	r3, r2
 8001b06:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001b08:	89fb      	ldrh	r3, [r7, #14]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001b10:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 f983 	bl	8001e20 <CODEC_IO_Write>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	4413      	add	r3, r2
 8001b22:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001b24:	7afa      	ldrb	r2, [r7, #11]
 8001b26:	89fb      	ldrh	r3, [r7, #14]
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f806 	bl	8001b3c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8001b30:	69fb      	ldr	r3, [r7, #28]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop

08001b3c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	460a      	mov	r2, r1
 8001b46:	80fb      	strh	r3, [r7, #6]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001b50:	797b      	ldrb	r3, [r7, #5]
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d80b      	bhi.n	8001b6e <wm8994_SetVolume+0x32>
 8001b56:	797a      	ldrb	r2, [r7, #5]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	019b      	lsls	r3, r3, #6
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	4a86      	ldr	r2, [pc, #536]	; (8001d78 <wm8994_SetVolume+0x23c>)
 8001b60:	fb82 1203 	smull	r1, r2, r2, r3
 8001b64:	1152      	asrs	r2, r2, #5
 8001b66:	17db      	asrs	r3, r3, #31
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	e000      	b.n	8001b70 <wm8994_SetVolume+0x34>
 8001b6e:	2364      	movs	r3, #100	; 0x64
 8001b70:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8001b72:	4b82      	ldr	r3, [pc, #520]	; (8001d7c <wm8994_SetVolume+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 809b 	beq.w	8001cb2 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8001b7c:	7afb      	ldrb	r3, [r7, #11]
 8001b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8001b80:	d93d      	bls.n	8001bfe <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f8fc 	bl	8001d84 <wm8994_SetMute>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4413      	add	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f240 127f 	movw	r2, #383	; 0x17f
 8001b9c:	211c      	movs	r1, #28
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f93e 	bl	8001e20 <CODEC_IO_Write>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f240 127f 	movw	r2, #383	; 0x17f
 8001bb6:	211d      	movs	r1, #29
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 f931 	bl	8001e20 <CODEC_IO_Write>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f240 127f 	movw	r2, #383	; 0x17f
 8001bd0:	2126      	movs	r1, #38	; 0x26
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f924 	bl	8001e20 <CODEC_IO_Write>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f240 127f 	movw	r2, #383	; 0x17f
 8001bea:	2127      	movs	r1, #39	; 0x27
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 f917 	bl	8001e20 <CODEC_IO_Write>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e059      	b.n	8001cb2 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8001bfe:	797b      	ldrb	r3, [r7, #5]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	2101      	movs	r1, #1
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 f8bb 	bl	8001d84 <wm8994_SetMute>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	e04c      	b.n	8001cb2 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f8b1 	bl	8001d84 <wm8994_SetMute>
 8001c22:	4602      	mov	r2, r0
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	b2d8      	uxtb	r0, r3
 8001c2e:	7afb      	ldrb	r3, [r7, #11]
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	211c      	movs	r1, #28
 8001c3e:	f000 f8ef 	bl	8001e20 <CODEC_IO_Write>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4413      	add	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	b2d8      	uxtb	r0, r3
 8001c50:	7afb      	ldrb	r3, [r7, #11]
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	211d      	movs	r1, #29
 8001c60:	f000 f8de 	bl	8001e20 <CODEC_IO_Write>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	b2d8      	uxtb	r0, r3
 8001c72:	7afb      	ldrb	r3, [r7, #11]
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2126      	movs	r1, #38	; 0x26
 8001c82:	f000 f8cd 	bl	8001e20 <CODEC_IO_Write>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	b2d8      	uxtb	r0, r3
 8001c94:	7afb      	ldrb	r3, [r7, #11]
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	2127      	movs	r1, #39	; 0x27
 8001ca4:	f000 f8bc 	bl	8001e20 <CODEC_IO_Write>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8001cb2:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <wm8994_SetVolume+0x244>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d059      	beq.n	8001d6e <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8001cba:	797b      	ldrb	r3, [r7, #5]
 8001cbc:	2b63      	cmp	r3, #99	; 0x63
 8001cbe:	d80c      	bhi.n	8001cda <wm8994_SetVolume+0x19e>
 8001cc0:	797a      	ldrb	r2, [r7, #5]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	4a2b      	ldr	r2, [pc, #172]	; (8001d78 <wm8994_SetVolume+0x23c>)
 8001ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd0:	1152      	asrs	r2, r2, #5
 8001cd2:	17db      	asrs	r3, r3, #31
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	e000      	b.n	8001cdc <wm8994_SetVolume+0x1a0>
 8001cda:	23ef      	movs	r3, #239	; 0xef
 8001cdc:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	b2d8      	uxtb	r0, r3
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cf4:	f000 f894 	bl	8001e20 <CODEC_IO_Write>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	b2d8      	uxtb	r0, r3
 8001d06:	7afb      	ldrb	r3, [r7, #11]
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	f240 4101 	movw	r1, #1025	; 0x401
 8001d18:	f000 f882 	bl	8001e20 <CODEC_IO_Write>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	b2d8      	uxtb	r0, r3
 8001d2a:	7afb      	ldrb	r3, [r7, #11]
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	f240 4104 	movw	r1, #1028	; 0x404
 8001d3c:	f000 f870 	bl	8001e20 <CODEC_IO_Write>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	b2d8      	uxtb	r0, r3
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f240 4105 	movw	r1, #1029	; 0x405
 8001d60:	f000 f85e 	bl	8001e20 <CODEC_IO_Write>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	51eb851f 	.word	0x51eb851f
 8001d7c:	2000522c 	.word	0x2000522c
 8001d80:	20005230 	.word	0x20005230

08001d84 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <wm8994_SetMute+0x98>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d039      	beq.n	8001e10 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d11c      	bne.n	8001ddc <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001daa:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f836 	bl	8001e20 <CODEC_IO_Write>
 8001db4:	4603      	mov	r3, r0
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc6:	f240 4122 	movw	r1, #1058	; 0x422
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f828 	bl	8001e20 <CODEC_IO_Write>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	e019      	b.n	8001e10 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2200      	movs	r2, #0
 8001de2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f81a 	bl	8001e20 <CODEC_IO_Write>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f240 4122 	movw	r1, #1058	; 0x422
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 f80d 	bl	8001e20 <CODEC_IO_Write>
 8001e06:	4603      	mov	r3, r0
 8001e08:	461a      	mov	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8001e10:	68fb      	ldr	r3, [r7, #12]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000522c 	.word	0x2000522c

08001e20 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	80bb      	strh	r3, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	88b9      	ldrh	r1, [r7, #4]
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 f9ad 	bl	800219c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	b2db      	uxtb	r3, r3
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <BSP_LED_Init+0x54>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a11      	ldr	r2, [pc, #68]	; (8001ea4 <BSP_LED_Init+0x54>)
 8001e60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <BSP_LED_Init+0x54>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <BSP_LED_Init+0x58>)
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8001e80:	2301      	movs	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <BSP_LED_Init+0x5c>)
 8001e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e90:	f107 020c 	add.w	r2, r7, #12
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 ff10 	bl	8002cbc <HAL_GPIO_Init>

}
 8001e9c:	bf00      	nop
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	20000018 	.word	0x20000018
 8001eac:	20000020 	.word	0x20000020

08001eb0 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <BSP_LED_On+0x2c>)
 8001ebe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <BSP_LED_On+0x30>)
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	2201      	movs	r2, #1
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f001 f8a0 	bl	8003014 <HAL_GPIO_WritePin>
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000020 	.word	0x20000020
 8001ee0:	20000018 	.word	0x20000018

08001ee4 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <BSP_LED_Off+0x2c>)
 8001ef2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	4a06      	ldr	r2, [pc, #24]	; (8001f14 <BSP_LED_Off+0x30>)
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2200      	movs	r2, #0
 8001f02:	4619      	mov	r1, r3
 8001f04:	f001 f886 	bl	8003014 <HAL_GPIO_WritePin>
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000020 	.word	0x20000020
 8001f14:	20000018 	.word	0x20000018

08001f18 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08c      	sub	sp, #48	; 0x30
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a58      	ldr	r2, [pc, #352]	; (8002084 <I2Cx_MspInit+0x16c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d15b      	bne.n	8001fe0 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8001f28:	4b57      	ldr	r3, [pc, #348]	; (8002088 <I2Cx_MspInit+0x170>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	4a56      	ldr	r2, [pc, #344]	; (8002088 <I2Cx_MspInit+0x170>)
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	6313      	str	r3, [r2, #48]	; 0x30
 8001f34:	4b54      	ldr	r3, [pc, #336]	; (8002088 <I2Cx_MspInit+0x170>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8001f40:	4b51      	ldr	r3, [pc, #324]	; (8002088 <I2Cx_MspInit+0x170>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	4a50      	ldr	r2, [pc, #320]	; (8002088 <I2Cx_MspInit+0x170>)
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4c:	4b4e      	ldr	r3, [pc, #312]	; (8002088 <I2Cx_MspInit+0x170>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001f5e:	2312      	movs	r3, #18
 8001f60:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001f66:	2302      	movs	r3, #2
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8001f6e:	f107 031c 	add.w	r3, r7, #28
 8001f72:	4619      	mov	r1, r3
 8001f74:	4845      	ldr	r0, [pc, #276]	; (800208c <I2Cx_MspInit+0x174>)
 8001f76:	f000 fea1 	bl	8002cbc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8001f7e:	230b      	movs	r3, #11
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8001f82:	f107 031c 	add.w	r3, r7, #28
 8001f86:	4619      	mov	r1, r3
 8001f88:	4841      	ldr	r0, [pc, #260]	; (8002090 <I2Cx_MspInit+0x178>)
 8001f8a:	f000 fe97 	bl	8002cbc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001f8e:	4b3e      	ldr	r3, [pc, #248]	; (8002088 <I2Cx_MspInit+0x170>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a3d      	ldr	r2, [pc, #244]	; (8002088 <I2Cx_MspInit+0x170>)
 8001f94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <I2Cx_MspInit+0x170>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001fa6:	4b38      	ldr	r3, [pc, #224]	; (8002088 <I2Cx_MspInit+0x170>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a37      	ldr	r2, [pc, #220]	; (8002088 <I2Cx_MspInit+0x170>)
 8001fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fb0:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001fb2:	4b35      	ldr	r3, [pc, #212]	; (8002088 <I2Cx_MspInit+0x170>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a34      	ldr	r2, [pc, #208]	; (8002088 <I2Cx_MspInit+0x170>)
 8001fb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fbc:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	210f      	movs	r1, #15
 8001fc2:	205f      	movs	r0, #95	; 0x5f
 8001fc4:	f000 fa51 	bl	800246a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001fc8:	205f      	movs	r0, #95	; 0x5f
 8001fca:	f000 fa6a 	bl	80024a2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	210f      	movs	r1, #15
 8001fd2:	2060      	movs	r0, #96	; 0x60
 8001fd4:	f000 fa49 	bl	800246a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8001fd8:	2060      	movs	r0, #96	; 0x60
 8001fda:	f000 fa62 	bl	80024a2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001fde:	e04d      	b.n	800207c <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001fe0:	4b29      	ldr	r3, [pc, #164]	; (8002088 <I2Cx_MspInit+0x170>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	4a28      	ldr	r2, [pc, #160]	; (8002088 <I2Cx_MspInit+0x170>)
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	6313      	str	r3, [r2, #48]	; 0x30
 8001fec:	4b26      	ldr	r3, [pc, #152]	; (8002088 <I2Cx_MspInit+0x170>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ffc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001ffe:	2312      	movs	r3, #18
 8002000:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002006:	2302      	movs	r3, #2
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800200a:	2304      	movs	r3, #4
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800200e:	f107 031c 	add.w	r3, r7, #28
 8002012:	4619      	mov	r1, r3
 8002014:	481e      	ldr	r0, [pc, #120]	; (8002090 <I2Cx_MspInit+0x178>)
 8002016:	f000 fe51 	bl	8002cbc <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800201a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800201e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	4619      	mov	r1, r3
 8002026:	481a      	ldr	r0, [pc, #104]	; (8002090 <I2Cx_MspInit+0x178>)
 8002028:	f000 fe48 	bl	8002cbc <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <I2Cx_MspInit+0x170>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	4a15      	ldr	r2, [pc, #84]	; (8002088 <I2Cx_MspInit+0x170>)
 8002032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002036:	6413      	str	r3, [r2, #64]	; 0x40
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <I2Cx_MspInit+0x170>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <I2Cx_MspInit+0x170>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <I2Cx_MspInit+0x170>)
 800204a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800204e:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <I2Cx_MspInit+0x170>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <I2Cx_MspInit+0x170>)
 8002056:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800205a:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	210f      	movs	r1, #15
 8002060:	201f      	movs	r0, #31
 8002062:	f000 fa02 	bl	800246a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002066:	201f      	movs	r0, #31
 8002068:	f000 fa1b 	bl	80024a2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	210f      	movs	r1, #15
 8002070:	2020      	movs	r0, #32
 8002072:	f000 f9fa 	bl	800246a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002076:	2020      	movs	r0, #32
 8002078:	f000 fa13 	bl	80024a2 <HAL_NVIC_EnableIRQ>
}
 800207c:	bf00      	nop
 800207e:	3730      	adds	r7, #48	; 0x30
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20005234 	.word	0x20005234
 8002088:	40023800 	.word	0x40023800
 800208c:	40020c00 	.word	0x40020c00
 8002090:	40020400 	.word	0x40020400

08002094 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f001 f9cd 	bl	800343c <HAL_I2C_GetState>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d125      	bne.n	80020f4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a14      	ldr	r2, [pc, #80]	; (80020fc <I2Cx_Init+0x68>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d103      	bne.n	80020b8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a13      	ldr	r2, [pc, #76]	; (8002100 <I2Cx_Init+0x6c>)
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	e002      	b.n	80020be <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a12      	ldr	r2, [pc, #72]	; (8002104 <I2Cx_Init+0x70>)
 80020bc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a11      	ldr	r2, [pc, #68]	; (8002108 <I2Cx_Init+0x74>)
 80020c2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff15 	bl	8001f18 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 ffaa 	bl	8003048 <HAL_I2C_Init>
  }
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20005234 	.word	0x20005234
 8002100:	40006000 	.word	0x40006000
 8002104:	40005400 	.word	0x40005400
 8002108:	40912732 	.word	0x40912732

0800210c <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af04      	add	r7, sp, #16
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	4608      	mov	r0, r1
 8002116:	4611      	mov	r1, r2
 8002118:	461a      	mov	r2, r3
 800211a:	4603      	mov	r3, r0
 800211c:	72fb      	strb	r3, [r7, #11]
 800211e:	460b      	mov	r3, r1
 8002120:	813b      	strh	r3, [r7, #8]
 8002122:	4613      	mov	r3, r2
 8002124:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800212a:	7afb      	ldrb	r3, [r7, #11]
 800212c:	b299      	uxth	r1, r3
 800212e:	88f8      	ldrh	r0, [r7, #6]
 8002130:	893a      	ldrh	r2, [r7, #8]
 8002132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	4603      	mov	r3, r0
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f001 f854 	bl	80031f0 <HAL_I2C_Mem_Write>
 8002148:	4603      	mov	r3, r0
 800214a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800214c:	7dfb      	ldrb	r3, [r7, #23]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002152:	7afb      	ldrb	r3, [r7, #11]
 8002154:	4619      	mov	r1, r3
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f805 	bl	8002166 <I2Cx_Error>
  }
  return status;
 800215c:	7dfb      	ldrb	r3, [r7, #23]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 fff8 	bl	8003168 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff8b 	bl	8002094 <I2Cx_Init>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <AUDIO_IO_Init+0x10>)
 800218e:	f7ff ff81 	bl	8002094 <I2Cx_Init>
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20005234 	.word	0x20005234

0800219c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
 80021a6:	460b      	mov	r3, r1
 80021a8:	80bb      	strh	r3, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 80021ae:	887b      	ldrh	r3, [r7, #2]
 80021b0:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80021ba:	89fb      	ldrh	r3, [r7, #14]
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	b29b      	uxth	r3, r3
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b21b      	sxth	r3, r3
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80021ce:	88ba      	ldrh	r2, [r7, #4]
 80021d0:	79f9      	ldrb	r1, [r7, #7]
 80021d2:	2302      	movs	r3, #2
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	1cbb      	adds	r3, r7, #2
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2302      	movs	r3, #2
 80021dc:	4803      	ldr	r0, [pc, #12]	; (80021ec <AUDIO_IO_Write+0x50>)
 80021de:	f7ff ff95 	bl	800210c <I2Cx_WriteMultiple>
}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20005234 	.word	0x20005234

080021f0 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f847 	bl	800228c <HAL_Delay>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	af00      	add	r7, sp, #0
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800220a:	2003      	movs	r0, #3
 800220c:	f000 f922 	bl	8002454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002210:	2000      	movs	r0, #0
 8002212:	f000 f805 	bl	8002220 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002216:	f7fe fd93 	bl	8000d40 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_InitTick+0x30>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_InitTick+0x34>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	099b      	lsrs	r3, r3, #6
 8002234:	4618      	mov	r0, r3
 8002236:	f000 f942 	bl	80024be <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800223a:	2200      	movs	r2, #0
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002242:	f000 f912 	bl	800246a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000014 	.word	0x20000014
 8002254:	10624dd3 	.word	0x10624dd3

08002258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  uwTick++;
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <HAL_IncTick+0x18>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3301      	adds	r3, #1
 8002262:	4a03      	ldr	r2, [pc, #12]	; (8002270 <HAL_IncTick+0x18>)
 8002264:	6013      	str	r3, [r2, #0]
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	20005280 	.word	0x20005280

08002274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return uwTick;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_GetTick+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20005280 	.word	0x20005280

0800228c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8002298:	f7ff ffec 	bl	8002274 <HAL_GetTick>
 800229c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800229e:	bf00      	nop
 80022a0:	f7ff ffe8 	bl	8002274 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad2      	subs	r2, r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d3f7      	bcc.n	80022a0 <HAL_Delay+0x14>
  {
  }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <NVIC_SetPriorityGrouping+0x40>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <NVIC_SetPriorityGrouping+0x44>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	; (80022fc <NVIC_SetPriorityGrouping+0x40>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00
 8002300:	05fa0000 	.word	0x05fa0000

08002304 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <NVIC_GetPriorityGrouping+0x18>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0307 	and.w	r3, r3, #7
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	4907      	ldr	r1, [pc, #28]	; (8002350 <NVIC_EnableIRQ+0x30>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	2001      	movs	r0, #1
 800233a:	fa00 f202 	lsl.w	r2, r0, r2
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000e100 	.word	0xe000e100

08002354 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	6039      	str	r1, [r7, #0]
 800235e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	2b00      	cmp	r3, #0
 8002366:	da0b      	bge.n	8002380 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	490c      	ldr	r1, [pc, #48]	; (80023a0 <NVIC_SetPriority+0x4c>)
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	3b04      	subs	r3, #4
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	440b      	add	r3, r1
 800237c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800237e:	e009      	b.n	8002394 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4907      	ldr	r1, [pc, #28]	; (80023a4 <NVIC_SetPriority+0x50>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f1c3 0307 	rsb	r3, r3, #7
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	bf28      	it	cs
 80023c6:	2304      	movcs	r3, #4
 80023c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3304      	adds	r3, #4
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d902      	bls.n	80023d8 <NVIC_EncodePriority+0x30>
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3b03      	subs	r3, #3
 80023d6:	e000      	b.n	80023da <NVIC_EncodePriority+0x32>
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43da      	mvns	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	401a      	ands	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	43d9      	mvns	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	4313      	orrs	r3, r2
         );
}
 8002402:	4618      	mov	r0, r3
 8002404:	3724      	adds	r7, #36	; 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002420:	d301      	bcc.n	8002426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002422:	2301      	movs	r3, #1
 8002424:	e00f      	b.n	8002446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <SysTick_Config+0x40>)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242e:	210f      	movs	r1, #15
 8002430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002434:	f7ff ff8e 	bl	8002354 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <SysTick_Config+0x40>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <SysTick_Config+0x40>)
 8002440:	2207      	movs	r2, #7
 8002442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	e000e010 	.word	0xe000e010

08002454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff ff2d 	bl	80022bc <NVIC_SetPriorityGrouping>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246a:	b580      	push	{r7, lr}
 800246c:	b086      	sub	sp, #24
 800246e:	af00      	add	r7, sp, #0
 8002470:	4603      	mov	r3, r0
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800247c:	f7ff ff42 	bl	8002304 <NVIC_GetPriorityGrouping>
 8002480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	6978      	ldr	r0, [r7, #20]
 8002488:	f7ff ff8e 	bl	80023a8 <NVIC_EncodePriority>
 800248c:	4602      	mov	r2, r0
 800248e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff5d 	bl	8002354 <NVIC_SetPriority>
}
 800249a:	bf00      	nop
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff35 	bl	8002320 <NVIC_EnableIRQ>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff ffa2 	bl	8002410 <SysTick_Config>
 80024cc:	4603      	mov	r3, r0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d106      	bne.n	80024f4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a08      	ldr	r2, [pc, #32]	; (800250c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80024f2:	e005      	b.n	8002500 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024fa:	f023 0304 	bic.w	r3, r3, #4
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000e010 	.word	0xe000e010

08002510 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002514:	f000 f802 	bl	800251c <HAL_SYSTICK_Callback>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff fe9c 	bl	8002274 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e099      	b.n	800267c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002568:	e00f      	b.n	800258a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800256a:	f7ff fe83 	bl	8002274 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b05      	cmp	r3, #5
 8002576:	d908      	bls.n	800258a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2203      	movs	r2, #3
 8002582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e078      	b.n	800267c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1e8      	bne.n	800256a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4b38      	ldr	r3, [pc, #224]	; (8002684 <HAL_DMA_Init+0x158>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d107      	bne.n	80025f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	4313      	orrs	r3, r2
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f023 0307 	bic.w	r3, r3, #7
 800260a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	2b04      	cmp	r3, #4
 800261c:	d117      	bne.n	800264e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00e      	beq.n	800264e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fac7 	bl	8002bc4 <DMA_CheckFifoParam>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2240      	movs	r2, #64	; 0x40
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800264a:	2301      	movs	r3, #1
 800264c:	e016      	b.n	800267c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fa7e 	bl	8002b58 <DMA_CalcBaseAndBitshift>
 800265c:	4603      	mov	r3, r0
 800265e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	223f      	movs	r2, #63	; 0x3f
 8002666:	409a      	lsls	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	e010803f 	.word	0xe010803f

08002688 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e03e      	b.n	8002718 <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d101      	bne.n	80026aa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
 80026a8:	e036      	b.n	8002718 <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2200      	movs	r2, #0
 80026c8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2200      	movs	r2, #0
 80026e0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2221      	movs	r2, #33	; 0x21
 80026e8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fa34 	bl	8002b58 <DMA_CalcBaseAndBitshift>
 80026f0:	4603      	mov	r3, r0
 80026f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	223f      	movs	r2, #63	; 0x3f
 80026fa:	409a      	lsls	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_DMA_Start_IT+0x26>
 8002742:	2302      	movs	r3, #2
 8002744:	e048      	b.n	80027d8 <HAL_DMA_Start_IT+0xb8>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d137      	bne.n	80027ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2202      	movs	r2, #2
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f9c4 	bl	8002afc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	223f      	movs	r2, #63	; 0x3f
 800277a:	409a      	lsls	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0216 	orr.w	r2, r2, #22
 800278e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800279e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0208 	orr.w	r2, r2, #8
 80027b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e005      	b.n	80027d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027d2:	2302      	movs	r3, #2
 80027d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80027ec:	4b8e      	ldr	r3, [pc, #568]	; (8002a28 <HAL_DMA_IRQHandler+0x248>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a8e      	ldr	r2, [pc, #568]	; (8002a2c <HAL_DMA_IRQHandler+0x24c>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	0a9b      	lsrs	r3, r3, #10
 80027f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280a:	2208      	movs	r2, #8
 800280c:	409a      	lsls	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d01a      	beq.n	800284c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0204 	bic.w	r2, r2, #4
 8002832:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	2208      	movs	r2, #8
 800283a:	409a      	lsls	r2, r3
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	4a77      	ldr	r2, [pc, #476]	; (8002a30 <HAL_DMA_IRQHandler+0x250>)
 8002852:	409a      	lsls	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d012      	beq.n	8002882 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	4a70      	ldr	r2, [pc, #448]	; (8002a30 <HAL_DMA_IRQHandler+0x250>)
 8002870:	409a      	lsls	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287a:	f043 0202 	orr.w	r2, r3, #2
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	4a6b      	ldr	r2, [pc, #428]	; (8002a34 <HAL_DMA_IRQHandler+0x254>)
 8002888:	409a      	lsls	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d012      	beq.n	80028b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00b      	beq.n	80028b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	4a63      	ldr	r2, [pc, #396]	; (8002a34 <HAL_DMA_IRQHandler+0x254>)
 80028a6:	409a      	lsls	r2, r3
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f043 0204 	orr.w	r2, r3, #4
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	2210      	movs	r2, #16
 80028be:	409a      	lsls	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d043      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d03c      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	2210      	movs	r2, #16
 80028dc:	409a      	lsls	r2, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d018      	beq.n	8002922 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d108      	bne.n	8002910 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d024      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
 800290e:	e01f      	b.n	8002950 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01b      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
 8002920:	e016      	b.n	8002950 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0208 	bic.w	r2, r2, #8
 800293e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002954:	2220      	movs	r2, #32
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8093 	beq.w	8002a88 <HAL_DMA_IRQHandler+0x2a8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 808b 	beq.w	8002a88 <HAL_DMA_IRQHandler+0x2a8>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	2220      	movs	r2, #32
 8002978:	409a      	lsls	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b05      	cmp	r3, #5
 8002988:	d137      	bne.n	80029fa <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0216 	bic.w	r2, r2, #22
 8002998:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d103      	bne.n	80029ba <HAL_DMA_IRQHandler+0x1da>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0208 	bic.w	r2, r2, #8
 80029c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	223f      	movs	r2, #63	; 0x3f
 80029d0:	409a      	lsls	r2, r3
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 8082 	beq.w	8002af4 <HAL_DMA_IRQHandler+0x314>
        {
          hdma->XferAbortCallback(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	4798      	blx	r3
        }
        return;
 80029f8:	e07c      	b.n	8002af4 <HAL_DMA_IRQHandler+0x314>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x26a>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d110      	bne.n	8002a38 <HAL_DMA_IRQHandler+0x258>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d034      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
 8002a26:	e02f      	b.n	8002a88 <HAL_DMA_IRQHandler+0x2a8>
 8002a28:	20000014 	.word	0x20000014
 8002a2c:	1b4e81b5 	.word	0x1b4e81b5
 8002a30:	00800001 	.word	0x00800001
 8002a34:	00800004 	.word	0x00800004
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d023      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4798      	blx	r3
 8002a48:	e01e      	b.n	8002a88 <HAL_DMA_IRQHandler+0x2a8>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10f      	bne.n	8002a78 <HAL_DMA_IRQHandler+0x298>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0210 	bic.w	r2, r2, #16
 8002a66:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x2a8>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d032      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x316>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d022      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x302>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2205      	movs	r2, #5
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d307      	bcc.n	8002ad0 <HAL_DMA_IRQHandler+0x2f0>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f2      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x2d4>
 8002ace:	e000      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x2f2>
          break;
 8002ad0:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x316>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4798      	blx	r3
 8002af2:	e000      	b.n	8002af6 <HAL_DMA_IRQHandler+0x316>
        return;
 8002af4:	bf00      	nop
    }
  }
}
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	d108      	bne.n	8002b3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b3a:	e007      	b.n	8002b4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	3b10      	subs	r3, #16
 8002b68:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <DMA_CalcBaseAndBitshift+0x60>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <DMA_CalcBaseAndBitshift+0x64>)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4413      	add	r3, r2
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d908      	bls.n	8002b98 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	1d1a      	adds	r2, r3, #4
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	659a      	str	r2, [r3, #88]	; 0x58
 8002b96:	e006      	b.n	8002ba6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <DMA_CalcBaseAndBitshift+0x68>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	aaaaaaab 	.word	0xaaaaaaab
 8002bbc:	080060d0 	.word	0x080060d0
 8002bc0:	fffffc00 	.word	0xfffffc00

08002bc4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d11f      	bne.n	8002c1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d856      	bhi.n	8002c92 <DMA_CheckFifoParam+0xce>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <DMA_CheckFifoParam+0x28>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002c0f 	.word	0x08002c0f
 8002bf4:	08002bfd 	.word	0x08002bfd
 8002bf8:	08002c93 	.word	0x08002c93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d046      	beq.n	8002c96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0c:	e043      	b.n	8002c96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c16:	d140      	bne.n	8002c9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1c:	e03d      	b.n	8002c9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c26:	d121      	bne.n	8002c6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d837      	bhi.n	8002c9e <DMA_CheckFifoParam+0xda>
 8002c2e:	a201      	add	r2, pc, #4	; (adr r2, 8002c34 <DMA_CheckFifoParam+0x70>)
 8002c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c34:	08002c45 	.word	0x08002c45
 8002c38:	08002c4b 	.word	0x08002c4b
 8002c3c:	08002c45 	.word	0x08002c45
 8002c40:	08002c5d 	.word	0x08002c5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      break;
 8002c48:	e030      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d025      	beq.n	8002ca2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c5a:	e022      	b.n	8002ca2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c64:	d11f      	bne.n	8002ca6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c6a:	e01c      	b.n	8002ca6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d903      	bls.n	8002c7a <DMA_CheckFifoParam+0xb6>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d003      	beq.n	8002c80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c78:	e018      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7e:	e015      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00e      	beq.n	8002caa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c90:	e00b      	b.n	8002caa <DMA_CheckFifoParam+0xe6>
      break;
 8002c92:	bf00      	nop
 8002c94:	e00a      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      break;
 8002c96:	bf00      	nop
 8002c98:	e008      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      break;
 8002c9a:	bf00      	nop
 8002c9c:	e006      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e004      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e002      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      break;   
 8002ca6:	bf00      	nop
 8002ca8:	e000      	b.n	8002cac <DMA_CheckFifoParam+0xe8>
      break;
 8002caa:	bf00      	nop
    }
  } 
  
  return status; 
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop

08002cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	; 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	e175      	b.n	8002fc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002cdc:	2201      	movs	r2, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	f040 8164 	bne.w	8002fc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x4e>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b12      	cmp	r3, #18
 8002d08:	d123      	bne.n	8002d52 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	08da      	lsrs	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3208      	adds	r2, #8
 8002d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	220f      	movs	r2, #15
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	08da      	lsrs	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3208      	adds	r2, #8
 8002d4c:	69b9      	ldr	r1, [r7, #24]
 8002d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0203 	and.w	r2, r3, #3
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d00b      	beq.n	8002da6 <HAL_GPIO_Init+0xea>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d007      	beq.n	8002da6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d9a:	2b11      	cmp	r3, #17
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b12      	cmp	r3, #18
 8002da4:	d130      	bne.n	8002e08 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	2203      	movs	r2, #3
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ddc:	2201      	movs	r2, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 0201 	and.w	r2, r3, #1
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80be 	beq.w	8002fc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e46:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <HAL_GPIO_Init+0x324>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	4a65      	ldr	r2, [pc, #404]	; (8002fe0 <HAL_GPIO_Init+0x324>)
 8002e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e50:	6453      	str	r3, [r2, #68]	; 0x44
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_GPIO_Init+0x324>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e5e:	4a61      	ldr	r2, [pc, #388]	; (8002fe4 <HAL_GPIO_Init+0x328>)
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	3302      	adds	r3, #2
 8002e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	220f      	movs	r2, #15
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a58      	ldr	r2, [pc, #352]	; (8002fe8 <HAL_GPIO_Init+0x32c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d037      	beq.n	8002efa <HAL_GPIO_Init+0x23e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a57      	ldr	r2, [pc, #348]	; (8002fec <HAL_GPIO_Init+0x330>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d031      	beq.n	8002ef6 <HAL_GPIO_Init+0x23a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a56      	ldr	r2, [pc, #344]	; (8002ff0 <HAL_GPIO_Init+0x334>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02b      	beq.n	8002ef2 <HAL_GPIO_Init+0x236>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a55      	ldr	r2, [pc, #340]	; (8002ff4 <HAL_GPIO_Init+0x338>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d025      	beq.n	8002eee <HAL_GPIO_Init+0x232>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a54      	ldr	r2, [pc, #336]	; (8002ff8 <HAL_GPIO_Init+0x33c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01f      	beq.n	8002eea <HAL_GPIO_Init+0x22e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a53      	ldr	r2, [pc, #332]	; (8002ffc <HAL_GPIO_Init+0x340>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d019      	beq.n	8002ee6 <HAL_GPIO_Init+0x22a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a52      	ldr	r2, [pc, #328]	; (8003000 <HAL_GPIO_Init+0x344>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_GPIO_Init+0x226>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a51      	ldr	r2, [pc, #324]	; (8003004 <HAL_GPIO_Init+0x348>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00d      	beq.n	8002ede <HAL_GPIO_Init+0x222>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a50      	ldr	r2, [pc, #320]	; (8003008 <HAL_GPIO_Init+0x34c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <HAL_GPIO_Init+0x21e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4f      	ldr	r2, [pc, #316]	; (800300c <HAL_GPIO_Init+0x350>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_GPIO_Init+0x21a>
 8002ed2:	2309      	movs	r3, #9
 8002ed4:	e012      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ed6:	230a      	movs	r3, #10
 8002ed8:	e010      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002eda:	2308      	movs	r3, #8
 8002edc:	e00e      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ede:	2307      	movs	r3, #7
 8002ee0:	e00c      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ee2:	2306      	movs	r3, #6
 8002ee4:	e00a      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ee6:	2305      	movs	r3, #5
 8002ee8:	e008      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002eea:	2304      	movs	r3, #4
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e004      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e002      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002efa:	2300      	movs	r3, #0
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	f002 0203 	and.w	r2, r2, #3
 8002f02:	0092      	lsls	r2, r2, #2
 8002f04:	4093      	lsls	r3, r2
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f0c:	4935      	ldr	r1, [pc, #212]	; (8002fe4 <HAL_GPIO_Init+0x328>)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	3302      	adds	r3, #2
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f3e:	4a34      	ldr	r2, [pc, #208]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f44:	4b32      	ldr	r3, [pc, #200]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f68:	4a29      	ldr	r2, [pc, #164]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6e:	4b28      	ldr	r3, [pc, #160]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f92:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f98:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b0f      	cmp	r3, #15
 8002fcc:	f67f ae86 	bls.w	8002cdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	; 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40013800 	.word	0x40013800
 8002fe8:	40020000 	.word	0x40020000
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	40020800 	.word	0x40020800
 8002ff4:	40020c00 	.word	0x40020c00
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40021400 	.word	0x40021400
 8003000:	40021800 	.word	0x40021800
 8003004:	40021c00 	.word	0x40021c00
 8003008:	40022000 	.word	0x40022000
 800300c:	40022400 	.word	0x40022400
 8003010:	40013c00 	.word	0x40013c00

08003014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
 8003020:	4613      	mov	r3, r2
 8003022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003024:	787b      	ldrb	r3, [r7, #1]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003030:	e003      	b.n	800303a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	041a      	lsls	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	619a      	str	r2, [r3, #24]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e07f      	b.n	800315a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f8a9 	bl	80031c6 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2224      	movs	r2, #36	; 0x24
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003098:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d107      	bne.n	80030c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	e006      	b.n	80030d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d104      	bne.n	80030e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <HAL_I2C_Init+0x11c>)
 80030ee:	430b      	orrs	r3, r1
 80030f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003100:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	ea42 0103 	orr.w	r1, r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	021a      	lsls	r2, r3, #8
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69d9      	ldr	r1, [r3, #28]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	02008000 	.word	0x02008000

08003168 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e021      	b.n	80031be <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2224      	movs	r2, #36	; 0x24
 800317e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f821 	bl	80031da <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	4608      	mov	r0, r1
 80031fa:	4611      	mov	r1, r2
 80031fc:	461a      	mov	r2, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	817b      	strh	r3, [r7, #10]
 8003202:	460b      	mov	r3, r1
 8003204:	813b      	strh	r3, [r7, #8]
 8003206:	4613      	mov	r3, r2
 8003208:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b20      	cmp	r3, #32
 8003218:	f040 8109 	bne.w	800342e <HAL_I2C_Mem_Write+0x23e>
  {
    if((pData == NULL) || (Size == 0U))
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <HAL_I2C_Mem_Write+0x38>
 8003222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e101      	b.n	8003430 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_I2C_Mem_Write+0x4a>
 8003236:	2302      	movs	r3, #2
 8003238:	e0fa      	b.n	8003430 <HAL_I2C_Mem_Write+0x240>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003242:	f7ff f817 	bl	8002274 <HAL_GetTick>
 8003246:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2319      	movs	r3, #25
 800324e:	2201      	movs	r2, #1
 8003250:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f982 	bl	800355e <I2C_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e0e5      	b.n	8003430 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2221      	movs	r2, #33	; 0x21
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2240      	movs	r2, #64	; 0x40
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a3a      	ldr	r2, [r7, #32]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003284:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800328c:	88f8      	ldrh	r0, [r7, #6]
 800328e:	893a      	ldrh	r2, [r7, #8]
 8003290:	8979      	ldrh	r1, [r7, #10]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	4603      	mov	r3, r0
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f8db 	bl	8003458 <I2C_RequestMemoryWrite>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00f      	beq.n	80032c8 <HAL_I2C_Mem_Write+0xd8>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d105      	bne.n	80032bc <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0b9      	b.n	8003430 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e0b3      	b.n	8003430 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2bff      	cmp	r3, #255	; 0xff
 80032d0:	d90e      	bls.n	80032f0 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	22ff      	movs	r2, #255	; 0xff
 80032d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	8979      	ldrh	r1, [r7, #10]
 80032e0:	2300      	movs	r3, #0
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 fa4d 	bl	8003788 <I2C_TransferConfig>
 80032ee:	e00f      	b.n	8003310 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	8979      	ldrh	r1, [r7, #10]
 8003302:	2300      	movs	r3, #0
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fa3c 	bl	8003788 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f95c 	bl	80035d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <HAL_I2C_Mem_Write+0x140>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	2b04      	cmp	r3, #4
 8003326:	d101      	bne.n	800332c <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e081      	b.n	8003430 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e07f      	b.n	8003430 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	1c59      	adds	r1, r3, #1
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	6251      	str	r1, [r2, #36]	; 0x24
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d135      	bne.n	80033d0 <HAL_I2C_Mem_Write+0x1e0>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d030      	beq.n	80033d0 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	2200      	movs	r2, #0
 8003376:	2180      	movs	r1, #128	; 0x80
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f8f0 	bl	800355e <I2C_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e053      	b.n	8003430 <HAL_I2C_Mem_Write+0x240>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2bff      	cmp	r3, #255	; 0xff
 8003390:	d90e      	bls.n	80033b0 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	22ff      	movs	r2, #255	; 0xff
 8003396:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339c:	b2da      	uxtb	r2, r3
 800339e:	8979      	ldrh	r1, [r7, #10]
 80033a0:	2300      	movs	r3, #0
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f9ed 	bl	8003788 <I2C_TransferConfig>
 80033ae:	e00f      	b.n	80033d0 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	8979      	ldrh	r1, [r7, #10]
 80033c2:	2300      	movs	r3, #0
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f9dc 	bl	8003788 <I2C_TransferConfig>
        }
      }

    }while(hi2c->XferCount > 0U);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d19a      	bne.n	8003310 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f937 	bl	8003652 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <HAL_I2C_Mem_Write+0x20a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d101      	bne.n	80033f6 <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e01c      	b.n	8003430 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e01a      	b.n	8003430 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2220      	movs	r2, #32
 8003400:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_I2C_Mem_Write+0x248>)
 800340e:	400b      	ands	r3, r1
 8003410:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 800342e:	2302      	movs	r3, #2
  }
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	fe00e800 	.word	0xfe00e800

0800343c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344a:	b2db      	uxtb	r3, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af02      	add	r7, sp, #8
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	4608      	mov	r0, r1
 8003462:	4611      	mov	r1, r2
 8003464:	461a      	mov	r2, r3
 8003466:	4603      	mov	r3, r0
 8003468:	817b      	strh	r3, [r7, #10]
 800346a:	460b      	mov	r3, r1
 800346c:	813b      	strh	r3, [r7, #8]
 800346e:	4613      	mov	r3, r2
 8003470:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	8979      	ldrh	r1, [r7, #10]
 8003478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f980 	bl	8003788 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	69b9      	ldr	r1, [r7, #24]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f8a0 	bl	80035d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <I2C_RequestMemoryWrite+0x50>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	2b04      	cmp	r3, #4
 800349e:	d101      	bne.n	80034a4 <I2C_RequestMemoryWrite+0x4c>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e034      	b.n	800350e <I2C_RequestMemoryWrite+0xb6>
    }
    else
    {
      return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e032      	b.n	800350e <I2C_RequestMemoryWrite+0xb6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <I2C_RequestMemoryWrite+0x62>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034ae:	893b      	ldrh	r3, [r7, #8]
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
 80034b8:	e01b      	b.n	80034f2 <I2C_RequestMemoryWrite+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034ba:	893b      	ldrh	r3, [r7, #8]
 80034bc:	0a1b      	lsrs	r3, r3, #8
 80034be:	b29b      	uxth	r3, r3
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	69b9      	ldr	r1, [r7, #24]
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f880 	bl	80035d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <I2C_RequestMemoryWrite+0x90>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d101      	bne.n	80034e4 <I2C_RequestMemoryWrite+0x8c>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e014      	b.n	800350e <I2C_RequestMemoryWrite+0xb6>
      }
      else
      {
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e012      	b.n	800350e <I2C_RequestMemoryWrite+0xb6>
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034e8:	893b      	ldrh	r3, [r7, #8]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2200      	movs	r2, #0
 80034fa:	2180      	movs	r1, #128	; 0x80
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f82e 	bl	800355e <I2C_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <I2C_RequestMemoryWrite+0xb4>
  {
    return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e000      	b.n	800350e <I2C_RequestMemoryWrite+0xb6>
  }

return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b02      	cmp	r3, #2
 800352a:	d103      	bne.n	8003534 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2200      	movs	r2, #0
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d007      	beq.n	8003552 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699a      	ldr	r2, [r3, #24]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0201 	orr.w	r2, r2, #1
 8003550:	619a      	str	r2, [r3, #24]
  }
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800356e:	e01c      	b.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003576:	d018      	beq.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <I2C_WaitOnFlagUntilTimeout+0x30>
 800357e:	f7fe fe79 	bl	8002274 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d20d      	bcs.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e00f      	b.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x6c>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4013      	ands	r3, r2
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	bf0c      	ite	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	2300      	movne	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d0d3      	beq.n	8003570 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035de:	e02c      	b.n	800363a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f871 	bl	80036cc <I2C_IsAcknowledgeFailed>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e02a      	b.n	800364a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035fa:	d01e      	beq.n	800363a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003602:	f7fe fe37 	bl	8002274 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	d213      	bcs.n	800363a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	f043 0220 	orr.w	r2, r3, #32
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e007      	b.n	800364a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b02      	cmp	r3, #2
 8003646:	d1cb      	bne.n	80035e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800365e:	e028      	b.n	80036b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f831 	bl	80036cc <I2C_IsAcknowledgeFailed>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e026      	b.n	80036c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800367a:	f7fe fdfb 	bl	8002274 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d213      	bcs.n	80036b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e007      	b.n	80036c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d1cf      	bne.n	8003660 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d148      	bne.n	8003778 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e6:	e01c      	b.n	8003722 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036ee:	d018      	beq.n	8003722 <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <I2C_IsAcknowledgeFailed+0x3a>
 80036f6:	f7fe fdbd 	bl	8002274 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	429a      	cmp	r2, r3
 8003704:	d20d      	bcs.n	8003722 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e02b      	b.n	800377a <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b20      	cmp	r3, #32
 800372e:	d1db      	bne.n	80036e8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2210      	movs	r2, #16
 8003736:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2220      	movs	r2, #32
 800373e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7ff fee8 	bl	8003516 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <I2C_IsAcknowledgeFailed+0xb8>)
 8003752:	400b      	ands	r3, r1
 8003754:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2204      	movs	r2, #4
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	fe00e800 	.word	0xfe00e800

08003788 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	460b      	mov	r3, r1
 8003794:	817b      	strh	r3, [r7, #10]
 8003796:	4613      	mov	r3, r2
 8003798:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <I2C_TransferConfig+0x58>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 80037ae:	897b      	ldrh	r3, [r7, #10]
 80037b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037b4:	7a7b      	ldrb	r3, [r7, #9]
 80037b6:	041b      	lsls	r3, r3, #16
 80037b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	605a      	str	r2, [r3, #4]
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	fc009800 	.word	0xfc009800

080037e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037ee:	4b23      	ldr	r3, [pc, #140]	; (800387c <HAL_PWREx_EnableOverDrive+0x98>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	4a22      	ldr	r2, [pc, #136]	; (800387c <HAL_PWREx_EnableOverDrive+0x98>)
 80037f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f8:	6413      	str	r3, [r2, #64]	; 0x40
 80037fa:	4b20      	ldr	r3, [pc, #128]	; (800387c <HAL_PWREx_EnableOverDrive+0x98>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003806:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1d      	ldr	r2, [pc, #116]	; (8003880 <HAL_PWREx_EnableOverDrive+0x9c>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003810:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003812:	f7fe fd2f 	bl	8002274 <HAL_GetTick>
 8003816:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003818:	e009      	b.n	800382e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800381a:	f7fe fd2b 	bl	8002274 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003828:	d901      	bls.n	800382e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e022      	b.n	8003874 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800382e:	4b14      	ldr	r3, [pc, #80]	; (8003880 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383a:	d1ee      	bne.n	800381a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800383c:	4b10      	ldr	r3, [pc, #64]	; (8003880 <HAL_PWREx_EnableOverDrive+0x9c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a0f      	ldr	r2, [pc, #60]	; (8003880 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003846:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003848:	f7fe fd14 	bl	8002274 <HAL_GetTick>
 800384c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800384e:	e009      	b.n	8003864 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003850:	f7fe fd10 	bl	8002274 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800385e:	d901      	bls.n	8003864 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e007      	b.n	8003874 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003870:	d1ee      	bne.n	8003850 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40023800 	.word	0x40023800
 8003880:	40007000 	.word	0x40007000

08003884 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b092      	sub	sp, #72	; 0x48
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	643b      	str	r3, [r7, #64]	; 0x40
  FlagStatus pwrclkchanged = RESET;
 8003890:	2300      	movs	r3, #0
 8003892:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 8087 	beq.w	80039b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038a4:	4b97      	ldr	r3, [pc, #604]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d00c      	beq.n	80038ca <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038b0:	4b94      	ldr	r3, [pc, #592]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 030c 	and.w	r3, r3, #12
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d112      	bne.n	80038e2 <HAL_RCC_OscConfig+0x5e>
 80038bc:	4b91      	ldr	r3, [pc, #580]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c8:	d10b      	bne.n	80038e2 <HAL_RCC_OscConfig+0x5e>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ca:	4b8e      	ldr	r3, [pc, #568]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d06c      	beq.n	80039b0 <HAL_RCC_OscConfig+0x12c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d168      	bne.n	80039b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e281      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x76>
 80038ec:	4b85      	ldr	r3, [pc, #532]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a84      	ldr	r2, [pc, #528]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 80038f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	e02e      	b.n	8003958 <HAL_RCC_OscConfig+0xd4>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0x98>
 8003902:	4b80      	ldr	r3, [pc, #512]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a7f      	ldr	r2, [pc, #508]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	4b7d      	ldr	r3, [pc, #500]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a7c      	ldr	r2, [pc, #496]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e01d      	b.n	8003958 <HAL_RCC_OscConfig+0xd4>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0xbc>
 8003926:	4b77      	ldr	r3, [pc, #476]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a76      	ldr	r2, [pc, #472]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 800392c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4b74      	ldr	r3, [pc, #464]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a73      	ldr	r2, [pc, #460]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e00b      	b.n	8003958 <HAL_RCC_OscConfig+0xd4>
 8003940:	4b70      	ldr	r3, [pc, #448]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a6f      	ldr	r2, [pc, #444]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	4b6d      	ldr	r3, [pc, #436]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a6c      	ldr	r2, [pc, #432]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003956:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d013      	beq.n	8003988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe fc88 	bl	8002274 <HAL_GetTick>
 8003964:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003968:	f7fe fc84 	bl	8002274 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	; 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e235      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	4b62      	ldr	r3, [pc, #392]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0xe4>
 8003986:	e014      	b.n	80039b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe fc74 	bl	8002274 <HAL_GetTick>
 800398c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x11e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003990:	f7fe fc70 	bl	8002274 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e221      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a2:	4b58      	ldr	r3, [pc, #352]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x10c>
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x12e>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d07d      	beq.n	8003aba <HAL_RCC_OscConfig+0x236>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039be:	4b51      	ldr	r3, [pc, #324]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <HAL_RCC_OscConfig+0x15e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ca:	4b4e      	ldr	r3, [pc, #312]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d126      	bne.n	8003a24 <HAL_RCC_OscConfig+0x1a0>
 80039d6:	4b4b      	ldr	r3, [pc, #300]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d120      	bne.n	8003a24 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e2:	4b48      	ldr	r3, [pc, #288]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_RCC_OscConfig+0x176>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d001      	beq.n	80039fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e1f5      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fa:	4b42      	ldr	r3, [pc, #264]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6919      	ldr	r1, [r3, #16]
 8003a06:	23f8      	movs	r3, #248	; 0xf8
 8003a08:	63fb      	str	r3, [r7, #60]	; 0x3c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0c:	fa93 f3a3 	rbit	r3, r3
 8003a10:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	fab3 f383 	clz	r3, r3
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	4939      	ldr	r1, [pc, #228]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a22:	e04a      	b.n	8003aba <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02d      	beq.n	8003a88 <HAL_RCC_OscConfig+0x204>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a2c:	4b35      	ldr	r3, [pc, #212]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a34      	ldr	r2, [pc, #208]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fe fc1c 	bl	8002274 <HAL_GetTick>
 8003a3c:	6438      	str	r0, [r7, #64]	; 0x40

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x1ce>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a40:	f7fe fc18 	bl	8002274 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e1c9      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a52:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x1bc>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	4b29      	ldr	r3, [pc, #164]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6919      	ldr	r1, [r3, #16]
 8003a6a:	23f8      	movs	r3, #248	; 0xf8
 8003a6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a70:	fa93 f3a3 	rbit	r3, r3
 8003a74:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	fab3 f383 	clz	r3, r3
 8003a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a80:	4920      	ldr	r1, [pc, #128]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]
 8003a86:	e018      	b.n	8003aba <HAL_RCC_OscConfig+0x236>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a88:	4b1e      	ldr	r3, [pc, #120]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fe fbee 	bl	8002274 <HAL_GetTick>
 8003a98:	6438      	str	r0, [r7, #64]	; 0x40
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9c:	f7fe fbea 	bl	8002274 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e19b      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aae:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x218>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d039      	beq.n	8003b3a <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d01c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x284>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ace:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad2:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ada:	f7fe fbcb 	bl	8002274 <HAL_GetTick>
 8003ade:	6438      	str	r0, [r7, #64]	; 0x40
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae2:	f7fe fbc7 	bl	8002274 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e178      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <HAL_RCC_OscConfig+0x280>)
 8003af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x25e>
 8003b00:	e01b      	b.n	8003b3a <HAL_RCC_OscConfig+0x2b6>
 8003b02:	bf00      	nop
 8003b04:	40023800 	.word	0x40023800
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b08:	4b9e      	ldr	r3, [pc, #632]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0c:	4a9d      	ldr	r2, [pc, #628]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fe fbae 	bl	8002274 <HAL_GetTick>
 8003b18:	6438      	str	r0, [r7, #64]	; 0x40
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x2aa>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1c:	f7fe fbaa 	bl	8002274 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x2aa>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e15b      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2e:	4b95      	ldr	r3, [pc, #596]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x298>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 80a6 	beq.w	8003c94 <HAL_RCC_OscConfig+0x410>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b48:	4b8e      	ldr	r3, [pc, #568]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10e      	bne.n	8003b72 <HAL_RCC_OscConfig+0x2ee>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b54:	4b8b      	ldr	r3, [pc, #556]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	4a8a      	ldr	r2, [pc, #552]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b60:	4b88      	ldr	r3, [pc, #544]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b72:	4b85      	ldr	r3, [pc, #532]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d118      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x32c>
    {    
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b7e:	4b82      	ldr	r3, [pc, #520]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a81      	ldr	r2, [pc, #516]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8a:	f7fe fb73 	bl	8002274 <HAL_GetTick>
 8003b8e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x320>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b92:	f7fe fb6f 	bl	8002274 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b64      	cmp	r3, #100	; 0x64
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x320>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e120      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba4:	4b78      	ldr	r3, [pc, #480]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x30e>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x342>
 8003bb8:	4b72      	ldr	r3, [pc, #456]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	4a71      	ldr	r2, [pc, #452]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc4:	e02d      	b.n	8003c22 <HAL_RCC_OscConfig+0x39e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x364>
 8003bce:	4b6d      	ldr	r3, [pc, #436]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	4a6c      	ldr	r2, [pc, #432]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bda:	4b6a      	ldr	r3, [pc, #424]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a69      	ldr	r2, [pc, #420]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003be0:	f023 0304 	bic.w	r3, r3, #4
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70
 8003be6:	e01c      	b.n	8003c22 <HAL_RCC_OscConfig+0x39e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d10c      	bne.n	8003c0a <HAL_RCC_OscConfig+0x386>
 8003bf0:	4b64      	ldr	r3, [pc, #400]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	4a63      	ldr	r2, [pc, #396]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003bf6:	f043 0304 	orr.w	r3, r3, #4
 8003bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfc:	4b61      	ldr	r3, [pc, #388]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	4a60      	ldr	r2, [pc, #384]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6713      	str	r3, [r2, #112]	; 0x70
 8003c08:	e00b      	b.n	8003c22 <HAL_RCC_OscConfig+0x39e>
 8003c0a:	4b5e      	ldr	r3, [pc, #376]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a5d      	ldr	r2, [pc, #372]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6713      	str	r3, [r2, #112]	; 0x70
 8003c16:	4b5b      	ldr	r3, [pc, #364]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	4a5a      	ldr	r2, [pc, #360]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003c1c:	f023 0304 	bic.w	r3, r3, #4
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d015      	beq.n	8003c56 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2a:	f7fe fb23 	bl	8002274 <HAL_GetTick>
 8003c2e:	6438      	str	r0, [r7, #64]	; 0x40
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fe fb1f 	bl	8002274 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e0ce      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c48:	4b4e      	ldr	r3, [pc, #312]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ee      	beq.n	8003c32 <HAL_RCC_OscConfig+0x3ae>
 8003c54:	e014      	b.n	8003c80 <HAL_RCC_OscConfig+0x3fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c56:	f7fe fb0d 	bl	8002274 <HAL_GetTick>
 8003c5a:	6438      	str	r0, [r7, #64]	; 0x40
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fe fb09 	bl	8002274 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e0b8      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c74:	4b43      	ldr	r3, [pc, #268]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ee      	bne.n	8003c5e <HAL_RCC_OscConfig+0x3da>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c88:	4b3e      	ldr	r3, [pc, #248]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	4a3d      	ldr	r2, [pc, #244]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80a3 	beq.w	8003de4 <HAL_RCC_OscConfig+0x560>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c9e:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	f000 809a 	beq.w	8003de0 <HAL_RCC_OscConfig+0x55c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d17b      	bne.n	8003dac <HAL_RCC_OscConfig+0x528>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb4:	4b33      	ldr	r3, [pc, #204]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a32      	ldr	r2, [pc, #200]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fad8 	bl	8002274 <HAL_GetTick>
 8003cc4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fe fad4 	bl	8002274 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e085      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	4b2a      	ldr	r3, [pc, #168]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x444>
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003cf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	613b      	str	r3, [r7, #16]
  return(result);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	fab3 f383 	clz	r3, r3
 8003d08:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	1e59      	subs	r1, r3, #1
 8003d16:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003d1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d34:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	623b      	str	r3, [r7, #32]
  return(result);
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	fab3 f383 	clz	r3, r3
 8003d48:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d52:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	fa93 f3a3 	rbit	r3, r3
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	fab3 f383 	clz	r3, r3
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	4906      	ldr	r1, [pc, #24]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a03      	ldr	r2, [pc, #12]	; (8003d84 <HAL_RCC_OscConfig+0x500>)
 8003d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fe fa7a 	bl	8002274 <HAL_GetTick>
 8003d80:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d82:	e00c      	b.n	8003d9e <HAL_RCC_OscConfig+0x51a>
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7fe fa72 	bl	8002274 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x51a>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e023      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <HAL_RCC_OscConfig+0x56c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0x508>
 8003daa:	e01b      	b.n	8003de4 <HAL_RCC_OscConfig+0x560>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <HAL_RCC_OscConfig+0x56c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <HAL_RCC_OscConfig+0x56c>)
 8003db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fe fa5c 	bl	8002274 <HAL_GetTick>
 8003dbc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x54e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc0:	f7fe fa58 	bl	8002274 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x54e>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e009      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd2:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <HAL_RCC_OscConfig+0x56c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x53c>
 8003dde:	e001      	b.n	8003de4 <HAL_RCC_OscConfig+0x560>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x562>
    }
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3748      	adds	r7, #72	; 0x48
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40023800 	.word	0x40023800

08003df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003e02:	4b77      	ldr	r3, [pc, #476]	; (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d910      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e10:	4b73      	ldr	r3, [pc, #460]	; (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 020f 	bic.w	r2, r3, #15
 8003e18:	4971      	ldr	r1, [pc, #452]	; (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e20:	4b6f      	ldr	r3, [pc, #444]	; (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 030f 	and.w	r3, r3, #15
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d001      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e0d2      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d008      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e3e:	4b69      	ldr	r3, [pc, #420]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	4966      	ldr	r1, [pc, #408]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d06a      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d107      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e64:	4b5f      	ldr	r3, [pc, #380]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d115      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0b1      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7c:	4b59      	ldr	r3, [pc, #356]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d109      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0a5      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8c:	4b55      	ldr	r3, [pc, #340]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e09d      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e9c:	4b51      	ldr	r3, [pc, #324]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f023 0203 	bic.w	r2, r3, #3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	494e      	ldr	r1, [pc, #312]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eae:	f7fe f9e1 	bl	8002274 <HAL_GetTick>
 8003eb2:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d112      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ebe:	f7fe f9d9 	bl	8002274 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e081      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ed4:	4b43      	ldr	r3, [pc, #268]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d1ee      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xca>
 8003ee0:	e027      	b.n	8003f32 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d11d      	bne.n	8003f26 <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eec:	f7fe f9c2 	bl	8002274 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e06a      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f02:	4b38      	ldr	r3, [pc, #224]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d1ee      	bne.n	8003eec <HAL_RCC_ClockConfig+0xf8>
 8003f0e:	e010      	b.n	8003f32 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f10:	f7fe f9b0 	bl	8002274 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e058      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f26:	4b2f      	ldr	r3, [pc, #188]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1ee      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x11c>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003f32:	4b2b      	ldr	r3, [pc, #172]	; (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d210      	bcs.n	8003f62 <HAL_RCC_ClockConfig+0x16e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f40:	4b27      	ldr	r3, [pc, #156]	; (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f023 020f 	bic.w	r2, r3, #15
 8003f48:	4925      	ldr	r1, [pc, #148]	; (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f50:	4b23      	ldr	r3, [pc, #140]	; (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d001      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e03a      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f6e:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	491a      	ldr	r1, [pc, #104]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d009      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f8c:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4912      	ldr	r1, [pc, #72]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003fa0:	f000 f826 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8003fa4:	4601      	mov	r1, r0
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fae:	23f0      	movs	r3, #240	; 0xf0
 8003fb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	fa93 f3a3 	rbit	r3, r3
 8003fb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	fab3 f383 	clz	r3, r3
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc4:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <HAL_RCC_ClockConfig+0x1f4>)
 8003fc6:	5cd3      	ldrb	r3, [r2, r3]
 8003fc8:	fa21 f303 	lsr.w	r3, r1, r3
 8003fcc:	4a07      	ldr	r2, [pc, #28]	; (8003fec <HAL_RCC_ClockConfig+0x1f8>)
 8003fce:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f7fe f925 	bl	8002220 <HAL_InitTick>
  
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40023c00 	.word	0x40023c00
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	080060c0 	.word	0x080060c0
 8003fec:	20000014 	.word	0x20000014

08003ff0 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b08b      	sub	sp, #44	; 0x2c
 8003ff4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffe:	2300      	movs	r3, #0
 8004000:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004006:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b08      	cmp	r3, #8
 8004010:	d00c      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x3c>
 8004012:	2b08      	cmp	r3, #8
 8004014:	d85d      	bhi.n	80040d2 <HAL_RCC_GetSysClockFreq+0xe2>
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0x30>
 800401a:	2b04      	cmp	r3, #4
 800401c:	d003      	beq.n	8004026 <HAL_RCC_GetSysClockFreq+0x36>
 800401e:	e058      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004020:	4b32      	ldr	r3, [pc, #200]	; (80040ec <HAL_RCC_GetSysClockFreq+0xfc>)
 8004022:	623b      	str	r3, [r7, #32]
       break;
 8004024:	e058      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004026:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004028:	623b      	str	r3, [r7, #32]
      break;
 800402a:	e055      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800402c:	4b2e      	ldr	r3, [pc, #184]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004034:	61fb      	str	r3, [r7, #28]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004036:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d017      	beq.n	8004072 <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8004042:	4a2b      	ldr	r2, [pc, #172]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	fbb2 f2f3 	udiv	r2, r2, r3
 800404a:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800404c:	6859      	ldr	r1, [r3, #4]
 800404e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004052:	400b      	ands	r3, r1
 8004054:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8004058:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	6979      	ldr	r1, [r7, #20]
 800405c:	fa91 f1a1 	rbit	r1, r1
 8004060:	6139      	str	r1, [r7, #16]
  return(result);
 8004062:	6939      	ldr	r1, [r7, #16]
 8004064:	fab1 f181 	clz	r1, r1
 8004068:	40cb      	lsrs	r3, r1
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
 8004070:	e016      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8004072:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <HAL_RCC_GetSysClockFreq+0xfc>)
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	fbb2 f2f3 	udiv	r2, r2, r3
 800407a:	4b1b      	ldr	r3, [pc, #108]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800407c:	6859      	ldr	r1, [r3, #4]
 800407e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004082:	400b      	ands	r3, r1
 8004084:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8004088:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	fa91 f1a1 	rbit	r1, r1
 8004090:	60b9      	str	r1, [r7, #8]
  return(result);
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	fab1 f181 	clz	r1, r1
 8004098:	40cb      	lsrs	r3, r1
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80040a0:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040a8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80040ac:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	603b      	str	r3, [r7, #0]
  return(result);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	fab3 f383 	clz	r3, r3
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
 80040c0:	3301      	adds	r3, #1
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 80040c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	623b      	str	r3, [r7, #32]
      break;
 80040d0:	e002      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_RCC_GetSysClockFreq+0xfc>)
 80040d4:	623b      	str	r3, [r7, #32]
      break;
 80040d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040d8:	6a3b      	ldr	r3, [r7, #32]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	372c      	adds	r7, #44	; 0x2c
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40023800 	.word	0x40023800
 80040ec:	00f42400 	.word	0x00f42400
 80040f0:	017d7840 	.word	0x017d7840

080040f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect. 
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f8:	4b03      	ldr	r3, [pc, #12]	; (8004108 <HAL_RCC_GetHCLKFreq+0x14>)
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	20000014 	.word	0x20000014

0800410c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b0d8      	sub	sp, #352	; 0x160
 8004110:	af00      	add	r7, sp, #0
 8004112:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004116:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800411a:	6018      	str	r0, [r3, #0]
  uint32_t tickstart = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  uint32_t tmpreg0 = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  uint32_t tmpreg1 = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  uint32_t plli2sused = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  uint32_t pllsaiused = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800413a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800413e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01b      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800414e:	4b94      	ldr	r3, [pc, #592]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	4a93      	ldr	r2, [pc, #588]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004154:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004158:	6093      	str	r3, [r2, #8]
 800415a:	4b91      	ldr	r3, [pc, #580]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004162:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416a:	498d      	ldr	r1, [pc, #564]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800416c:	4313      	orrs	r3, r2
 800416e:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004170:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004174:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1; 
 8004180:	2301      	movs	r3, #1
 8004182:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004186:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800418a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d025      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800419a:	4b81      	ldr	r3, [pc, #516]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800419c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041a4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80041a8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b0:	497b      	ldr	r1, [pc, #492]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041b8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80041bc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c8:	d102      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      plli2sused = 1; 
 80041ca:	2301      	movs	r3, #1
 80041cc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041d0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80041d4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xda>
    {
      pllsaiused = 1; 
 80041e0:	2301      	movs	r3, #1
 80041e2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041e6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80041ea:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d025      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041fa:	4b69      	ldr	r3, [pc, #420]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80041fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004200:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004204:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004208:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	4963      	ldr	r1, [pc, #396]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004218:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800421c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004228:	d102      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      plli2sused = 1; 
 800422a:	2301      	movs	r3, #1
 800422c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004230:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004234:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      pllsaiused = 1; 
 8004240:	2301      	movs	r3, #1
 8004242:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004246:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800424a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {    
      plli2sused = 1; 
 800425a:	2301      	movs	r3, #1
 800425c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004260:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004264:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80ae 	beq.w	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004276:	4b4a      	ldr	r3, [pc, #296]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	4a49      	ldr	r2, [pc, #292]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004280:	6413      	str	r3, [r2, #64]	; 0x40
 8004282:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800428a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800428e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004298:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800429c:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800429e:	4b41      	ldr	r3, [pc, #260]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a40      	ldr	r2, [pc, #256]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a8:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042aa:	f7fd ffe3 	bl	8002274 <HAL_GetTick>
 80042ae:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042b2:	e00a      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b4:	f7fd ffde 	bl	8002274 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b64      	cmp	r3, #100	; 0x64
 80042c2:	d902      	bls.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
      {
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	f000 bfd9 	b.w	800527c <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042ca:	4b36      	ldr	r3, [pc, #216]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0ee      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042d6:	4b32      	ldr	r3, [pc, #200]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042de:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042e2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d03f      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80042ea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80042ee:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fa:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80042fe:	429a      	cmp	r2, r3
 8004300:	d033      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004302:	4b27      	ldr	r3, [pc, #156]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800430e:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a23      	ldr	r2, [pc, #140]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800431a:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431e:	4a20      	ldr	r2, [pc, #128]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004324:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004326:	4a1e      	ldr	r2, [pc, #120]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004328:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800432c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800432e:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d017      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x25e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433a:	f7fd ff9b 	bl	8002274 <HAL_GetTick>
 800433e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004342:	e00c      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x252>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004344:	f7fd ff96 	bl	8002274 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f241 3288 	movw	r2, #5000	; 0x1388
 8004354:	4293      	cmp	r3, r2
 8004356:	d902      	bls.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x252>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	f000 bf8f 	b.w	800527c <HAL_RCCEx_PeriphCLKConfig+0x1170>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ec      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x238>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800436a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800436e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800437e:	d115      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004388:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800438c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004396:	400b      	ands	r3, r1
 8004398:	4901      	ldr	r1, [pc, #4]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
 800439e:	e00b      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80043a0:	40023800 	.word	0x40023800
 80043a4:	40007000 	.word	0x40007000
 80043a8:	0ffffcff 	.word	0x0ffffcff
 80043ac:	4bbb      	ldr	r3, [pc, #748]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4aba      	ldr	r2, [pc, #744]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043b6:	6093      	str	r3, [r2, #8]
 80043b8:	4bb8      	ldr	r3, [pc, #736]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043bc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80043c0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043cc:	49b3      	ldr	r1, [pc, #716]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043d2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80043d6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d014      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043e6:	4bad      	ldr	r3, [pc, #692]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ec:	4aab      	ldr	r2, [pc, #684]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80043f6:	4ba9      	ldr	r3, [pc, #676]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80043fc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004400:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	49a4      	ldr	r1, [pc, #656]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004410:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004414:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00e      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004424:	4b9d      	ldr	r3, [pc, #628]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800442e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004432:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800443a:	4998      	ldr	r1, [pc, #608]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004442:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004446:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00e      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004456:	4b91      	ldr	r3, [pc, #580]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004460:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004464:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800446c:	498b      	ldr	r1, [pc, #556]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004474:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004478:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00e      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004488:	4b84      	ldr	r3, [pc, #528]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004492:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004496:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800449e:	497f      	ldr	r1, [pc, #508]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044a6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044aa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00e      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044ba:	4b78      	ldr	r3, [pc, #480]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044c4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044c8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	4972      	ldr	r1, [pc, #456]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044d8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044dc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00e      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ec:	4b6b      	ldr	r3, [pc, #428]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	f023 0203 	bic.w	r2, r3, #3
 80044f6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044fa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	4966      	ldr	r1, [pc, #408]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800450a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800450e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00e      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800451e:	4b5f      	ldr	r3, [pc, #380]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004524:	f023 020c 	bic.w	r2, r3, #12
 8004528:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800452c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004534:	4959      	ldr	r1, [pc, #356]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800453c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004540:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00e      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004550:	4b52      	ldr	r3, [pc, #328]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800455a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800455e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004566:	494d      	ldr	r1, [pc, #308]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800456e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004572:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00e      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004582:	4b46      	ldr	r3, [pc, #280]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800458c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004590:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004598:	4940      	ldr	r1, [pc, #256]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045a0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80045a4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00e      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045b4:	4b39      	ldr	r3, [pc, #228]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045be:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80045c2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ca:	4934      	ldr	r1, [pc, #208]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045d2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80045d6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00e      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045e6:	4b2d      	ldr	r3, [pc, #180]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045f0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80045f4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fc:	4927      	ldr	r1, [pc, #156]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004604:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004608:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00e      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004618:	4b20      	ldr	r3, [pc, #128]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004622:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004626:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462e:	491b      	ldr	r1, [pc, #108]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004636:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800463a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00e      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800464a:	4b14      	ldr	r3, [pc, #80]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004650:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004654:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004658:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004660:	490e      	ldr	r1, [pc, #56]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004668:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800466c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d011      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004686:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800468a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004692:	4902      	ldr	r1, [pc, #8]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800469a:	e001      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800469c:	40023800 	.word	0x40023800
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046a0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046a4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x5de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046b4:	4b66      	ldr	r3, [pc, #408]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046be:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046c2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ca:	4961      	ldr	r1, [pc, #388]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046d2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046d6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046e2:	d102      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x5de>
    {
      pllsaiused = 1; 
 80046e4:	2301      	movs	r3, #1
 80046e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046ea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046ee:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    pllsaiused = 1; 
 80046fe:	2301      	movs	r3, #1
 8004700:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004704:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004708:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00e      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004718:	4b4d      	ldr	r3, [pc, #308]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004722:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004726:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472e:	4948      	ldr	r1, [pc, #288]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004736:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800473a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00f      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x65e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800474a:	4b41      	ldr	r3, [pc, #260]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004754:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004758:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004762:	493b      	ldr	r1, [pc, #236]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800476a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800476e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00f      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800477e:	4b34      	ldr	r3, [pc, #208]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004784:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004788:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800478c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004796:	492e      	ldr	r1, [pc, #184]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800479e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047a2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00f      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047b2:	4b27      	ldr	r3, [pc, #156]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80047b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80047bc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047c0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ca:	4921      	ldr	r1, [pc, #132]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80047d2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047d6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00f      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80047e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ec:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047f0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047f4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fe:	4914      	ldr	r1, [pc, #80]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004806:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800480a:	2b01      	cmp	r3, #1
 800480c:	d009      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x716>
 800480e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004812:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800481e:	f040 8284 	bne.w	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8004822:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a0a      	ldr	r2, [pc, #40]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004828:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800482c:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482e:	f7fd fd21 	bl	8002274 <HAL_GetTick>
 8004832:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004836:	e00d      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004838:	f7fd fd1c 	bl	8002274 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b64      	cmp	r3, #100	; 0x64
 8004846:	d905      	bls.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x748>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	f000 bd17 	b.w	800527c <HAL_RCCEx_PeriphCLKConfig+0x1170>
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004854:	4be4      	ldr	r3, [pc, #912]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1eb      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x72c>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004860:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004864:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 808c 	beq.w	800498e <HAL_RCCEx_PeriphCLKConfig+0x882>
 8004876:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800487a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004882:	2b00      	cmp	r3, #0
 8004884:	f040 8083 	bne.w	800498e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8004888:	4bd7      	ldr	r3, [pc, #860]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800488a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004892:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004896:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800489e:	fa93 f3a3 	rbit	r3, r3
 80048a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  return(result);
 80048a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048aa:	fab3 f383 	clz	r3, r3
 80048ae:	fa22 f303 	lsr.w	r3, r2, r3
 80048b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80048b6:	4bcc      	ldr	r3, [pc, #816]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 80048b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048c0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80048c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048cc:	fa93 f3a3 	rbit	r3, r3
 80048d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  return(result);
 80048d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048d8:	fab3 f383 	clz	r3, r3
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
 80048e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048e4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048e8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80048fc:	fa93 f3a3 	rbit	r3, r3
 8004900:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return(result);
 8004904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004908:	fab3 f383 	clz	r3, r3
 800490c:	409a      	lsls	r2, r3
 800490e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004912:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return(result);
 8004922:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004926:	fab3 f383 	clz	r3, r3
 800492a:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800492e:	fa01 f303 	lsl.w	r3, r1, r3
 8004932:	431a      	orrs	r2, r3
 8004934:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004938:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004940:	fa93 f3a3 	rbit	r3, r3
 8004944:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  return(result);
 8004948:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800494c:	fab3 f383 	clz	r3, r3
 8004950:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8004954:	fa01 f303 	lsl.w	r3, r1, r3
 8004958:	431a      	orrs	r2, r3
 800495a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800495e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6899      	ldr	r1, [r3, #8]
 8004966:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800496a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  return(result);
 800497a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800497e:	fab3 f383 	clz	r3, r3
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	4998      	ldr	r1, [pc, #608]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800498e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004992:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80049a2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049a6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b2:	d014      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x8d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80049b4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049b8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 809d 	beq.w	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80049ca:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049ce:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049da:	f040 8093 	bne.w	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80049de:	4b82      	ldr	r3, [pc, #520]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 80049e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049e8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80049ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80049f4:	fa93 f3a3 	rbit	r3, r3
 80049f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  return(result);
 80049fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004a00:	fab3 f383 	clz	r3, r3
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
 8004a08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8004a0c:	4b76      	ldr	r3, [pc, #472]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a16:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004a1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a22:	fa93 f3a3 	rbit	r3, r3
 8004a26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  return(result);
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	fab3 f383 	clz	r3, r3
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a3a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a3e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004a52:	fa93 f3a3 	rbit	r3, r3
 8004a56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  return(result);
 8004a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a5e:	fab3 f383 	clz	r3, r3
 8004a62:	409a      	lsls	r2, r3
 8004a64:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004a68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a70:	fa93 f3a3 	rbit	r3, r3
 8004a74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  return(result);
 8004a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a7c:	fab3 f383 	clz	r3, r3
 8004a80:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a8e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68d9      	ldr	r1, [r3, #12]
 8004a96:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004a9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004aa2:	fa93 f3a3 	rbit	r3, r3
 8004aa6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return(result);
 8004aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aae:	fab3 f383 	clz	r3, r3
 8004ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004abc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004ac4:	fa93 f3a3 	rbit	r3, r3
 8004ac8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  return(result);
 8004acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad0:	fab3 f383 	clz	r3, r3
 8004ad4:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	4942      	ldr	r1, [pc, #264]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8004ae4:	4b40      	ldr	r3, [pc, #256]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aea:	f023 021f 	bic.w	r2, r3, #31
 8004aee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004af2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	3b01      	subs	r3, #1
 8004afc:	493a      	ldr	r1, [pc, #232]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b04:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b08:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8086 	beq.w	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8004b1a:	4b33      	ldr	r3, [pc, #204]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b24:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004b28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b30:	fa93 f3a3 	rbit	r3, r3
 8004b34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 8004b38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b3c:	fab3 f383 	clz	r3, r3
 8004b40:	fa22 f303 	lsr.w	r3, r2, r3
 8004b44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8004b48:	4b27      	ldr	r3, [pc, #156]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004b52:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004b56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b5e:	fa93 f3a3 	rbit	r3, r3
 8004b62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 8004b66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b6a:	fab3 f383 	clz	r3, r3
 8004b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b72:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b76:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b7a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b8e:	fa93 f3a3 	rbit	r3, r3
 8004b92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 8004b96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b9a:	fab3 f383 	clz	r3, r3
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ba4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6919      	ldr	r1, [r3, #16]
 8004bac:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004bb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bb8:	fa93 f3a3 	rbit	r3, r3
 8004bbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8004bc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bc4:	fab3 f383 	clz	r3, r3
 8004bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004bd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bda:	fa93 f3a3 	rbit	r3, r3
 8004bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  return(result);
 8004be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be6:	e001      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004be8:	40023800 	.word	0x40023800
 8004bec:	fab3 f383 	clz	r3, r3
 8004bf0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004bfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c06:	fa93 f3a3 	rbit	r3, r3
 8004c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  return(result);
 8004c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c12:	fab3 f383 	clz	r3, r3
 8004c16:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8004c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1e:	4950      	ldr	r1, [pc, #320]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c26:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c2a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d05c      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c3a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c3e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c52:	fa93 f3a3 	rbit	r3, r3
 8004c56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 8004c5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c5e:	fab3 f383 	clz	r3, r3
 8004c62:	409a      	lsls	r2, r3
 8004c64:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c68:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6919      	ldr	r1, [r3, #16]
 8004c70:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c7c:	fa93 f3a3 	rbit	r3, r3
 8004c80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  return(result);
 8004c84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c88:	fab3 f383 	clz	r3, r3
 8004c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c90:	431a      	orrs	r2, r3
 8004c92:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c96:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68d9      	ldr	r1, [r3, #12]
 8004c9e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004caa:	fa93 f3a3 	rbit	r3, r3
 8004cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 8004cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cb6:	fab3 f383 	clz	r3, r3
 8004cba:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004cc4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6899      	ldr	r1, [r3, #8]
 8004ccc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cd8:	fa93 f3a3 	rbit	r3, r3
 8004cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8004ce0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ce4:	fab3 f383 	clz	r3, r3
 8004ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cec:	491c      	ldr	r1, [pc, #112]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cf4:	4b1a      	ldr	r3, [pc, #104]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a19      	ldr	r2, [pc, #100]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004cfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cfe:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d00:	f7fd fab8 	bl	8002274 <HAL_GetTick>
 8004d04:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d08:	e009      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d0a:	f7fd fab3 	bl	8002274 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b64      	cmp	r3, #100	; 0x64
 8004d18:	d901      	bls.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xc12>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e2ae      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0ef      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d2a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	f040 82a3 	bne.w	800527a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8004d34:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d40:	f7fd fa98 	bl	8002274 <HAL_GetTick>
 8004d44:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d48:	e00c      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xc58>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d4a:	f7fd fa93 	bl	8002274 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d904      	bls.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xc58>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e28e      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1170>
 8004d5e:	bf00      	nop
 8004d60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d64:	4bd4      	ldr	r3, [pc, #848]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d70:	d0eb      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xc3e>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d72:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d76:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 8004d86:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d8a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d013      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xcb2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d96:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d9a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 8093 	beq.w	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004dac:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004db0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 808a 	bne.w	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8004dbe:	4bbe      	ldr	r3, [pc, #760]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dc8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004dcc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dd0:	fa93 f3a3 	rbit	r3, r3
 8004dd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8004dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd8:	fab3 f383 	clz	r3, r3
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8004de0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8004de4:	4bb4      	ldr	r3, [pc, #720]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004dee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004df2:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004df6:	fa93 f3a3 	rbit	r3, r3
 8004dfa:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 8004dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dfe:	fab3 f383 	clz	r3, r3
 8004e02:	fa22 f303 	lsr.w	r3, r2, r3
 8004e06:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e0a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e0e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e22:	fa93 f3a3 	rbit	r3, r3
 8004e26:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8004e28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e2a:	fab3 f383 	clz	r3, r3
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004e34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e3c:	fa93 f3a3 	rbit	r3, r3
 8004e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8004e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e48:	fab3 f383 	clz	r3, r3
 8004e4c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004e50:	fa01 f303 	lsl.w	r3, r1, r3
 8004e54:	431a      	orrs	r2, r3
 8004e56:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e5a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6999      	ldr	r1, [r3, #24]
 8004e62:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8004e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e7a:	fab3 f383 	clz	r3, r3
 8004e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e82:	431a      	orrs	r2, r3
 8004e84:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e90:	fa93 f3a3 	rbit	r3, r3
 8004e94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8004e98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e9c:	fab3 f383 	clz	r3, r3
 8004ea0:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8004ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea8:	4983      	ldr	r1, [pc, #524]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004eb0:	4b81      	ldr	r3, [pc, #516]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eb6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004eba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ebe:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	497b      	ldr	r1, [pc, #492]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ed2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ed6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 80c5 	beq.w	8005072 <HAL_RCCEx_PeriphCLKConfig+0xf66>
 8004ee8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004eec:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ef8:	f040 80bb 	bne.w	8005072 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8004efc:	4b6e      	ldr	r3, [pc, #440]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f06:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f0a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f0e:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8004f12:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f14:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f18:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	fa93 f1a3 	rbit	r1, r3
 8004f22:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f26:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f2a:	6019      	str	r1, [r3, #0]
  return(result);
 8004f2c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f30:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	fab3 f383 	clz	r3, r3
 8004f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8004f42:	4b5d      	ldr	r3, [pc, #372]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f4c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f54:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8004f58:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f5e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	fa93 f1a3 	rbit	r1, r3
 8004f68:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f70:	6019      	str	r1, [r3, #0]
  return(result);
 8004f72:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	fab3 f383 	clz	r3, r3
 8004f80:	fa22 f303 	lsr.w	r3, r2, r3
 8004f84:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f88:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f8c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695a      	ldr	r2, [r3, #20]
 8004f94:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f9c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8004fa0:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004fa6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	fa93 f1a3 	rbit	r1, r3
 8004fb0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004fb4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004fb8:	6019      	str	r1, [r3, #0]
  return(result);
 8004fba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004fbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	fab3 f383 	clz	r3, r3
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004fce:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6a19      	ldr	r1, [r3, #32]
 8004fd6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fde:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8004fe2:	6018      	str	r0, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	fa93 f0a3 	rbit	r0, r3
 8004ff2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ff6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ffa:	6018      	str	r0, [r3, #0]
  return(result);
 8004ffc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005000:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	fab3 f383 	clz	r3, r3
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	431a      	orrs	r2, r3
 8005010:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005014:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005018:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800501c:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005022:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	fa93 f1a3 	rbit	r1, r3
 800502c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005034:	6019      	str	r1, [r3, #0]
  return(result);
 8005036:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800503a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	fab3 f383 	clz	r3, r3
 8005044:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005048:	fa01 f303 	lsl.w	r3, r1, r3
 800504c:	431a      	orrs	r2, r3
 800504e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005052:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005056:	fa93 f3a3 	rbit	r3, r3
 800505a:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 800505c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800505e:	fab3 f383 	clz	r3, r3
 8005062:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8005066:	fa01 f303 	lsl.w	r3, r1, r3
 800506a:	4913      	ldr	r1, [pc, #76]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005072:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005076:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 80dd 	beq.w	8005242 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005092:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005096:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800509a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800509e:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80050a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	fa93 f1a3 	rbit	r1, r3
 80050ae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80050b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80050b6:	e001      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
 80050b8:	40023800 	.word	0x40023800
 80050bc:	6019      	str	r1, [r3, #0]
  return(result);
 80050be:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80050c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	fab3 f383 	clz	r3, r3
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
 80050d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80050d4:	4b6c      	ldr	r3, [pc, #432]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050de:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80050e2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80050e6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80050ea:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ec:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80050f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	fa93 f1a3 	rbit	r1, r3
 80050fa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80050fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005102:	6019      	str	r1, [r3, #0]
  return(result);
 8005104:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005108:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	fab3 f383 	clz	r3, r3
 8005112:	fa22 f303 	lsr.w	r3, r2, r3
 8005116:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800511a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800511e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695a      	ldr	r2, [r3, #20]
 8005126:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800512a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800512e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005132:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005134:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005138:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	fa93 f1a3 	rbit	r1, r3
 8005142:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005146:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800514a:	6019      	str	r1, [r3, #0]
  return(result);
 800514c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005150:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	fab3 f383 	clz	r3, r3
 800515a:	409a      	lsls	r2, r3
 800515c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005160:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005164:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8005168:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800516e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	fa93 f1a3 	rbit	r1, r3
 8005178:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800517c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005180:	6019      	str	r1, [r3, #0]
  return(result);
 8005182:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005186:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	fab3 f383 	clz	r3, r3
 8005190:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8005194:	fa01 f303 	lsl.w	r3, r1, r3
 8005198:	431a      	orrs	r2, r3
 800519a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800519e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80051a6:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80051ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	fa93 f1a3 	rbit	r1, r3
 80051b6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80051ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80051be:	6019      	str	r1, [r3, #0]
  return(result);
 80051c0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80051c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	fab3 f383 	clz	r3, r3
 80051ce:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	431a      	orrs	r2, r3
 80051d8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80051dc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69d9      	ldr	r1, [r3, #28]
 80051e4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80051e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80051ec:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 80051f0:	6018      	str	r0, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80051f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	fa93 f0a3 	rbit	r0, r3
 8005200:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005204:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005208:	6018      	str	r0, [r3, #0]
  return(result);
 800520a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800520e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	fab3 f383 	clz	r3, r3
 8005218:	fa01 f303 	lsl.w	r3, r1, r3
 800521c:	491a      	ldr	r1, [pc, #104]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005224:	4b18      	ldr	r3, [pc, #96]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 8005226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800522a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800522e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005232:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	4913      	ldr	r1, [pc, #76]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005242:	4b11      	ldr	r3, [pc, #68]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a10      	ldr	r2, [pc, #64]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 8005248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524c:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524e:	f7fd f811 	bl	8002274 <HAL_GetTick>
 8005252:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005256:	e009      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1160>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005258:	f7fd f80c 	bl	8002274 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b64      	cmp	r3, #100	; 0x64
 8005266:	d901      	bls.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1160>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e007      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800526c:	4b06      	ldr	r3, [pc, #24]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005278:	d1ee      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x114c>
      }
    }
  }
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40023800 	.word	0x40023800

0800528c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800528c:	b480      	push	{r7}
 800528e:	b09b      	sub	sp, #108	; 0x6c
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	667b      	str	r3, [r7, #100]	; 0x64
  
  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4ab6      	ldr	r2, [pc, #728]	; (8005574 <HAL_RCCEx_GetPeriphCLKConfig+0x2e8>)
 800529c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 800529e:	4bb6      	ldr	r3, [pc, #728]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80052a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80052a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052a8:	4013      	ands	r3, r2
 80052aa:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80052ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	fa92 f2a2 	rbit	r2, r2
 80052b6:	60fa      	str	r2, [r7, #12]
  return(result);
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	fab2 f282 	clz	r2, r2
 80052be:	fa23 f202 	lsr.w	r2, r3, r2
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80052c6:	4bac      	ldr	r3, [pc, #688]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80052c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052d0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80052d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	fa93 f3a3 	rbit	r3, r3
 80052dc:	617b      	str	r3, [r7, #20]
  return(result);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	fab3 f383 	clz	r3, r3
 80052e4:	40da      	lsrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80052ea:	4ba3      	ldr	r3, [pc, #652]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80052ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052f4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80052f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	fa93 f3a3 	rbit	r3, r3
 8005300:	61fb      	str	r3, [r7, #28]
  return(result);
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	fab3 f383 	clz	r3, r3
 8005308:	40da      	lsrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800530e:	4b9a      	ldr	r3, [pc, #616]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005314:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005318:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800531c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	fa93 f3a3 	rbit	r3, r3
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	fab3 f383 	clz	r3, r3
 800532c:	40da      	lsrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	609a      	str	r2, [r3, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 8005332:	4b91      	ldr	r3, [pc, #580]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005338:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800533c:	4013      	ands	r3, r2
 800533e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005342:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005346:	fa92 f2a2 	rbit	r2, r2
 800534a:	62fa      	str	r2, [r7, #44]	; 0x2c
  return(result);
 800534c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800534e:	fab2 f282 	clz	r2, r2
 8005352:	fa23 f202 	lsr.w	r2, r3, r2
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800535a:	4b87      	ldr	r3, [pc, #540]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800535c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005360:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005364:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005368:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	fa93 f3a3 	rbit	r3, r3
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005374:	fab3 f383 	clz	r3, r3
 8005378:	40da      	lsrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 800537e:	4b7e      	ldr	r3, [pc, #504]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005388:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800538c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005390:	fa93 f3a3 	rbit	r3, r3
 8005394:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005398:	fab3 f383 	clz	r3, r3
 800539c:	40da      	lsrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 80053a2:	4b75      	ldr	r3, [pc, #468]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80053ac:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80053b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b4:	fa93 f3a3 	rbit	r3, r3
 80053b8:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 80053ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053bc:	fab3 f383 	clz	r3, r3
 80053c0:	40da      	lsrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	61da      	str	r2, [r3, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 80053c6:	4b6c      	ldr	r3, [pc, #432]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80053c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053cc:	f003 021f 	and.w	r2, r3, #31
 80053d0:	231f      	movs	r3, #31
 80053d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d6:	fa93 f3a3 	rbit	r3, r3
 80053da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80053dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053de:	fab3 f383 	clz	r3, r3
 80053e2:	40da      	lsrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 80053e8:	4b63      	ldr	r3, [pc, #396]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80053ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ee:	f403 52f8 	and.w	r2, r3, #7936	; 0x1f00
 80053f2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80053f6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053fa:	fa93 f3a3 	rbit	r3, r3
 80053fe:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005402:	fab3 f383 	clz	r3, r3
 8005406:	40da      	lsrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 800540c:	4b5a      	ldr	r3, [pc, #360]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800540e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005412:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005416:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800541a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800541e:	fa93 f3a3 	rbit	r3, r3
 8005422:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8005424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005426:	fab3 f383 	clz	r3, r3
 800542a:	40da      	lsrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8005430:	4b51      	ldr	r3, [pc, #324]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005436:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800543e:	4b4e      	ldr	r3, [pc, #312]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005444:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800544c:	4b4a      	ldr	r3, [pc, #296]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8005458:	4b47      	ldr	r3, [pc, #284]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	665a      	str	r2, [r3, #100]	; 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8005466:	4b44      	ldr	r3, [pc, #272]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546c:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	669a      	str	r2, [r3, #104]	; 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8005474:	4b40      	ldr	r3, [pc, #256]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	66da      	str	r2, [r3, #108]	; 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8005482:	4b3d      	ldr	r3, [pc, #244]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005488:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	671a      	str	r2, [r3, #112]	; 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8005490:	4b39      	ldr	r3, [pc, #228]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005496:	f003 0203 	and.w	r2, r3, #3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800549e:	4b36      	ldr	r3, [pc, #216]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a4:	f003 020c 	and.w	r2, r3, #12
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80054ac:	4b32      	ldr	r3, [pc, #200]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80054ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b2:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80054ba:	4b2f      	ldr	r3, [pc, #188]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80054bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c0:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80054c8:	4b2b      	ldr	r3, [pc, #172]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ce:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80054d6:	4b28      	ldr	r3, [pc, #160]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80054d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054dc:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80054e4:	4b24      	ldr	r3, [pc, #144]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80054f2:	4b21      	ldr	r3, [pc, #132]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80054f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f8:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	661a      	str	r2, [r3, #96]	; 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005500:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005506:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800550e:	4b1a      	ldr	r3, [pc, #104]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005514:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	679a      	str	r2, [r3, #120]	; 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800551c:	4b16      	ldr	r3, [pc, #88]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005522:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800552a:	4b13      	ldr	r3, [pc, #76]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005530:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 800553a:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800553c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005540:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	
  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800554c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005550:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
 800555a:	4b07      	ldr	r3, [pc, #28]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800555c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005560:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800556a:	4b03      	ldr	r3, [pc, #12]	; (8005578 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005572:	e003      	b.n	800557c <HAL_RCCEx_GetPeriphCLKConfig+0x2f0>
 8005574:	1cfffff1 	.word	0x1cfffff1
 8005578:	40023800 	.word	0x40023800
 800557c:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800557e:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <HAL_RCCEx_GetPeriphCLKConfig+0x32c>)
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800558e:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <HAL_RCCEx_GetPeriphCLKConfig+0x32c>)
 8005590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d103      	bne.n	80055a4 <HAL_RCCEx_GetPeriphCLKConfig+0x318>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80055a2:	e003      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKConfig+0x320>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80055ac:	bf00      	nop
 80055ae:	376c      	adds	r7, #108	; 0x6c
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	40023800 	.word	0x40023800

080055bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60bb      	str	r3, [r7, #8]
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055da:	f040 80a4 	bne.w	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;   
 80055de:	4ba6      	ldr	r3, [pc, #664]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80055e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80055ec:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055f4:	f000 808a 	beq.w	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055fe:	f200 8091 	bhi.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005608:	d07d      	beq.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005610:	f200 8088 	bhi.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005620:	d039      	beq.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;       
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
    default :
      {
        break;
 8005622:	e07f      	b.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005624:	4b94      	ldr	r3, [pc, #592]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d108      	bne.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005630:	4b91      	ldr	r3, [pc, #580]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005638:	4a90      	ldr	r2, [pc, #576]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800563a:	fbb2 f3f3 	udiv	r3, r2, r3
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	e007      	b.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005642:	4b8d      	ldr	r3, [pc, #564]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800564a:	4a8d      	ldr	r2, [pc, #564]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800564c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005650:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005652:	4b89      	ldr	r3, [pc, #548]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	0e1b      	lsrs	r3, r3, #24
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005660:	4b85      	ldr	r3, [pc, #532]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005666:	099b      	lsrs	r3, r3, #6
 8005668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	fb03 f202 	mul.w	r2, r3, r2
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	fbb2 f3f3 	udiv	r3, r2, r3
 8005678:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800567a:	4b7f      	ldr	r3, [pc, #508]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800567c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005680:	0a1b      	lsrs	r3, r3, #8
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	3301      	adds	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg); 
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005692:	617b      	str	r3, [r7, #20]
        break;       
 8005694:	e047      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005696:	4b78      	ldr	r3, [pc, #480]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d108      	bne.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056a2:	4b75      	ldr	r3, [pc, #468]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056aa:	4a74      	ldr	r2, [pc, #464]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	e007      	b.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80056b4:	4b70      	ldr	r3, [pc, #448]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056bc:	4a70      	ldr	r2, [pc, #448]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056be:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80056c4:	4b6c      	ldr	r3, [pc, #432]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80056c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ca:	0e1b      	lsrs	r3, r3, #24
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80056d2:	4b69      	ldr	r3, [pc, #420]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80056d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d8:	099b      	lsrs	r3, r3, #6
 80056da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	fb03 f202 	mul.w	r2, r3, r2
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 80056ec:	4b62      	ldr	r3, [pc, #392]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80056ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056f2:	f003 031f 	and.w	r3, r3, #31
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005702:	617b      	str	r3, [r7, #20]
        break;
 8005704:	e00f      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005706:	4b5f      	ldr	r3, [pc, #380]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005708:	617b      	str	r3, [r7, #20]
        break;       
 800570a:	e00c      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800570c:	4b5a      	ldr	r3, [pc, #360]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d102      	bne.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8005718:	4b58      	ldr	r3, [pc, #352]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800571a:	617b      	str	r3, [r7, #20]
        break;       
 800571c:	e003      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 800571e:	4b58      	ldr	r3, [pc, #352]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005720:	617b      	str	r3, [r7, #20]
        break;       
 8005722:	e000      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 8005724:	bf00      	nop
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800572c:	f040 80ad 	bne.w	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;   
 8005730:	4b51      	ldr	r3, [pc, #324]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005736:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800573e:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005746:	f000 808a 	beq.w	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005750:	f200 809a 	bhi.w	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800575a:	d07d      	beq.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005762:	f200 8091 	bhi.w	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005772:	d039      	beq.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;       
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
    default :
      {
        break;
 8005774:	e088      	b.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005776:	4b40      	ldr	r3, [pc, #256]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d108      	bne.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005782:	4b3d      	ldr	r3, [pc, #244]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800578a:	4a3c      	ldr	r2, [pc, #240]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	e007      	b.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005794:	4b38      	ldr	r3, [pc, #224]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800579c:	4a38      	ldr	r2, [pc, #224]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800579e:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80057a4:	4b34      	ldr	r3, [pc, #208]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057aa:	0e1b      	lsrs	r3, r3, #24
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80057b2:	4b31      	ldr	r3, [pc, #196]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b8:	099b      	lsrs	r3, r3, #6
 80057ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	fb03 f202 	mul.w	r2, r3, r2
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ca:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80057cc:	4b2a      	ldr	r3, [pc, #168]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80057ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d2:	0a1b      	lsrs	r3, r3, #8
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	3301      	adds	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg); 
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	617b      	str	r3, [r7, #20]
        break;       
 80057e6:	e050      	b.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80057e8:	4b23      	ldr	r3, [pc, #140]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d108      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80057f4:	4b20      	ldr	r3, [pc, #128]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057fc:	4a1f      	ldr	r2, [pc, #124]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	e007      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005806:	4b1c      	ldr	r3, [pc, #112]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800580e:	4a1c      	ldr	r2, [pc, #112]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005810:	fbb2 f3f3 	udiv	r3, r2, r3
 8005814:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005816:	4b18      	ldr	r3, [pc, #96]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800581c:	0e1b      	lsrs	r3, r3, #24
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005824:	4b14      	ldr	r3, [pc, #80]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800582a:	099b      	lsrs	r3, r3, #6
 800582c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	fb03 f202 	mul.w	r2, r3, r2
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	fbb2 f3f3 	udiv	r3, r2, r3
 800583c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 800583e:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	3301      	adds	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	fbb2 f3f3 	udiv	r3, r2, r3
 8005854:	617b      	str	r3, [r7, #20]
        break;
 8005856:	e018      	b.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005858:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800585a:	617b      	str	r3, [r7, #20]
        break;       
 800585c:	e015      	b.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d102      	bne.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 800586a:	4b04      	ldr	r3, [pc, #16]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800586c:	617b      	str	r3, [r7, #20]
        break;       
 800586e:	e00c      	b.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 8005870:	4b03      	ldr	r3, [pc, #12]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005872:	617b      	str	r3, [r7, #20]
        break;       
 8005874:	e009      	b.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 8005876:	bf00      	nop
 8005878:	40023800 	.word	0x40023800
 800587c:	00f42400 	.word	0x00f42400
 8005880:	017d7840 	.word	0x017d7840
 8005884:	00bb8000 	.word	0x00bb8000
        break;
 8005888:	bf00      	nop
      }
    }
  }
  
  return frequency;
 800588a:	697b      	ldr	r3, [r7, #20]
}
 800588c:	4618      	mov	r0, r3
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_SAI_Init>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e14d      	b.n	8005b52 <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f95a 	bl	8005b84 <HAL_SAI_MspInit>
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 facd 	bl	8005e78 <SAI_Disable>
  
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d00c      	beq.n	8005900 <HAL_SAI_Init+0x68>
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d80d      	bhi.n	8005906 <HAL_SAI_Init+0x6e>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_SAI_Init+0x5c>
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d003      	beq.n	80058fa <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80058f2:	e008      	b.n	8005906 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	61fb      	str	r3, [r7, #28]
      break;
 80058f8:	e006      	b.n	8005908 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80058fa:	2310      	movs	r3, #16
 80058fc:	61fb      	str	r3, [r7, #28]
      break;
 80058fe:	e003      	b.n	8005908 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005900:	2320      	movs	r3, #32
 8005902:	61fb      	str	r3, [r7, #28]
      break;
 8005904:	e000      	b.n	8005908 <HAL_SAI_Init+0x70>
    break;
 8005906:	bf00      	nop
  }
  
  switch(hsai->Init.Synchro)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2b03      	cmp	r3, #3
 800590e:	d81e      	bhi.n	800594e <HAL_SAI_Init+0xb6>
 8005910:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <HAL_SAI_Init+0x80>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	08005929 	.word	0x08005929
 800591c:	0800592f 	.word	0x0800592f
 8005920:	08005937 	.word	0x08005937
 8005924:	0800593f 	.word	0x0800593f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
      }
      break;
 800592c:	e010      	b.n	8005950 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800592e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005932:	617b      	str	r3, [r7, #20]
      }
      break;
 8005934:	e00c      	b.n	8005950 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800593a:	617b      	str	r3, [r7, #20]
      }
      break;
 800593c:	e008      	b.n	8005950 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800593e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005942:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f043 0301 	orr.w	r3, r3, #1
 800594a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800594c:	e000      	b.n	8005950 <HAL_SAI_Init+0xb8>
  default:
    break;      
 800594e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a81      	ldr	r2, [pc, #516]	; (8005b5c <HAL_SAI_Init+0x2c4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <HAL_SAI_Init+0xcc>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a80      	ldr	r2, [pc, #512]	; (8005b60 <HAL_SAI_Init+0x2c8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d103      	bne.n	800596c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005964:	4a7f      	ldr	r2, [pc, #508]	; (8005b64 <HAL_SAI_Init+0x2cc>)
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	e002      	b.n	8005972 <HAL_SAI_Init+0xda>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 800596c:	4a7e      	ldr	r2, [pc, #504]	; (8005b68 <HAL_SAI_Init+0x2d0>)
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d043      	beq.n	8005a02 <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a76      	ldr	r2, [pc, #472]	; (8005b5c <HAL_SAI_Init+0x2c4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d004      	beq.n	8005992 <HAL_SAI_Init+0xfa>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a74      	ldr	r2, [pc, #464]	; (8005b60 <HAL_SAI_Init+0x2c8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d104      	bne.n	800599c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005992:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005996:	f7ff fe11 	bl	80055bc <HAL_RCCEx_GetPeriphCLKFreq>
 800599a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a72      	ldr	r2, [pc, #456]	; (8005b6c <HAL_SAI_Init+0x2d4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_SAI_Init+0x118>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a71      	ldr	r2, [pc, #452]	; (8005b70 <HAL_SAI_Init+0x2d8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d104      	bne.n	80059ba <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80059b0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80059b4:	f7ff fe02 	bl	80055bc <HAL_RCCEx_GetPeriphCLKFreq>
 80059b8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	461a      	mov	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	025b      	lsls	r3, r3, #9
 80059cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4a67      	ldr	r2, [pc, #412]	; (8005b74 <HAL_SAI_Init+0x2dc>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	08da      	lsrs	r2, r3, #3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	621a      	str	r2, [r3, #32]
    
    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80059e0:	68f9      	ldr	r1, [r7, #12]
 80059e2:	4b64      	ldr	r3, [pc, #400]	; (8005b74 <HAL_SAI_Init+0x2dc>)
 80059e4:	fba3 2301 	umull	r2, r3, r3, r1
 80059e8:	08da      	lsrs	r2, r3, #3
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	1aca      	subs	r2, r1, r3
 80059f4:	2a08      	cmp	r2, #8
 80059f6:	d904      	bls.n	8005a02 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	621a      	str	r2, [r3, #32]
    }
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_SAI_Init+0x17a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d109      	bne.n	8005a26 <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_SAI_Init+0x186>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e001      	b.n	8005a22 <HAL_SAI_Init+0x18a>
 8005a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	e008      	b.n	8005a38 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d102      	bne.n	8005a34 <HAL_SAI_Init+0x19c>
 8005a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a32:	e000      	b.n	8005a36 <HAL_SAI_Init+0x19e>
 8005a34:	2300      	movs	r3, #0
 8005a36:	61bb      	str	r3, [r7, #24]
  }
  
  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6819      	ldr	r1, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b4d      	ldr	r3, [pc, #308]	; (8005b78 <HAL_SAI_Init+0x2e0>)
 8005a44:	400b      	ands	r3, r1
 8005a46:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6819      	ldr	r1, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005a5c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	431a      	orrs	r2, r3
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8005a70:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005a7c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	051b      	lsls	r3, r3, #20
 8005a84:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	601a      	str	r2, [r3, #0]
  
  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6859      	ldr	r1, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b38      	ldr	r3, [pc, #224]	; (8005b7c <HAL_SAI_Init+0x2e4>)
 8005a9a:	400b      	ands	r3, r1
 8005a9c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6859      	ldr	r1, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699a      	ldr	r2, [r3, #24]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	605a      	str	r2, [r3, #4]
  
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6899      	ldr	r1, [r3, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4b2e      	ldr	r3, [pc, #184]	; (8005b80 <HAL_SAI_Init+0x2e8>)
 8005ac8:	400b      	ands	r3, r1
 8005aca:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6899      	ldr	r1, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005adc:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8005ae2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8005ae8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aee:	3b01      	subs	r3, #1
 8005af0:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8005af2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	609a      	str	r2, [r3, #8]
  
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68d9      	ldr	r1, [r3, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005b0a:	400b      	ands	r3, r1
 8005b0c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68d9      	ldr	r1, [r3, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b22:	041b      	lsls	r3, r3, #16
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	60da      	str	r2, [r3, #12]
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	40015804 	.word	0x40015804
 8005b60:	40015824 	.word	0x40015824
 8005b64:	40015800 	.word	0x40015800
 8005b68:	40015c00 	.word	0x40015c00
 8005b6c:	40015c04 	.word	0x40015c04
 8005b70:	40015c24 	.word	0x40015c24
 8005b74:	cccccccd 	.word	0xcccccccd
 8005b78:	ff05c010 	.word	0xff05c010
 8005b7c:	ffff1ff0 	.word	0xffff1ff0
 8005b80:	fff88000 	.word	0xfff88000

08005b84 <HAL_SAI_MspInit>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_SAI_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	80fb      	strh	r3, [r7, #6]
  if((pData == NULL) || (Size == 0))
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <HAL_SAI_Transmit_DMA+0x1a>
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_SAI_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e074      	b.n	8005ca0 <HAL_SAI_Transmit_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d16d      	bne.n	8005c9e <HAL_SAI_Transmit_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_SAI_Transmit_DMA+0x38>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e067      	b.n	8005ca0 <HAL_SAI_Transmit_DMA+0x108>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	88fa      	ldrh	r2, [r7, #6]
 8005be2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	88fa      	ldrh	r2, [r7, #6]
 8005bea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2212      	movs	r2, #18
 8005bfa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c02:	4a29      	ldr	r2, [pc, #164]	; (8005ca8 <HAL_SAI_Transmit_DMA+0x110>)
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c0a:	4a28      	ldr	r2, [pc, #160]	; (8005cac <HAL_SAI_Transmit_DMA+0x114>)
 8005c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c12:	4a27      	ldr	r2, [pc, #156]	; (8005cb0 <HAL_SAI_Transmit_DMA+0x118>)
 8005c14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c26:	4619      	mov	r1, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	331c      	adds	r3, #28
 8005c2e:	461a      	mov	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005c36:	f7fc fd73 	bl	8002720 <HAL_DMA_Start_IT>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d005      	beq.n	8005c4c <HAL_SAI_Transmit_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e029      	b.n	8005ca0 <HAL_SAI_Transmit_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d107      	bne.n	8005c6a <HAL_SAI_Transmit_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c68:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f8cd 	bl	8005e0c <SAI_InterruptFlag>
 8005c72:	4601      	mov	r1, r0
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005c90:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e000      	b.n	8005ca0 <HAL_SAI_Transmit_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005c9e:	2302      	movs	r3, #2
  }
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	08005f49 	.word	0x08005f49
 8005cac:	08005ee5 	.word	0x08005ee5
 8005cb0:	08005fe5 	.word	0x08005fe5

08005cb4 <HAL_SAI_Receive_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_SAI_Receive_DMA+0x1a>
 8005cc8:	88fb      	ldrh	r3, [r7, #6]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e074      	b.n	8005dbc <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d16d      	bne.n	8005dba <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_SAI_Receive_DMA+0x38>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e067      	b.n	8005dbc <HAL_SAI_Receive_DMA+0x108>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	88fa      	ldrh	r2, [r7, #6]
 8005cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	88fa      	ldrh	r2, [r7, #6]
 8005d06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2222      	movs	r2, #34	; 0x22
 8005d16:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	4a29      	ldr	r2, [pc, #164]	; (8005dc4 <HAL_SAI_Receive_DMA+0x110>)
 8005d20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d26:	4a28      	ldr	r2, [pc, #160]	; (8005dc8 <HAL_SAI_Receive_DMA+0x114>)
 8005d28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	4a27      	ldr	r2, [pc, #156]	; (8005dcc <HAL_SAI_Receive_DMA+0x118>)
 8005d30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d36:	2200      	movs	r2, #0
 8005d38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	331c      	adds	r3, #28
 8005d44:	4619      	mov	r1, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d52:	f7fc fce5 	bl	8002720 <HAL_DMA_Start_IT>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e029      	b.n	8005dbc <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d107      	bne.n	8005d86 <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005d84:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005d86:	2100      	movs	r1, #0
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 f83f 	bl	8005e0c <SAI_InterruptFlag>
 8005d8e:	4601      	mov	r1, r0
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691a      	ldr	r2, [r3, #16]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005dac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e000      	b.n	8005dbc <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005dba:	2302      	movs	r3, #2
  }
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	08005fc9 	.word	0x08005fc9
 8005dc8:	08005f65 	.word	0x08005f65
 8005dcc:	08005fe5 	.word	0x08005fe5

08005dd0 <HAL_SAI_TxCpltCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
 __weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_SAI_ErrorCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode: SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]
  
  if(mode == SAI_MODE_IT)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d103      	bne.n	8005e28 <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f043 0308 	orr.w	r3, r3, #8
 8005e26:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d10b      	bne.n	8005e48 <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d003      	beq.n	8005e40 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d103      	bne.n	8005e48 <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f043 0310 	orr.w	r3, r3, #16
 8005e46:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d003      	beq.n	8005e58 <SAI_InterruptFlag+0x4c>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d104      	bne.n	8005e62 <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	e003      	b.n	8005e6a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f043 0304 	orr.w	r3, r3, #4
 8005e68:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <SAI_Disable>:
  * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005e78:	b490      	push	{r4, r7}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005e80:	4b16      	ldr	r3, [pc, #88]	; (8005edc <SAI_Disable+0x64>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <SAI_Disable+0x68>)
 8005e86:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8a:	0b1b      	lsrs	r3, r3, #12
 8005e8c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ea0:	601a      	str	r2, [r3, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	1e5c      	subs	r4, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10a      	bne.n	8005ec0 <SAI_Disable+0x48>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ebe:	e006      	b.n	8005ece <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e9      	bne.n	8005ea2 <SAI_Disable+0x2a>

  return status;
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bc90      	pop	{r4, r7}
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	20000014 	.word	0x20000014
 8005ee0:	95cbec1b 	.word	0x95cbec1b

08005ee4 <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	60fb      	str	r3, [r7, #12]

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d11c      	bne.n	8005f3a <SAI_DMATxCplt+0x56>
  {
    hsai->XferCount = 0;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005f16:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005f18:	2100      	movs	r1, #0
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f7ff ff76 	bl	8005e0c <SAI_InterruptFlag>
 8005f20:	4603      	mov	r3, r0
 8005f22:	43d9      	mvns	r1, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691a      	ldr	r2, [r3, #16]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	400a      	ands	r2, r1
 8005f30:	611a      	str	r2, [r3, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f7ff ff48 	bl	8005dd0 <HAL_SAI_TxCpltCallback>
}
 8005f40:	bf00      	nop
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <SAI_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	60fb      	str	r3, [r7, #12]

  HAL_SAI_TxHalfCpltCallback(hsai);
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7ff ff44 	bl	8005de4 <HAL_SAI_TxHalfCpltCallback>
}
 8005f5c:	bf00      	nop
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	60fb      	str	r3, [r7, #12]
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d11c      	bne.n	8005fba <SAI_DMARxCplt+0x56>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005f8e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005f98:	2100      	movs	r1, #0
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f7ff ff36 	bl	8005e0c <SAI_InterruptFlag>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	43d9      	mvns	r1, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	400a      	ands	r2, r1
 8005fb0:	611a      	str	r2, [r3, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f7fa fe9e 	bl	8000cfc <HAL_SAI_RxCpltCallback>
}
 8005fc0:	bf00      	nop
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	60fb      	str	r3, [r7, #12]

  HAL_SAI_RxHalfCpltCallback(hsai);
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7fa fe86 	bl	8000ce8 <HAL_SAI_RxHalfCpltCallback>
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ff8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	2b01      	cmp	r3, #1
 800600a:	d004      	beq.n	8006016 <SAI_DMAError+0x32>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006012:	2b01      	cmp	r3, #1
 8006014:	d112      	bne.n	800603c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006024:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7ff ff26 	bl	8005e78 <SAI_Disable>
    
    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f7ff fedb 	bl	8005df8 <HAL_SAI_ErrorCallback>
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <__libc_init_array>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	4d0d      	ldr	r5, [pc, #52]	; (8006084 <__libc_init_array+0x38>)
 8006050:	4c0d      	ldr	r4, [pc, #52]	; (8006088 <__libc_init_array+0x3c>)
 8006052:	1b64      	subs	r4, r4, r5
 8006054:	10a4      	asrs	r4, r4, #2
 8006056:	2600      	movs	r6, #0
 8006058:	42a6      	cmp	r6, r4
 800605a:	d109      	bne.n	8006070 <__libc_init_array+0x24>
 800605c:	4d0b      	ldr	r5, [pc, #44]	; (800608c <__libc_init_array+0x40>)
 800605e:	4c0c      	ldr	r4, [pc, #48]	; (8006090 <__libc_init_array+0x44>)
 8006060:	f000 f818 	bl	8006094 <_init>
 8006064:	1b64      	subs	r4, r4, r5
 8006066:	10a4      	asrs	r4, r4, #2
 8006068:	2600      	movs	r6, #0
 800606a:	42a6      	cmp	r6, r4
 800606c:	d105      	bne.n	800607a <__libc_init_array+0x2e>
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	f855 3b04 	ldr.w	r3, [r5], #4
 8006074:	4798      	blx	r3
 8006076:	3601      	adds	r6, #1
 8006078:	e7ee      	b.n	8006058 <__libc_init_array+0xc>
 800607a:	f855 3b04 	ldr.w	r3, [r5], #4
 800607e:	4798      	blx	r3
 8006080:	3601      	adds	r6, #1
 8006082:	e7f2      	b.n	800606a <__libc_init_array+0x1e>
 8006084:	080060d8 	.word	0x080060d8
 8006088:	080060d8 	.word	0x080060d8
 800608c:	080060d8 	.word	0x080060d8
 8006090:	080060dc 	.word	0x080060dc

08006094 <_init>:
 8006094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006096:	bf00      	nop
 8006098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609a:	bc08      	pop	{r3}
 800609c:	469e      	mov	lr, r3
 800609e:	4770      	bx	lr

080060a0 <_fini>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	bf00      	nop
 80060a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a6:	bc08      	pop	{r3}
 80060a8:	469e      	mov	lr, r3
 80060aa:	4770      	bx	lr
