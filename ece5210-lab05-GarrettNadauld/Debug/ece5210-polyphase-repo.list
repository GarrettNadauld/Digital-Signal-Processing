
ece5210-polyphase-repo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000699c  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006b98  08006b98  00016b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d08  08006d08  0002100c  2**0
                  CONTENTS
  4 .ARM          00000000  08006d08  08006d08  0002100c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d08  08006d08  0002100c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d08  08006d08  00016d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d0c  08006d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000100c  20000000  08006d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002df18  2000100c  08007d1c  0002100c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002ef24  08007d1c  0002ef24  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002100c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002103a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c51b  00000000  00000000  0002107d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022fb  00000000  00000000  0002d598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  0002f898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000089f  00000000  00000000  000303f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ddbb  00000000  00000000  00030c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f8e5  00000000  00000000  0005ea4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010d717  00000000  00000000  0006e32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003060  00000000  00000000  0017ba48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0017eaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000100c 	.word	0x2000100c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006b7c 	.word	0x08006b7c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20001010 	.word	0x20001010
 8000234:	08006b7c 	.word	0x08006b7c

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <write_buff_val>:
float h_aa[NUM_TAPS] = {0.f};
float h_poly[NUM_TAPS] = {0.f};
int cnt_dec = 0;
int buffer_index = 0;

void write_buff_val(buffer *buff, float value){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	ed87 0a00 	vstr	s0, [r7]
	buff->data[(++buff->write_buff_index) & BUFF_SIZE_MASK] = value;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80005c2:	3301      	adds	r3, #1
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80005d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	4413      	add	r3, r2
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	601a      	str	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <read_buff_val>:

float read_buff_val(buffer *buff, uint16_t idx_in){
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	807b      	strh	r3, [r7, #2]
	return buff->data[(buff->write_buff_index - idx_in) & BUFF_SIZE_MASK];
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f8b3 2200 	ldrh.w	r2, [r3, #512]	; 0x200
 80005fe:	887b      	ldrh	r3, [r7, #2]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	b29b      	uxth	r3, r3
 8000604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	ee07 3a90 	vmov	s15, r3
}
 8000614:	eeb0 0a67 	vmov.f32	s0, s15
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <fir>:
float h[NUM_TAPS] = {1.0f, 1.0f, 1.0f};
int cnt = 0;
float buf[NUM_TAPS] = {0.0f};
uint16_t og_buffer_index = 0;

float fir(float sample_in, float *b, uint16_t len_b){
 8000624:	b480      	push	{r7}
 8000626:	b089      	sub	sp, #36	; 0x24
 8000628:	af00      	add	r7, sp, #0
 800062a:	ed87 0a03 	vstr	s0, [r7, #12]
 800062e:	60b8      	str	r0, [r7, #8]
 8000630:	460b      	mov	r3, r1
 8000632:	80fb      	strh	r3, [r7, #6]

    float sample_out_f = 0.0f; // Output sample
 8000634:	f04f 0300 	mov.w	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]

    buf[og_buffer_index] = sample_in;
 800063a:	4b24      	ldr	r3, [pc, #144]	; (80006cc <fir+0xa8>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	4a24      	ldr	r2, [pc, #144]	; (80006d0 <fir+0xac>)
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	601a      	str	r2, [r3, #0]

    for(uint16_t n = 0; n < len_b; n++) {
 8000648:	2300      	movs	r3, #0
 800064a:	837b      	strh	r3, [r7, #26]
 800064c:	e024      	b.n	8000698 <fir+0x74>
    	int k = (og_buffer_index + len_b - n) % len_b;
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <fir+0xa8>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	88fb      	ldrh	r3, [r7, #6]
 8000656:	441a      	add	r2, r3
 8000658:	8b7b      	ldrh	r3, [r7, #26]
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	88fa      	ldrh	r2, [r7, #6]
 800065e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000662:	fb01 f202 	mul.w	r2, r1, r2
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	617b      	str	r3, [r7, #20]
        sample_out_f += b[n] * buf[k];
 800066a:	8b7b      	ldrh	r3, [r7, #26]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	4413      	add	r3, r2
 8000672:	ed93 7a00 	vldr	s14, [r3]
 8000676:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <fir+0xac>)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	4413      	add	r3, r2
 800067e:	edd3 7a00 	vldr	s15, [r3]
 8000682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000686:	ed97 7a07 	vldr	s14, [r7, #28]
 800068a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800068e:	edc7 7a07 	vstr	s15, [r7, #28]
    for(uint16_t n = 0; n < len_b; n++) {
 8000692:	8b7b      	ldrh	r3, [r7, #26]
 8000694:	3301      	adds	r3, #1
 8000696:	837b      	strh	r3, [r7, #26]
 8000698:	8b7a      	ldrh	r2, [r7, #26]
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	429a      	cmp	r2, r3
 800069e:	d3d6      	bcc.n	800064e <fir+0x2a>
    }

    og_buffer_index = (og_buffer_index + 1) % len_b;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <fir+0xa8>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	fb93 f1f2 	sdiv	r1, r3, r2
 80006ac:	fb01 f202 	mul.w	r2, r1, r2
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <fir+0xa8>)
 80006b6:	801a      	strh	r2, [r3, #0]

    return sample_out_f;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	ee07 3a90 	vmov	s15, r3
}
 80006be:	eeb0 0a67 	vmov.f32	s0, s15
 80006c2:	3724      	adds	r7, #36	; 0x24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	20003f0c 	.word	0x20003f0c
 80006d0:	20002f6c 	.word	0x20002f6c

080006d4 <fir_dec>:

static buffer dec_buf[DECIMATE];
static buffer fir_buf[DECIMATE];

float fir_dec(float sample_in, float *b, uint16_t len_b, uint16_t z){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	ed2d 8b02 	vpush	{d8}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	ed87 0a03 	vstr	s0, [r7, #12]
 80006e2:	60b8      	str	r0, [r7, #8]
 80006e4:	460b      	mov	r3, r1
 80006e6:	80fb      	strh	r3, [r7, #6]
 80006e8:	4613      	mov	r3, r2
 80006ea:	80bb      	strh	r3, [r7, #4]

    float sample_out_f = 0.0f;
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]

    write_buff_val(&fir_buf[z], sample_in);
 80006f2:	88ba      	ldrh	r2, [r7, #4]
 80006f4:	4613      	mov	r3, r2
 80006f6:	01db      	lsls	r3, r3, #7
 80006f8:	4413      	add	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <fir_dec+0xa4>)
 80006fe:	4413      	add	r3, r2
 8000700:	ed97 0a03 	vldr	s0, [r7, #12]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff53 	bl	80005b0 <write_buff_val>

    for(uint16_t n = 0; n < len_b; n++) {
 800070a:	2300      	movs	r3, #0
 800070c:	827b      	strh	r3, [r7, #18]
 800070e:	e025      	b.n	800075c <fir_dec+0x88>
        sample_out_f += b[z*DEC_TAPS+n] * read_buff_val(&fir_buf[z], n);
 8000710:	88ba      	ldrh	r2, [r7, #4]
 8000712:	4613      	mov	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	461a      	mov	r2, r3
 800071c:	8a7b      	ldrh	r3, [r7, #18]
 800071e:	4413      	add	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	4413      	add	r3, r2
 8000726:	ed93 8a00 	vldr	s16, [r3]
 800072a:	88ba      	ldrh	r2, [r7, #4]
 800072c:	4613      	mov	r3, r2
 800072e:	01db      	lsls	r3, r3, #7
 8000730:	4413      	add	r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4a10      	ldr	r2, [pc, #64]	; (8000778 <fir_dec+0xa4>)
 8000736:	4413      	add	r3, r2
 8000738:	8a7a      	ldrh	r2, [r7, #18]
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff55 	bl	80005ec <read_buff_val>
 8000742:	eef0 7a40 	vmov.f32	s15, s0
 8000746:	ee68 7a27 	vmul.f32	s15, s16, s15
 800074a:	ed97 7a05 	vldr	s14, [r7, #20]
 800074e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000752:	edc7 7a05 	vstr	s15, [r7, #20]
    for(uint16_t n = 0; n < len_b; n++) {
 8000756:	8a7b      	ldrh	r3, [r7, #18]
 8000758:	3301      	adds	r3, #1
 800075a:	827b      	strh	r3, [r7, #18]
 800075c:	8a7a      	ldrh	r2, [r7, #18]
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	429a      	cmp	r2, r3
 8000762:	d3d5      	bcc.n	8000710 <fir_dec+0x3c>
    }

    return sample_out_f;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	ee07 3a90 	vmov	s15, r3
}
 800076a:	eeb0 0a67 	vmov.f32	s0, s15
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	ecbd 8b02 	vpop	{d8}
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200108a0 	.word	0x200108a0

0800077c <fir_int>:

static buffer int_buf[DECIMATE];

float fir_int(float sample_in, float *b, uint16_t len_b, uint16_t z){
 800077c:	b580      	push	{r7, lr}
 800077e:	ed2d 8b02 	vpush	{d8}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	ed87 0a03 	vstr	s0, [r7, #12]
 800078a:	60b8      	str	r0, [r7, #8]
 800078c:	460b      	mov	r3, r1
 800078e:	80fb      	strh	r3, [r7, #6]
 8000790:	4613      	mov	r3, r2
 8000792:	80bb      	strh	r3, [r7, #4]

    float sample_out_f = 0.0f;
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	617b      	str	r3, [r7, #20]

    write_buff_val(&int_buf[z], sample_in);
 800079a:	88ba      	ldrh	r2, [r7, #4]
 800079c:	4613      	mov	r3, r2
 800079e:	01db      	lsls	r3, r3, #7
 80007a0:	4413      	add	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <fir_int+0xa4>)
 80007a6:	4413      	add	r3, r2
 80007a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff feff 	bl	80005b0 <write_buff_val>

    for(uint16_t n = 0; n < len_b; n++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	827b      	strh	r3, [r7, #18]
 80007b6:	e025      	b.n	8000804 <fir_int+0x88>
        sample_out_f += b[z*INT_TAPS+n] * read_buff_val(&int_buf[z], n);
 80007b8:	88ba      	ldrh	r2, [r7, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	461a      	mov	r2, r3
 80007c4:	8a7b      	ldrh	r3, [r7, #18]
 80007c6:	4413      	add	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	4413      	add	r3, r2
 80007ce:	ed93 8a00 	vldr	s16, [r3]
 80007d2:	88ba      	ldrh	r2, [r7, #4]
 80007d4:	4613      	mov	r3, r2
 80007d6:	01db      	lsls	r3, r3, #7
 80007d8:	4413      	add	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4a10      	ldr	r2, [pc, #64]	; (8000820 <fir_int+0xa4>)
 80007de:	4413      	add	r3, r2
 80007e0:	8a7a      	ldrh	r2, [r7, #18]
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff01 	bl	80005ec <read_buff_val>
 80007ea:	eef0 7a40 	vmov.f32	s15, s0
 80007ee:	ee68 7a27 	vmul.f32	s15, s16, s15
 80007f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80007f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007fa:	edc7 7a05 	vstr	s15, [r7, #20]
    for(uint16_t n = 0; n < len_b; n++) {
 80007fe:	8a7b      	ldrh	r3, [r7, #18]
 8000800:	3301      	adds	r3, #1
 8000802:	827b      	strh	r3, [r7, #18]
 8000804:	8a7a      	ldrh	r2, [r7, #18]
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	429a      	cmp	r2, r3
 800080a:	d3d5      	bcc.n	80007b8 <fir_int+0x3c>
    }

    return sample_out_f;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	ee07 3a90 	vmov	s15, r3
}
 8000812:	eeb0 0a67 	vmov.f32	s0, s15
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	ecbd 8b02 	vpop	{d8}
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2001d230 	.word	0x2001d230

08000824 <polyphase_decimation>:

float polyphase_decimation(float x, float *h, uint16_t M){
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	ed87 0a03 	vstr	s0, [r7, #12]
 800082e:	60b8      	str	r0, [r7, #8]
 8000830:	460b      	mov	r3, r1
 8000832:	80fb      	strh	r3, [r7, #6]
	float y = 0.0;
 8000834:	f04f 0300 	mov.w	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]

	write_buff_val(dec_buf, x);
 800083a:	ed97 0a03 	vldr	s0, [r7, #12]
 800083e:	4823      	ldr	r0, [pc, #140]	; (80008cc <polyphase_decimation+0xa8>)
 8000840:	f7ff feb6 	bl	80005b0 <write_buff_val>

	if(cnt_dec%DECIMATE == 0){
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <polyphase_decimation+0xac>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <polyphase_decimation+0xb0>)
 800084a:	fb83 1302 	smull	r1, r3, r3, r2
 800084e:	1159      	asrs	r1, r3, #5
 8000850:	17d3      	asrs	r3, r2, #31
 8000852:	1acb      	subs	r3, r1, r3
 8000854:	2164      	movs	r1, #100	; 0x64
 8000856:	fb01 f303 	mul.w	r3, r1, r3
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d126      	bne.n	80008ae <polyphase_decimation+0x8a>
		cnt_dec ++;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <polyphase_decimation+0xac>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	4a1a      	ldr	r2, [pc, #104]	; (80008d0 <polyphase_decimation+0xac>)
 8000868:	6013      	str	r3, [r2, #0]
		for(uint16_t i=0; i<DECIMATE; i++){
 800086a:	2300      	movs	r3, #0
 800086c:	837b      	strh	r3, [r7, #26]
 800086e:	e019      	b.n	80008a4 <polyphase_decimation+0x80>
			float q = read_buff_val(dec_buf,i);
 8000870:	8b7b      	ldrh	r3, [r7, #26]
 8000872:	4619      	mov	r1, r3
 8000874:	4815      	ldr	r0, [pc, #84]	; (80008cc <polyphase_decimation+0xa8>)
 8000876:	f7ff feb9 	bl	80005ec <read_buff_val>
 800087a:	ed87 0a05 	vstr	s0, [r7, #20]
			y += fir_dec(q, h, (uint16_t)DEC_TAPS, i);
 800087e:	8b7b      	ldrh	r3, [r7, #26]
 8000880:	461a      	mov	r2, r3
 8000882:	210a      	movs	r1, #10
 8000884:	68b8      	ldr	r0, [r7, #8]
 8000886:	ed97 0a05 	vldr	s0, [r7, #20]
 800088a:	f7ff ff23 	bl	80006d4 <fir_dec>
 800088e:	eeb0 7a40 	vmov.f32	s14, s0
 8000892:	edd7 7a07 	vldr	s15, [r7, #28]
 8000896:	ee77 7a87 	vadd.f32	s15, s15, s14
 800089a:	edc7 7a07 	vstr	s15, [r7, #28]
		for(uint16_t i=0; i<DECIMATE; i++){
 800089e:	8b7b      	ldrh	r3, [r7, #26]
 80008a0:	3301      	adds	r3, #1
 80008a2:	837b      	strh	r3, [r7, #26]
 80008a4:	8b7b      	ldrh	r3, [r7, #26]
 80008a6:	2b63      	cmp	r3, #99	; 0x63
 80008a8:	d9e2      	bls.n	8000870 <polyphase_decimation+0x4c>
		}
		return y;
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	e006      	b.n	80008bc <polyphase_decimation+0x98>
	}
		cnt_dec ++;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <polyphase_decimation+0xac>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <polyphase_decimation+0xac>)
 80008b6:	6013      	str	r3, [r2, #0]
		return 0.0;
 80008b8:	f04f 0300 	mov.w	r3, #0
}
 80008bc:	ee07 3a90 	vmov	s15, r3
 80008c0:	eeb0 0a67 	vmov.f32	s0, s15
 80008c4:	3720      	adds	r7, #32
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20003f10 	.word	0x20003f10
 80008d0:	20002f68 	.word	0x20002f68
 80008d4:	51eb851f 	.word	0x51eb851f

080008d8 <polyphase_interpolation>:

uint16_t int_cnt = 0;
float p = 0.0;

float polyphase_interpolation(float x , float *h , uint16_t L){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	ed87 0a03 	vstr	s0, [r7, #12]
 80008e2:	60b8      	str	r0, [r7, #8]
 80008e4:	460b      	mov	r3, r1
 80008e6:	80fb      	strh	r3, [r7, #6]
	if(x==0.0){
 80008e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80008ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80008f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f4:	d11b      	bne.n	800092e <polyphase_interpolation+0x56>
		int_cnt ++;
 80008f6:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <polyphase_interpolation+0x98>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <polyphase_interpolation+0x98>)
 8000900:	801a      	strh	r2, [r3, #0]
		return fir_int(p, h, (uint16_t)INT_TAPS, int_cnt)*L;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <polyphase_interpolation+0x9c>)
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <polyphase_interpolation+0x98>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	210a      	movs	r1, #10
 8000910:	68b8      	ldr	r0, [r7, #8]
 8000912:	eeb0 0a67 	vmov.f32	s0, s15
 8000916:	f7ff ff31 	bl	800077c <fir_int>
 800091a:	eeb0 7a40 	vmov.f32	s14, s0
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800092c:	e01a      	b.n	8000964 <polyphase_interpolation+0x8c>
	}
	p = x;
 800092e:	4a11      	ldr	r2, [pc, #68]	; (8000974 <polyphase_interpolation+0x9c>)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6013      	str	r3, [r2, #0]
	int_cnt = 0;
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <polyphase_interpolation+0x98>)
 8000936:	2200      	movs	r2, #0
 8000938:	801a      	strh	r2, [r3, #0]
	return fir_int(p, h, (uint16_t)INT_TAPS, int_cnt)*L;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <polyphase_interpolation+0x9c>)
 800093c:	edd3 7a00 	vldr	s15, [r3]
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <polyphase_interpolation+0x98>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	210a      	movs	r1, #10
 8000948:	68b8      	ldr	r0, [r7, #8]
 800094a:	eeb0 0a67 	vmov.f32	s0, s15
 800094e:	f7ff ff15 	bl	800077c <fir_int>
 8000952:	eeb0 7a40 	vmov.f32	s14, s0
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	ee07 3a90 	vmov	s15, r3
 800095c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000960:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000964:	eeb0 0a67 	vmov.f32	s0, s15
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20029bc0 	.word	0x20029bc0
 8000974:	20029bc4 	.word	0x20029bc4

08000978 <init_firwin>:

void init_firwin(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	ed2d 8b02 	vpush	{d8}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
    uint16_t M = NUM_TAPS - 1;
 8000982:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000986:	80fb      	strh	r3, [r7, #6]
    float sum = 0.f;
 8000988:	f04f 0300 	mov.w	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    int cnt = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]

    for (uint16_t n = 0; n < NUM_TAPS; n++)
 8000992:	2300      	movs	r3, #0
 8000994:	82fb      	strh	r3, [r7, #22]
 8000996:	e070      	b.n	8000a7a <init_firwin+0x102>
        {
            h_aa[n] = W_C/PI;
        }
        else
        {
            h_aa[n] = sinf(W_C*(n - (float)M/2)) /
 8000998:	8afb      	ldrh	r3, [r7, #22]
 800099a:	ee07 3a90 	vmov	s15, r3
 800099e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	ee07 3a90 	vmov	s15, r3
 80009a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80009ac:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80009b0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80009b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009b8:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8000b0c <init_firwin+0x194>
 80009bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c0:	eeb0 0a67 	vmov.f32	s0, s15
 80009c4:	f005 ff58 	bl	8006878 <sinf>
 80009c8:	eeb0 6a40 	vmov.f32	s12, s0
                (PI*(n - (float)M/2));
 80009cc:	8afb      	ldrh	r3, [r7, #22]
 80009ce:	ee07 3a90 	vmov	s15, r3
 80009d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	ee07 3a90 	vmov	s15, r3
 80009dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80009e0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80009e4:	eec6 7aa5 	vdiv.f32	s15, s13, s11
 80009e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ec:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000b10 <init_firwin+0x198>
 80009f0:	ee27 7a87 	vmul.f32	s14, s15, s14
            h_aa[n] = sinf(W_C*(n - (float)M/2)) /
 80009f4:	8afb      	ldrh	r3, [r7, #22]
 80009f6:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80009fa:	4a46      	ldr	r2, [pc, #280]	; (8000b14 <init_firwin+0x19c>)
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	edc3 7a00 	vstr	s15, [r3]
        }

        h_aa[n] *= 0.54f - 0.46f*cosf(2*PI*n/M);
 8000a04:	8afb      	ldrh	r3, [r7, #22]
 8000a06:	4a43      	ldr	r2, [pc, #268]	; (8000b14 <init_firwin+0x19c>)
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	ed93 8a00 	vldr	s16, [r3]
 8000a10:	8afb      	ldrh	r3, [r7, #22]
 8000a12:	ee07 3a90 	vmov	s15, r3
 8000a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8000b18 <init_firwin+0x1a0>
 8000a1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a22:	88fb      	ldrh	r3, [r7, #6]
 8000a24:	ee07 3a90 	vmov	s15, r3
 8000a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000a30:	eeb0 0a66 	vmov.f32	s0, s13
 8000a34:	f005 ffe4 	bl	8006a00 <cosf>
 8000a38:	eef0 7a40 	vmov.f32	s15, s0
 8000a3c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8000b1c <init_firwin+0x1a4>
 8000a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a44:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000b20 <init_firwin+0x1a8>
 8000a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a4c:	8afb      	ldrh	r3, [r7, #22]
 8000a4e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000a52:	4a30      	ldr	r2, [pc, #192]	; (8000b14 <init_firwin+0x19c>)
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	edc3 7a00 	vstr	s15, [r3]
        
        sum += h_aa[n];
 8000a5c:	8afb      	ldrh	r3, [r7, #22]
 8000a5e:	4a2d      	ldr	r2, [pc, #180]	; (8000b14 <init_firwin+0x19c>)
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	edd3 7a00 	vldr	s15, [r3]
 8000a68:	ed97 7a07 	vldr	s14, [r7, #28]
 8000a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a70:	edc7 7a07 	vstr	s15, [r7, #28]
    for (uint16_t n = 0; n < NUM_TAPS; n++)
 8000a74:	8afb      	ldrh	r3, [r7, #22]
 8000a76:	3301      	adds	r3, #1
 8000a78:	82fb      	strh	r3, [r7, #22]
 8000a7a:	8afb      	ldrh	r3, [r7, #22]
 8000a7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a80:	d38a      	bcc.n	8000998 <init_firwin+0x20>
    }

    for (int n = 0; n < NUM_TAPS; n++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	e012      	b.n	8000aae <init_firwin+0x136>
    {
        h_aa[n] /= sum;
 8000a88:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <init_firwin+0x19c>)
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	4413      	add	r3, r2
 8000a90:	edd3 6a00 	vldr	s13, [r3]
 8000a94:	ed97 7a07 	vldr	s14, [r7, #28]
 8000a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <init_firwin+0x19c>)
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	edc3 7a00 	vstr	s15, [r3]
    for (int n = 0; n < NUM_TAPS; n++)
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ab4:	dbe8      	blt.n	8000a88 <init_firwin+0x110>
    }

    for(int i=0; i<DECIMATE; i++) {
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	e01d      	b.n	8000af8 <init_firwin+0x180>
    	for(int j=0; j<DEC_TAPS; j++) {
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	e014      	b.n	8000aec <init_firwin+0x174>
    		h_poly[cnt] = h_aa[i+j*DECIMATE];
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	2264      	movs	r2, #100	; 0x64
 8000ac6:	fb03 f202 	mul.w	r2, r3, r2
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <init_firwin+0x19c>)
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4913      	ldr	r1, [pc, #76]	; (8000b24 <init_firwin+0x1ac>)
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	440b      	add	r3, r1
 8000ade:	601a      	str	r2, [r3, #0]
		cnt += 1;
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
    	for(int j=0; j<DEC_TAPS; j++) {
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b09      	cmp	r3, #9
 8000af0:	dde7      	ble.n	8000ac2 <init_firwin+0x14a>
    for(int i=0; i<DECIMATE; i++) {
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b63      	cmp	r3, #99	; 0x63
 8000afc:	ddde      	ble.n	8000abc <init_firwin+0x144>
    	}
    }
    
}
 8000afe:	bf00      	nop
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	ecbd 8b02 	vpop	{d8}
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	3d00adfd 	.word	0x3d00adfd
 8000b10:	40490fdb 	.word	0x40490fdb
 8000b14:	20001028 	.word	0x20001028
 8000b18:	40c90fdb 	.word	0x40c90fdb
 8000b1c:	3eeb851f 	.word	0x3eeb851f
 8000b20:	3f0a3d71 	.word	0x3f0a3d71
 8000b24:	20001fc8 	.word	0x20001fc8

08000b28 <process_sample>:

int16_t process_sample(int16_t sample_in)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
	h[1] = (float)(-2.0*(float)cos((float)(120.0/480.0 * M_PI)));
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <process_sample+0x84>)
 8000b34:	4a1e      	ldr	r2, [pc, #120]	; (8000bb0 <process_sample+0x88>)
 8000b36:	605a      	str	r2, [r3, #4]
    int16_t sample_out = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	827b      	strh	r3, [r7, #18]
    float sample_out_f = 0.0;
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
    float sample_in_f = (float)sample_in;
 8000b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b46:	ee07 3a90 	vmov	s15, r3
 8000b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b4e:	edc7 7a03 	vstr	s15, [r7, #12]

    sample_out_f = polyphase_decimation(sample_in_f, h_poly, DECIMATE);
 8000b52:	2164      	movs	r1, #100	; 0x64
 8000b54:	4817      	ldr	r0, [pc, #92]	; (8000bb4 <process_sample+0x8c>)
 8000b56:	ed97 0a03 	vldr	s0, [r7, #12]
 8000b5a:	f7ff fe63 	bl	8000824 <polyphase_decimation>
 8000b5e:	ed87 0a05 	vstr	s0, [r7, #20]

    if(sample_out_f!=0.0){
 8000b62:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b6e:	d007      	beq.n	8000b80 <process_sample+0x58>
        	sample_out_f = fir(sample_out_f, h, 3);
 8000b70:	2103      	movs	r1, #3
 8000b72:	480e      	ldr	r0, [pc, #56]	; (8000bac <process_sample+0x84>)
 8000b74:	ed97 0a05 	vldr	s0, [r7, #20]
 8000b78:	f7ff fd54 	bl	8000624 <fir>
 8000b7c:	ed87 0a05 	vstr	s0, [r7, #20]
    }

    sample_out_f = polyphase_interpolation(sample_out_f, h_poly, INTERPOLATE);
 8000b80:	2164      	movs	r1, #100	; 0x64
 8000b82:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <process_sample+0x8c>)
 8000b84:	ed97 0a05 	vldr	s0, [r7, #20]
 8000b88:	f7ff fea6 	bl	80008d8 <polyphase_interpolation>
 8000b8c:	ed87 0a05 	vstr	s0, [r7, #20]

    // Convert back to int16_t
    sample_out = (int16_t)sample_out_f;
 8000b90:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b98:	ee17 3a90 	vmov	r3, s15
 8000b9c:	827b      	strh	r3, [r7, #18]
    return sample_out;
 8000b9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	bfb504f3 	.word	0xbfb504f3
 8000bb4:	20001fc8 	.word	0x20001fc8

08000bb8 <main>:
#include "myaudio.h"

void SystemClock_Config(void);

int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbc:	f001 fee3 	bl	8002986 <HAL_Init>

  BSP_LED_Init(LED_RED);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f001 fd05 	bl	80025d0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f001 fd02 	bl	80025d0 <BSP_LED_Init>
  BSP_LED_Off(LED_RED);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f001 fd49 	bl	8002664 <BSP_LED_Off>
  BSP_LED_On(LED_GREEN);
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f001 fd2c 	bl	8002630 <BSP_LED_On>

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f804 	bl	8000be4 <SystemClock_Config>

  audio_init();
 8000bdc:	f000 f8b4 	bl	8000d48 <audio_init>
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <main+0x28>
	...

08000be4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0b8      	sub	sp, #224	; 0xe0
 8000be8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b4f      	ldr	r3, [pc, #316]	; (8000d28 <SystemClock_Config+0x144>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a4e      	ldr	r2, [pc, #312]	; (8000d28 <SystemClock_Config+0x144>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b4c      	ldr	r3, [pc, #304]	; (8000d28 <SystemClock_Config+0x144>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c02:	4b4a      	ldr	r3, [pc, #296]	; (8000d2c <SystemClock_Config+0x148>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a49      	ldr	r2, [pc, #292]	; (8000d2c <SystemClock_Config+0x148>)
 8000c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	4b47      	ldr	r3, [pc, #284]	; (8000d2c <SystemClock_Config+0x148>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c36:	2319      	movs	r3, #25
 8000c38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000c3c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 f9d5 	bl	8004004 <HAL_RCC_OscConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <SystemClock_Config+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c60:	215f      	movs	r1, #95	; 0x5f
 8000c62:	4833      	ldr	r0, [pc, #204]	; (8000d30 <SystemClock_Config+0x14c>)
 8000c64:	f000 f86a 	bl	8000d3c <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c68:	f003 f97c 	bl	8003f64 <HAL_PWREx_EnableOverDrive>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <SystemClock_Config+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c72:	2166      	movs	r1, #102	; 0x66
 8000c74:	482e      	ldr	r0, [pc, #184]	; (8000d30 <SystemClock_Config+0x14c>)
 8000c76:	f000 f861 	bl	8000d3c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7a:	230f      	movs	r3, #15
 8000c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c9c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ca0:	2107      	movs	r1, #7
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 fc66 	bl	8004574 <HAL_RCC_ClockConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <SystemClock_Config+0xd2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000cae:	2174      	movs	r1, #116	; 0x74
 8000cb0:	481f      	ldr	r0, [pc, #124]	; (8000d30 <SystemClock_Config+0x14c>)
 8000cb2:	f000 f843 	bl	8000d3c <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <SystemClock_Config+0x150>)
 8000cb8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000cba:	23c0      	movs	r3, #192	; 0xc0
 8000cbc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 fdd1 	bl	800488c <HAL_RCCEx_PeriphCLKConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <SystemClock_Config+0x114>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000cf0:	2184      	movs	r1, #132	; 0x84
 8000cf2:	480f      	ldr	r0, [pc, #60]	; (8000d30 <SystemClock_Config+0x14c>)
 8000cf4:	f000 f822 	bl	8000d3c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000cf8:	f003 fdbc 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <SystemClock_Config+0x154>)
 8000d00:	fba2 2303 	umull	r2, r3, r2, r3
 8000d04:	099b      	lsrs	r3, r3, #6
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 ff99 	bl	8002c3e <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000d0c:	2004      	movs	r0, #4
 8000d0e:	f001 ffa3 	bl	8002c58 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d1a:	f001 ff66 	bl	8002bea <HAL_NVIC_SetPriority>
}
 8000d1e:	bf00      	nop
 8000d20:	37e0      	adds	r7, #224	; 0xe0
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40007000 	.word	0x40007000
 8000d30:	08006b98 	.word	0x08006b98
 8000d34:	08080040 	.word	0x08080040
 8000d38:	10624dd3 	.word	0x10624dd3

08000d3c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8000d46:	e7fe      	b.n	8000d46 <_Error_Handler+0xa>

08000d48 <audio_init>:
///////////////////////////////////////////////////////////



void audio_init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
    // initialize the filter
    init_firwin();
 8000d4c:	f7ff fe14 	bl	8000978 <init_firwin>
    
    haudio_out_sai.Instance = SAI1_Block_A;
 8000d50:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <audio_init+0xe8>)
 8000d52:	4a38      	ldr	r2, [pc, #224]	; (8000e34 <audio_init+0xec>)
 8000d54:	601a      	str	r2, [r3, #0]
    haudio_in_sai.Instance = SAI1_Block_B;
 8000d56:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <audio_init+0xf0>)
 8000d58:	4a38      	ldr	r2, [pc, #224]	; (8000e3c <audio_init+0xf4>)
 8000d5a:	601a      	str	r2, [r3, #0]

    fill_buffer_with_square_wave(playbackBuffer,
 8000d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d60:	4837      	ldr	r0, [pc, #220]	; (8000e40 <audio_init+0xf8>)
 8000d62:	f000 f883 	bl	8000e6c <fill_buffer_with_square_wave>
                                 MY_BUFFER_SIZE_SAMPLES);

    ConvertSampleBufferToDMABuffer(playbackBuffer,
 8000d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6a:	4a36      	ldr	r2, [pc, #216]	; (8000e44 <audio_init+0xfc>)
 8000d6c:	4934      	ldr	r1, [pc, #208]	; (8000e40 <audio_init+0xf8>)
 8000d6e:	4834      	ldr	r0, [pc, #208]	; (8000e40 <audio_init+0xf8>)
 8000d70:	f000 f8b4 	bl	8000edc <ConvertSampleBufferToDMABuffer>
                                   playbackBuffer,
                                   saiDMATransmitBuffer,
                                   MY_BUFFER_SIZE_SAMPLES);

    My_SAI_ClockConfig(frequency);
 8000d74:	4b34      	ldr	r3, [pc, #208]	; (8000e48 <audio_init+0x100>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 f925 	bl	8000fc8 <My_SAI_ClockConfig>

    My_AUDIO_OUT_MspInit();
 8000d7e:	f000 f965 	bl	800104c <My_AUDIO_OUT_MspInit>
    My_SAI_Out_Init(frequency);
 8000d82:	4b31      	ldr	r3, [pc, #196]	; (8000e48 <audio_init+0x100>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f9fc 	bl	8001184 <My_SAI_Out_Init>

    My_AUDIO_IN_MspInit();
 8000d8c:	f000 fa62 	bl	8001254 <My_AUDIO_IN_MspInit>
    My_SAI_In_Init(frequency);
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <audio_init+0x100>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fae3 	bl	8001360 <My_SAI_In_Init>

    wm8994_Init(AUDIO_I2C_ADDRESS,
 8000d9a:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <audio_init+0x104>)
 8000d9c:	781a      	ldrb	r2, [r3, #0]
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <audio_init+0x100>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f240 3102 	movw	r1, #770	; 0x302
 8000da6:	2034      	movs	r0, #52	; 0x34
 8000da8:	f000 fc24 	bl	80015f4 <wm8994_Init>
                INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_HEADPHONE,
                volume, frequency);
    
    HAL_SAI_Transmit_DMA(&haudio_out_sai,
 8000dac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000db0:	4924      	ldr	r1, [pc, #144]	; (8000e44 <audio_init+0xfc>)
 8000db2:	481f      	ldr	r0, [pc, #124]	; (8000e30 <audio_init+0xe8>)
 8000db4:	f005 fab0 	bl	8006318 <HAL_SAI_Transmit_DMA>
                         (uint8_t*) saiDMATransmitBuffer,
                         MY_DMA_BUFFER_SIZE_MSIZES);
    HAL_SAI_Receive_DMA(&haudio_in_sai,
 8000db8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dbc:	4924      	ldr	r1, [pc, #144]	; (8000e50 <audio_init+0x108>)
 8000dbe:	481e      	ldr	r0, [pc, #120]	; (8000e38 <audio_init+0xf0>)
 8000dc0:	f005 fb38 	bl	8006434 <HAL_SAI_Receive_DMA>
                        (uint8_t*) saiDMAReceiveBuffer,
                        MY_DMA_BUFFER_SIZE_MSIZES);
    
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <audio_init+0x10c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]

    while (1)
    {
        if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <audio_init+0x10c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0fb      	beq.n	8000dca <audio_init+0x82>
        {
            if (audio_rec_buffer_state == BUFFER_OFFSET_HALF)
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <audio_init+0x10c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d113      	bne.n	8000e02 <audio_init+0xba>
            {
                ExtractSamplesFromDMABuffer(
 8000dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dde:	491e      	ldr	r1, [pc, #120]	; (8000e58 <audio_init+0x110>)
 8000de0:	481b      	ldr	r0, [pc, #108]	; (8000e50 <audio_init+0x108>)
 8000de2:	f000 f8a9 	bl	8000f38 <ExtractSamplesFromDMABuffer>
                    &saiDMAReceiveBuffer[0],
                    &recordBuffer[0],
                    MY_BUFFER_SIZE_SAMPLES/2);

                CopySampleBuffer(
 8000de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dea:	491b      	ldr	r1, [pc, #108]	; (8000e58 <audio_init+0x110>)
 8000dec:	4814      	ldr	r0, [pc, #80]	; (8000e40 <audio_init+0xf8>)
 8000dee:	f000 f8c7 	bl	8000f80 <CopySampleBuffer>
                    &playbackBuffer[0],
                    &recordBuffer[0],
                    MY_BUFFER_SIZE_SAMPLES / 2);

                ConvertSampleBufferToDMABuffer(
 8000df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <audio_init+0xfc>)
 8000df8:	4911      	ldr	r1, [pc, #68]	; (8000e40 <audio_init+0xf8>)
 8000dfa:	4817      	ldr	r0, [pc, #92]	; (8000e58 <audio_init+0x110>)
 8000dfc:	f000 f86e 	bl	8000edc <ConvertSampleBufferToDMABuffer>
 8000e00:	e012      	b.n	8000e28 <audio_init+0xe0>
                    &saiDMATransmitBuffer[0],
                    MY_BUFFER_SIZE_SAMPLES / 2);
            }
            else
            {
                ExtractSamplesFromDMABuffer(
 8000e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e06:	4915      	ldr	r1, [pc, #84]	; (8000e5c <audio_init+0x114>)
 8000e08:	4815      	ldr	r0, [pc, #84]	; (8000e60 <audio_init+0x118>)
 8000e0a:	f000 f895 	bl	8000f38 <ExtractSamplesFromDMABuffer>
                    &saiDMAReceiveBuffer[MY_DMA_BUFFER_SIZE_BYTES / 2],
                    &recordBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    MY_BUFFER_SIZE_SAMPLES/2);

                CopySampleBuffer(
 8000e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e12:	4912      	ldr	r1, [pc, #72]	; (8000e5c <audio_init+0x114>)
 8000e14:	4813      	ldr	r0, [pc, #76]	; (8000e64 <audio_init+0x11c>)
 8000e16:	f000 f8b3 	bl	8000f80 <CopySampleBuffer>
                    &playbackBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    &recordBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    MY_BUFFER_SIZE_SAMPLES / 2);

                ConvertSampleBufferToDMABuffer(
 8000e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <audio_init+0x120>)
 8000e20:	4910      	ldr	r1, [pc, #64]	; (8000e64 <audio_init+0x11c>)
 8000e22:	480e      	ldr	r0, [pc, #56]	; (8000e5c <audio_init+0x114>)
 8000e24:	f000 f85a 	bl	8000edc <ConvertSampleBufferToDMABuffer>
                    &playbackBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    &saiDMATransmitBuffer[MY_DMA_BUFFER_SIZE_BYTES / 2],
                    MY_BUFFER_SIZE_SAMPLES / 2);

            }
            audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <audio_init+0x10c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
        if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 8000e2e:	e7cc      	b.n	8000dca <audio_init+0x82>
 8000e30:	2002ec4c 	.word	0x2002ec4c
 8000e34:	40015804 	.word	0x40015804
 8000e38:	2002ebc8 	.word	0x2002ebc8
 8000e3c:	40015824 	.word	0x40015824
 8000e40:	2002dbc8 	.word	0x2002dbc8
 8000e44:	20029bc8 	.word	0x20029bc8
 8000e48:	20000fa0 	.word	0x20000fa0
 8000e4c:	20000fa4 	.word	0x20000fa4
 8000e50:	2002bbc8 	.word	0x2002bbc8
 8000e54:	2002ecd0 	.word	0x2002ecd0
 8000e58:	2002e3c8 	.word	0x2002e3c8
 8000e5c:	2002e7c8 	.word	0x2002e7c8
 8000e60:	2002cbc8 	.word	0x2002cbc8
 8000e64:	2002dfc8 	.word	0x2002dfc8
 8000e68:	2002abc8 	.word	0x2002abc8

08000e6c <fill_buffer_with_square_wave>:



static void fill_buffer_with_square_wave(int16_t *buf,
                                         uint32_t num_samples)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
    // Fill up a 100hz square wave
    // 48khz sample rate --> 480 samples in 100 hz --> toggle every 240 samples

    int toggle_period = 240;
 8000e76:	23f0      	movs	r3, #240	; 0xf0
 8000e78:	613b      	str	r3, [r7, #16]
    int count = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    int wave_state = 1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	61bb      	str	r3, [r7, #24]
    int magnitude = 30000;
 8000e82:	f247 5330 	movw	r3, #30000	; 0x7530
 8000e86:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < num_samples; i++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	e01b      	b.n	8000ec6 <fill_buffer_with_square_wave+0x5a>
    {
        buf[i] = magnitude*wave_state;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	fb12 f303 	smulbb	r3, r2, r3
 8000e9a:	b299      	uxth	r1, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b20a      	sxth	r2, r1
 8000ea6:	801a      	strh	r2, [r3, #0]
        count++;
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	61fb      	str	r3, [r7, #28]

        if (count >= toggle_period)
 8000eae:	69fa      	ldr	r2, [r7, #28]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	db04      	blt.n	8000ec0 <fill_buffer_with_square_wave+0x54>
        {
            count = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
            wave_state = wave_state*(-1); // toggle here
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	425b      	negs	r3, r3
 8000ebe:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < num_samples; i++)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d8df      	bhi.n	8000e8e <fill_buffer_with_square_wave+0x22>
        }
        
    }
}
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
 8000ed2:	3724      	adds	r7, #36	; 0x24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <ConvertSampleBufferToDMABuffer>:
*/
static void ConvertSampleBufferToDMABuffer(int16_t *sampleInBuffer,
                                           int16_t *processOutBuffer,
                                           uint8_t *dmaBuffer,
                                           uint32_t num_samples)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e018      	b.n	8000f22 <ConvertSampleBufferToDMABuffer+0x46>
    {
        // samples are spaced 8 bytes apart
        int16_t *p = (int16_t *) &dmaBuffer[i*8];
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        *p = processOutBuffer[i]; // left channel
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	4413      	add	r3, r2
 8000f02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	801a      	strh	r2, [r3, #0]

#ifdef PASSTHROUGH_RIGHT
        *(p+2) = sampleInBuffer[i]; // right channel
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	441a      	add	r2, r3
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	3304      	adds	r3, #4
 8000f16:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f1a:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d3e2      	bcc.n	8000ef0 <ConvertSampleBufferToDMABuffer+0x14>
#else
        *(p+2) = processOutBuffer[i];
#endif
    }
}
 8000f2a:	bf00      	nop
 8000f2c:	bf00      	nop
 8000f2e:	371c      	adds	r7, #28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <ExtractSamplesFromDMABuffer>:
   for now just take 1 channel
*/
static void ExtractSamplesFromDMABuffer(uint8_t *dmaBuffer,
                                        int16_t *sampleBuffer,
                                        uint32_t num_samples)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < num_samples; ++i)
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e00f      	b.n	8000f6a <ExtractSamplesFromDMABuffer+0x32>
    {
        int16_t * samplePointer = (int16_t *) &dmaBuffer[i*8];
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	4413      	add	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        sampleBuffer[i] = *samplePointer;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f62:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < num_samples; ++i)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3301      	adds	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d3eb      	bcc.n	8000f4a <ExtractSamplesFromDMABuffer+0x12>
    }
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <CopySampleBuffer>:

static void CopySampleBuffer(int16_t *dst, int16_t *src,
                             uint32_t num_samples)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < num_samples; i++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	e011      	b.n	8000fb6 <CopySampleBuffer+0x36>
          the process_sample() function is defined in ece5210.c

          the default is for a straight passthrough, but you can 
          modify it to do some signal processing
        */
        dst[i] = process_sample(src[i]);
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	4413      	add	r3, r2
 8000f9a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	18d4      	adds	r4, r2, r3
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	f7ff fdbe 	bl	8000b28 <process_sample>
 8000fac:	4603      	mov	r3, r0
 8000fae:	8023      	strh	r3, [r4, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d3e9      	bcc.n	8000f92 <CopySampleBuffer+0x12>
    }
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd90      	pop	{r4, r7, pc}

08000fc8 <My_SAI_ClockConfig>:


///////////////////////////////////////////////////////////

static void My_SAI_ClockConfig(uint32_t AudioFreq)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b0a6      	sub	sp, #152	; 0x98
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

    HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f004 fd19 	bl	8005a0c <HAL_RCCEx_GetPeriphCLKConfig>

    /* Set the PLL configuration according to the audio frequency */
    if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d009      	beq.n	8000ff8 <My_SAI_ClockConfig+0x30>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f245 6222 	movw	r2, #22050	; 0x5622
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d004      	beq.n	8000ff8 <My_SAI_ClockConfig+0x30>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d112      	bne.n	800101e <My_SAI_ClockConfig+0x56>
    {
        /* Configure PLLSAI prescalers */
        /* PLLSAI_VCO: VCO_429M
           SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
           SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz */
        rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000ff8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ffc:	60bb      	str	r3, [r7, #8]
        rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8000ffe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001002:	647b      	str	r3, [r7, #68]	; 0x44
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001004:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001008:	60fb      	str	r3, [r7, #12]
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800100a:	2302      	movs	r3, #2
 800100c:	617b      	str	r3, [r7, #20]
        rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800100e:	2313      	movs	r3, #19
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c

        HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	4618      	mov	r0, r3
 8001018:	f003 fc38 	bl	800488c <HAL_RCCEx_PeriphCLKConfig>
 800101c:	e012      	b.n	8001044 <My_SAI_ClockConfig+0x7c>
    {
        /* SAI clock config
           PLLSAI_VCO: VCO_344M
           SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
           SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 49.142/1 = 49.142 Mhz */
        rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800101e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001022:	60bb      	str	r3, [r7, #8]
        rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8001024:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001028:	647b      	str	r3, [r7, #68]	; 0x44
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800102a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800102e:	60fb      	str	r3, [r7, #12]
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8001030:	2307      	movs	r3, #7
 8001032:	617b      	str	r3, [r7, #20]
        rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c

        HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4618      	mov	r0, r3
 800103e:	f003 fc25 	bl	800488c <HAL_RCCEx_PeriphCLKConfig>
    }
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	3798      	adds	r7, #152	; 0x98
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <My_AUDIO_OUT_MspInit>:

static void My_AUDIO_OUT_MspInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
    static DMA_HandleTypeDef hdma_sai_tx;
    GPIO_InitTypeDef  gpio_init_structure;

    /* Enable SAI clock */
    AUDIO_OUT_SAIx_CLK_ENABLE();
 8001052:	4b46      	ldr	r3, [pc, #280]	; (800116c <My_AUDIO_OUT_MspInit+0x120>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a45      	ldr	r2, [pc, #276]	; (800116c <My_AUDIO_OUT_MspInit+0x120>)
 8001058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b43      	ldr	r3, [pc, #268]	; (800116c <My_AUDIO_OUT_MspInit+0x120>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    /* Enable GPIO clock */
    AUDIO_OUT_SAIx_MCLK_ENABLE();
 800106a:	4b40      	ldr	r3, [pc, #256]	; (800116c <My_AUDIO_OUT_MspInit+0x120>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a3f      	ldr	r2, [pc, #252]	; (800116c <My_AUDIO_OUT_MspInit+0x120>)
 8001070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b3d      	ldr	r3, [pc, #244]	; (800116c <My_AUDIO_OUT_MspInit+0x120>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8001082:	4b3a      	ldr	r3, [pc, #232]	; (800116c <My_AUDIO_OUT_MspInit+0x120>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a39      	ldr	r2, [pc, #228]	; (800116c <My_AUDIO_OUT_MspInit+0x120>)
 8001088:	f043 0310 	orr.w	r3, r3, #16
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <My_AUDIO_OUT_MspInit+0x120>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 800109a:	2370      	movs	r3, #112	; 0x70
 800109c:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 80010aa:	2306      	movs	r3, #6
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	482e      	ldr	r0, [pc, #184]	; (8001170 <My_AUDIO_OUT_MspInit+0x124>)
 80010b6:	f002 f9c1 	bl	800343c <HAL_GPIO_Init>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	482b      	ldr	r0, [pc, #172]	; (8001174 <My_AUDIO_OUT_MspInit+0x128>)
 80010c6:	f002 f9b9 	bl	800343c <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <My_AUDIO_OUT_MspInit+0x120>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a27      	ldr	r2, [pc, #156]	; (800116c <My_AUDIO_OUT_MspInit+0x120>)
 80010d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <My_AUDIO_OUT_MspInit+0x120>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 80010ea:	2240      	movs	r2, #64	; 0x40
 80010ec:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 80010f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010fa:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 80010fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001102:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 8001106:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110a:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 800110e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001112:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 8001116:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800111a:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 800111e:	2204      	movs	r2, #4
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 8001124:	2203      	movs	r2, #3
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 800112a:	2200      	movs	r2, #0
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 8001130:	2200      	movs	r2, #0
 8001132:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 8001136:	4a11      	ldr	r2, [pc, #68]	; (800117c <My_AUDIO_OUT_MspInit+0x130>)
 8001138:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_out_sai, hdmatx, hdma_sai_tx);
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <My_AUDIO_OUT_MspInit+0x134>)
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 800113e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 8001142:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <My_AUDIO_OUT_MspInit+0x134>)
 8001144:	639a      	str	r2, [r3, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001146:	480c      	ldr	r0, [pc, #48]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 8001148:	f001 fe5e 	bl	8002e08 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
 800114c:	480a      	ldr	r0, [pc, #40]	; (8001178 <My_AUDIO_OUT_MspInit+0x12c>)
 800114e:	f001 fdad 	bl	8002cac <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	210e      	movs	r1, #14
 8001156:	2039      	movs	r0, #57	; 0x39
 8001158:	f001 fd47 	bl	8002bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 800115c:	2039      	movs	r0, #57	; 0x39
 800115e:	f001 fd60 	bl	8002c22 <HAL_NVIC_EnableIRQ>
}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40021000 	.word	0x40021000
 8001174:	40021800 	.word	0x40021800
 8001178:	2002ecd4 	.word	0x2002ecd4
 800117c:	40026428 	.word	0x40026428
 8001180:	2002ec4c 	.word	0x2002ec4c

08001184 <My_SAI_Out_Init>:

static void My_SAI_Out_Init(uint32_t AudioFreq)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&haudio_out_sai);
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <My_SAI_Out_Init+0xcc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <My_SAI_Out_Init+0xcc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800119a:	601a      	str	r2, [r3, #0]

    /* Configure SAI_Block_x
       LSBFirst: Disabled
       DataSize: 16 */
    haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800119c:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <My_SAI_Out_Init+0xcc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
    haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80011a2:	4a2b      	ldr	r2, [pc, #172]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	61d3      	str	r3, [r2, #28]
    haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
    haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80011ae:	4b28      	ldr	r3, [pc, #160]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
    haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	631a      	str	r2, [r3, #48]	; 0x30
    haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	635a      	str	r2, [r3, #52]	; 0x34
    haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011c0:	4b23      	ldr	r3, [pc, #140]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	639a      	str	r2, [r3, #56]	; 0x38
    haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80011c6:	4b22      	ldr	r3, [pc, #136]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
    haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80011cc:	4b20      	ldr	r3, [pc, #128]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
    haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d8:	611a      	str	r2, [r3, #16]
    haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011dc:	2201      	movs	r2, #1
 80011de:	619a      	str	r2, [r3, #24]
    haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
    haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
    haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
    haudio_out_sai.Init.Mckdiv         = 0;
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
       Frame Length: 64
       Frame active Length: 32
       FS Definition: Start frame + Channel Side identification
       FS Polarity: FS active Low
       FS Offset: FS asserted one bit before the first bit of slot 0 */
    haudio_out_sai.FrameInit.FrameLength = 64;
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <My_SAI_Out_Init+0xcc>)
 80011fa:	2240      	movs	r2, #64	; 0x40
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
    haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <My_SAI_Out_Init+0xcc>)
 8001200:	2220      	movs	r2, #32
 8001202:	645a      	str	r2, [r3, #68]	; 0x44
    haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <My_SAI_Out_Init+0xcc>)
 8001206:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800120a:	649a      	str	r2, [r3, #72]	; 0x48
    haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <My_SAI_Out_Init+0xcc>)
 800120e:	2200      	movs	r2, #0
 8001210:	64da      	str	r2, [r3, #76]	; 0x4c
    haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <My_SAI_Out_Init+0xcc>)
 8001214:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001218:	651a      	str	r2, [r3, #80]	; 0x50
    /* Configure SAI Block_x Slot
       Slot First Bit Offset: 0
       Slot Size  : 16
       Slot Number: 4
       Slot Active: All slot actives */
    haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <My_SAI_Out_Init+0xcc>)
 800121c:	2200      	movs	r2, #0
 800121e:	655a      	str	r2, [r3, #84]	; 0x54
    haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <My_SAI_Out_Init+0xcc>)
 8001222:	2200      	movs	r2, #0
 8001224:	659a      	str	r2, [r3, #88]	; 0x58
    haudio_out_sai.SlotInit.SlotNumber = 4;
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <My_SAI_Out_Init+0xcc>)
 8001228:	2204      	movs	r2, #4
 800122a:	65da      	str	r2, [r3, #92]	; 0x5c
    haudio_out_sai.SlotInit.SlotActive = 0xF;
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <My_SAI_Out_Init+0xcc>)
 800122e:	220f      	movs	r2, #15
 8001230:	661a      	str	r2, [r3, #96]	; 0x60

    HAL_SAI_Init(&haudio_out_sai);
 8001232:	4807      	ldr	r0, [pc, #28]	; (8001250 <My_SAI_Out_Init+0xcc>)
 8001234:	f004 fef0 	bl	8006018 <HAL_SAI_Init>

    /* Enable SAI peripheral to generate MCLK */
    __HAL_SAI_ENABLE(&haudio_out_sai);
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <My_SAI_Out_Init+0xcc>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <My_SAI_Out_Init+0xcc>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001246:	601a      	str	r2, [r3, #0]

}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2002ec4c 	.word	0x2002ec4c

08001254 <My_AUDIO_IN_MspInit>:

static void My_AUDIO_IN_MspInit(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
    static DMA_HandleTypeDef hdma_sai_rx;
    GPIO_InitTypeDef  gpio_init_structure;

    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 800125a:	4b3c      	ldr	r3, [pc, #240]	; (800134c <My_AUDIO_IN_MspInit+0xf8>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a3b      	ldr	r2, [pc, #236]	; (800134c <My_AUDIO_IN_MspInit+0xf8>)
 8001260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b39      	ldr	r3, [pc, #228]	; (800134c <My_AUDIO_IN_MspInit+0xf8>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 8001272:	4b36      	ldr	r3, [pc, #216]	; (800134c <My_AUDIO_IN_MspInit+0xf8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a35      	ldr	r2, [pc, #212]	; (800134c <My_AUDIO_IN_MspInit+0xf8>)
 8001278:	f043 0310 	orr.w	r3, r3, #16
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b33      	ldr	r3, [pc, #204]	; (800134c <My_AUDIO_IN_MspInit+0xf8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800128a:	2308      	movs	r3, #8
 800128c:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 800129a:	2306      	movs	r3, #6
 800129c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	4619      	mov	r1, r3
 80012a4:	482a      	ldr	r0, [pc, #168]	; (8001350 <My_AUDIO_IN_MspInit+0xfc>)
 80012a6:	f002 f8c9 	bl	800343c <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80012aa:	4b28      	ldr	r3, [pc, #160]	; (800134c <My_AUDIO_IN_MspInit+0xf8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a27      	ldr	r2, [pc, #156]	; (800134c <My_AUDIO_IN_MspInit+0xf8>)
 80012b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <My_AUDIO_IN_MspInit+0xf8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 80012c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012c8:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 80012d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012dc:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 80012e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e4:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 80012e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ec:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 80012f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f4:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 80012f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012fc:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 8001306:	2203      	movs	r2, #3
 8001308:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 800130c:	2200      	movs	r2, #0
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 8001312:	2200      	movs	r2, #0
 8001314:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 8001318:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <My_AUDIO_IN_MspInit+0x104>)
 800131a:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_in_sai, hdmarx, hdma_sai_rx);
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <My_AUDIO_IN_MspInit+0x108>)
 800131e:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 8001320:	671a      	str	r2, [r3, #112]	; 0x70
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <My_AUDIO_IN_MspInit+0x108>)
 8001326:	639a      	str	r2, [r3, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001328:	480a      	ldr	r0, [pc, #40]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 800132a:	f001 fd6d 	bl	8002e08 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 800132e:	4809      	ldr	r0, [pc, #36]	; (8001354 <My_AUDIO_IN_MspInit+0x100>)
 8001330:	f001 fcbc 	bl	8002cac <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	210f      	movs	r1, #15
 8001338:	203c      	movs	r0, #60	; 0x3c
 800133a:	f001 fc56 	bl	8002bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800133e:	203c      	movs	r0, #60	; 0x3c
 8001340:	f001 fc6f 	bl	8002c22 <HAL_NVIC_EnableIRQ>
}
 8001344:	bf00      	nop
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	40021000 	.word	0x40021000
 8001354:	2002ed34 	.word	0x2002ed34
 8001358:	40026470 	.word	0x40026470
 800135c:	2002ebc8 	.word	0x2002ebc8

08001360 <My_SAI_In_Init>:

static void My_SAI_In_Init(uint32_t AudioFreq)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
    /* Initialize SAI1 block B in SLAVE RX synchronous from SAI1 block A */
    /* Initialize the haudio_in_sai Instance parameter */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001368:	4b31      	ldr	r3, [pc, #196]	; (8001430 <My_SAI_In_Init+0xd0>)
 800136a:	4a32      	ldr	r2, [pc, #200]	; (8001434 <My_SAI_In_Init+0xd4>)
 800136c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&haudio_in_sai);
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <My_SAI_In_Init+0xd0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <My_SAI_In_Init+0xd0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800137c:	601a      	str	r2, [r3, #0]

    /* Configure SAI_Block_x */
    haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800137e:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <My_SAI_In_Init+0xd0>)
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
    haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8001384:	4a2a      	ldr	r2, [pc, #168]	; (8001430 <My_SAI_In_Init+0xd0>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	61d3      	str	r3, [r2, #28]
    haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <My_SAI_In_Init+0xd0>)
 800138c:	2203      	movs	r2, #3
 800138e:	605a      	str	r2, [r3, #4]
    haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <My_SAI_In_Init+0xd0>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
    haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <My_SAI_In_Init+0xd0>)
 8001398:	2200      	movs	r2, #0
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
    haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <My_SAI_In_Init+0xd0>)
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34
    haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	639a      	str	r2, [r3, #56]	; 0x38
    haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	63da      	str	r2, [r3, #60]	; 0x3c
    haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	609a      	str	r2, [r3, #8]
    haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
    haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013bc:	2201      	movs	r2, #1
 80013be:	619a      	str	r2, [r3, #24]
    haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
    haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80013c6:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
    haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013ce:	2210      	movs	r2, #16
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
    haudio_in_sai.Init.Mckdiv         = 0;
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]

    /* Configure SAI_Block_x Frame */
    haudio_in_sai.FrameInit.FrameLength       = 64;
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013da:	2240      	movs	r2, #64	; 0x40
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
    haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013e0:	2220      	movs	r2, #32
 80013e2:	645a      	str	r2, [r3, #68]	; 0x44
    haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ea:	649a      	str	r2, [r3, #72]	; 0x48
    haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	64da      	str	r2, [r3, #76]	; 0x4c
    haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Configure SAI Block_x Slot */
    haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <My_SAI_In_Init+0xd0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54
    haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <My_SAI_In_Init+0xd0>)
 8001402:	2200      	movs	r2, #0
 8001404:	659a      	str	r2, [r3, #88]	; 0x58
    haudio_in_sai.SlotInit.SlotNumber     = 4;
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <My_SAI_In_Init+0xd0>)
 8001408:	2204      	movs	r2, #4
 800140a:	65da      	str	r2, [r3, #92]	; 0x5c
    haudio_in_sai.SlotInit.SlotActive     = 0xF;
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <My_SAI_In_Init+0xd0>)
 800140e:	220f      	movs	r2, #15
 8001410:	661a      	str	r2, [r3, #96]	; 0x60

    HAL_SAI_Init(&haudio_in_sai);
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <My_SAI_In_Init+0xd0>)
 8001414:	f004 fe00 	bl	8006018 <HAL_SAI_Init>

    /* Enable SAI peripheral */
    __HAL_SAI_ENABLE(&haudio_in_sai);
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <My_SAI_In_Init+0xd0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <My_SAI_In_Init+0xd0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2002ebc8 	.word	0x2002ebc8
 8001434:	40015824 	.word	0x40015824

08001438 <BSP_AUDIO_IN_TransferComplete_CallBack>:

void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
    audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 800143e:	2202      	movs	r2, #2
 8001440:	601a      	str	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	2002ecd0 	.word	0x2002ecd0

08001450 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
    audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 8001456:	2201      	movs	r2, #1
 8001458:	601a      	str	r2, [r3, #0]
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	2002ecd0 	.word	0x2002ecd0

08001468 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32769i_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001470:	f7ff ffee 	bl	8001450 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001484:	f7ff ffd8 	bl	8001438 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <DMA2_Stream4_IRQHandler+0x14>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	4618      	mov	r0, r3
 800149a:	f001 fd61 	bl	8002f60 <HAL_DMA_IRQHandler>
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2002ebc8 	.word	0x2002ebc8

080014a8 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <DMA2_Stream1_IRQHandler+0x14>)
 80014ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 fd55 	bl	8002f60 <HAL_DMA_IRQHandler>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2002ec4c 	.word	0x2002ec4c

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f001 fb85 	bl	8002bd4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	f06f 000b 	mvn.w	r0, #11
 80014d2:	f001 fb8a 	bl	8002bea <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	f06f 000a 	mvn.w	r0, #10
 80014de:	f001 fb84 	bl	8002bea <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	f06f 0009 	mvn.w	r0, #9
 80014ea:	f001 fb7e 	bl	8002bea <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	f06f 0004 	mvn.w	r0, #4
 80014f6:	f001 fb78 	bl	8002bea <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	f06f 0003 	mvn.w	r0, #3
 8001502:	f001 fb72 	bl	8002bea <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	f06f 0001 	mvn.w	r0, #1
 800150e:	f001 fb6c 	bl	8002bea <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800151a:	f001 fb66 	bl	8002bea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}

08001522 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001526:	f001 fa57 	bl	80029d8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800152a:	f001 fbb1 	bl	8002c90 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <SystemInit+0x5c>)
 800153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153e:	4a14      	ldr	r2, [pc, #80]	; (8001590 <SystemInit+0x5c>)
 8001540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <SystemInit+0x60>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a11      	ldr	r2, [pc, #68]	; (8001594 <SystemInit+0x60>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <SystemInit+0x60>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <SystemInit+0x60>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	490d      	ldr	r1, [pc, #52]	; (8001594 <SystemInit+0x60>)
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <SystemInit+0x64>)
 8001562:	4013      	ands	r3, r2
 8001564:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <SystemInit+0x60>)
 8001568:	4a0c      	ldr	r2, [pc, #48]	; (800159c <SystemInit+0x68>)
 800156a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <SystemInit+0x60>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a08      	ldr	r2, [pc, #32]	; (8001594 <SystemInit+0x60>)
 8001572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001576:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <SystemInit+0x60>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SystemInit+0x5c>)
 8001580:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001584:	609a      	str	r2, [r3, #8]
#endif
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00
 8001594:	40023800 	.word	0x40023800
 8001598:	fef6ffff 	.word	0xfef6ffff
 800159c:	24003010 	.word	0x24003010

080015a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015a6:	490e      	ldr	r1, [pc, #56]	; (80015e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015bc:	4c0b      	ldr	r4, [pc, #44]	; (80015ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ca:	f7ff ffb3 	bl	8001534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ce:	f005 f903 	bl	80067d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d2:	f7ff faf1 	bl	8000bb8 <main>
  bx  lr    
 80015d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e0:	2000100c 	.word	0x2000100c
  ldr r2, =_sidata
 80015e4:	08006d10 	.word	0x08006d10
  ldr r2, =_sbss
 80015e8:	2000100c 	.word	0x2000100c
  ldr r4, =_ebss
 80015ec:	2002ef24 	.word	0x2002ef24

080015f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC_IRQHandler>
	...

080015f4 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	4603      	mov	r3, r0
 80015fe:	81fb      	strh	r3, [r7, #14]
 8001600:	460b      	mov	r3, r1
 8001602:	81bb      	strh	r3, [r7, #12]
 8001604:	4613      	mov	r3, r2
 8001606:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 800160c:	89bb      	ldrh	r3, [r7, #12]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001612:	89bb      	ldrh	r3, [r7, #12]
 8001614:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001618:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800161e:	f001 f973 	bl	8002908 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2203      	movs	r2, #3
 8001628:	f44f 7181 	mov.w	r1, #258	; 0x102
 800162c:	4618      	mov	r0, r3
 800162e:	f000 ffb7 	bl	80025a0 <CODEC_IO_Write>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	4413      	add	r3, r2
 800163a:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 800163c:	89fb      	ldrh	r3, [r7, #14]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2200      	movs	r2, #0
 8001642:	f640 0117 	movw	r1, #2071	; 0x817
 8001646:	4618      	mov	r0, r3
 8001648:	f000 ffaa 	bl	80025a0 <CODEC_IO_Write>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2200      	movs	r2, #0
 800165c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001660:	4618      	mov	r0, r3
 8001662:	f000 ff9d 	bl	80025a0 <CODEC_IO_Write>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	4413      	add	r3, r2
 800166e:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8001670:	89fb      	ldrh	r3, [r7, #14]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	226c      	movs	r2, #108	; 0x6c
 8001676:	2139      	movs	r1, #57	; 0x39
 8001678:	4618      	mov	r0, r3
 800167a:	f000 ff91 	bl	80025a0 <CODEC_IO_Write>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4413      	add	r3, r2
 8001686:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8001688:	8afb      	ldrh	r3, [r7, #22]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00c      	beq.n	80016a8 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800168e:	89fb      	ldrh	r3, [r7, #14]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2213      	movs	r2, #19
 8001694:	2101      	movs	r1, #1
 8001696:	4618      	mov	r0, r3
 8001698:	f000 ff82 	bl	80025a0 <CODEC_IO_Write>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	4413      	add	r3, r2
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	e00b      	b.n	80016c0 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80016a8:	89fb      	ldrh	r3, [r7, #14]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2203      	movs	r2, #3
 80016ae:	2101      	movs	r1, #1
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 ff75 	bl	80025a0 <CODEC_IO_Write>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 80016c0:	2032      	movs	r0, #50	; 0x32
 80016c2:	f001 f955 	bl	8002970 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80016c6:	8b3b      	ldrh	r3, [r7, #24]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 815f 	beq.w	800198c <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 80016ce:	4bae      	ldr	r3, [pc, #696]	; (8001988 <wm8994_Init+0x394>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
    switch (output_device)
 80016d4:	8b3b      	ldrh	r3, [r7, #24]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	f000 808c 	beq.w	80017f4 <wm8994_Init+0x200>
 80016dc:	2b03      	cmp	r3, #3
 80016de:	f300 8111 	bgt.w	8001904 <wm8994_Init+0x310>
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d002      	beq.n	80016ec <wm8994_Init+0xf8>
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d042      	beq.n	8001770 <wm8994_Init+0x17c>
 80016ea:	e10b      	b.n	8001904 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80016ec:	89fb      	ldrh	r3, [r7, #14]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f640 420c 	movw	r2, #3084	; 0xc0c
 80016f4:	2105      	movs	r1, #5
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 ff52 	bl	80025a0 <CODEC_IO_Write>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	4413      	add	r3, r2
 8001704:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8001706:	89fb      	ldrh	r3, [r7, #14]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2200      	movs	r2, #0
 800170c:	f240 6101 	movw	r1, #1537	; 0x601
 8001710:	4618      	mov	r0, r3
 8001712:	f000 ff45 	bl	80025a0 <CODEC_IO_Write>
 8001716:	4603      	mov	r3, r0
 8001718:	461a      	mov	r2, r3
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2200      	movs	r2, #0
 8001726:	f240 6102 	movw	r1, #1538	; 0x602
 800172a:	4618      	mov	r0, r3
 800172c:	f000 ff38 	bl	80025a0 <CODEC_IO_Write>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	4413      	add	r3, r2
 8001738:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2202      	movs	r2, #2
 8001740:	f240 6104 	movw	r1, #1540	; 0x604
 8001744:	4618      	mov	r0, r3
 8001746:	f000 ff2b 	bl	80025a0 <CODEC_IO_Write>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	4413      	add	r3, r2
 8001752:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8001754:	89fb      	ldrh	r3, [r7, #14]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2202      	movs	r2, #2
 800175a:	f240 6105 	movw	r1, #1541	; 0x605
 800175e:	4618      	mov	r0, r3
 8001760:	f000 ff1e 	bl	80025a0 <CODEC_IO_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	4413      	add	r3, r2
 800176c:	61fb      	str	r3, [r7, #28]
      break;
 800176e:	e110      	b.n	8001992 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001770:	89fb      	ldrh	r3, [r7, #14]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f240 3203 	movw	r2, #771	; 0x303
 8001778:	2105      	movs	r1, #5
 800177a:	4618      	mov	r0, r3
 800177c:	f000 ff10 	bl	80025a0 <CODEC_IO_Write>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	4413      	add	r3, r2
 8001788:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800178a:	89fb      	ldrh	r3, [r7, #14]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2201      	movs	r2, #1
 8001790:	f240 6101 	movw	r1, #1537	; 0x601
 8001794:	4618      	mov	r0, r3
 8001796:	f000 ff03 	bl	80025a0 <CODEC_IO_Write>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4413      	add	r3, r2
 80017a2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80017a4:	89fb      	ldrh	r3, [r7, #14]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2201      	movs	r2, #1
 80017aa:	f240 6102 	movw	r1, #1538	; 0x602
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fef6 	bl	80025a0 <CODEC_IO_Write>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	4413      	add	r3, r2
 80017bc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80017be:	89fb      	ldrh	r3, [r7, #14]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2200      	movs	r2, #0
 80017c4:	f240 6104 	movw	r1, #1540	; 0x604
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fee9 	bl	80025a0 <CODEC_IO_Write>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	4413      	add	r3, r2
 80017d6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80017d8:	89fb      	ldrh	r3, [r7, #14]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2200      	movs	r2, #0
 80017de:	f240 6105 	movw	r1, #1541	; 0x605
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fedc 	bl	80025a0 <CODEC_IO_Write>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	4413      	add	r3, r2
 80017f0:	61fb      	str	r3, [r7, #28]
      break;
 80017f2:	e0ce      	b.n	8001992 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80017f4:	8afb      	ldrh	r3, [r7, #22]
 80017f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017fa:	d141      	bne.n	8001880 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80017fc:	89fb      	ldrh	r3, [r7, #14]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001804:	2105      	movs	r1, #5
 8001806:	4618      	mov	r0, r3
 8001808:	f000 feca 	bl	80025a0 <CODEC_IO_Write>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	4413      	add	r3, r2
 8001814:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8001816:	89fb      	ldrh	r3, [r7, #14]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2203      	movs	r2, #3
 800181c:	f240 6101 	movw	r1, #1537	; 0x601
 8001820:	4618      	mov	r0, r3
 8001822:	f000 febd 	bl	80025a0 <CODEC_IO_Write>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	4413      	add	r3, r2
 800182e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8001830:	89fb      	ldrh	r3, [r7, #14]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2203      	movs	r2, #3
 8001836:	f240 6102 	movw	r1, #1538	; 0x602
 800183a:	4618      	mov	r0, r3
 800183c:	f000 feb0 	bl	80025a0 <CODEC_IO_Write>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	4413      	add	r3, r2
 8001848:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800184a:	89fb      	ldrh	r3, [r7, #14]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2203      	movs	r2, #3
 8001850:	f240 6104 	movw	r1, #1540	; 0x604
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fea3 	bl	80025a0 <CODEC_IO_Write>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8001864:	89fb      	ldrh	r3, [r7, #14]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2203      	movs	r2, #3
 800186a:	f240 6105 	movw	r1, #1541	; 0x605
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fe96 	bl	80025a0 <CODEC_IO_Write>
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4413      	add	r3, r2
 800187c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 800187e:	e088      	b.n	8001992 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001880:	89fb      	ldrh	r3, [r7, #14]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001888:	2105      	movs	r1, #5
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fe88 	bl	80025a0 <CODEC_IO_Write>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	4413      	add	r3, r2
 8001898:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800189a:	89fb      	ldrh	r3, [r7, #14]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2201      	movs	r2, #1
 80018a0:	f240 6101 	movw	r1, #1537	; 0x601
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fe7b 	bl	80025a0 <CODEC_IO_Write>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	4413      	add	r3, r2
 80018b2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80018b4:	89fb      	ldrh	r3, [r7, #14]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2201      	movs	r2, #1
 80018ba:	f240 6102 	movw	r1, #1538	; 0x602
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fe6e 	bl	80025a0 <CODEC_IO_Write>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	4413      	add	r3, r2
 80018cc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80018ce:	89fb      	ldrh	r3, [r7, #14]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2202      	movs	r2, #2
 80018d4:	f240 6104 	movw	r1, #1540	; 0x604
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fe61 	bl	80025a0 <CODEC_IO_Write>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80018e8:	89fb      	ldrh	r3, [r7, #14]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2202      	movs	r2, #2
 80018ee:	f240 6105 	movw	r1, #1541	; 0x605
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fe54 	bl	80025a0 <CODEC_IO_Write>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	4413      	add	r3, r2
 8001900:	61fb      	str	r3, [r7, #28]
      break;
 8001902:	e046      	b.n	8001992 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001904:	89fb      	ldrh	r3, [r7, #14]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	f240 3203 	movw	r2, #771	; 0x303
 800190c:	2105      	movs	r1, #5
 800190e:	4618      	mov	r0, r3
 8001910:	f000 fe46 	bl	80025a0 <CODEC_IO_Write>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	4413      	add	r3, r2
 800191c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800191e:	89fb      	ldrh	r3, [r7, #14]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2201      	movs	r2, #1
 8001924:	f240 6101 	movw	r1, #1537	; 0x601
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fe39 	bl	80025a0 <CODEC_IO_Write>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	4413      	add	r3, r2
 8001936:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001938:	89fb      	ldrh	r3, [r7, #14]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2201      	movs	r2, #1
 800193e:	f240 6102 	movw	r1, #1538	; 0x602
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fe2c 	bl	80025a0 <CODEC_IO_Write>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	4413      	add	r3, r2
 8001950:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001952:	89fb      	ldrh	r3, [r7, #14]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2200      	movs	r2, #0
 8001958:	f240 6104 	movw	r1, #1540	; 0x604
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fe1f 	bl	80025a0 <CODEC_IO_Write>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	4413      	add	r3, r2
 800196a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800196c:	89fb      	ldrh	r3, [r7, #14]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2200      	movs	r2, #0
 8001972:	f240 6105 	movw	r1, #1541	; 0x605
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fe12 	bl	80025a0 <CODEC_IO_Write>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	4413      	add	r3, r2
 8001984:	61fb      	str	r3, [r7, #28]
      break;
 8001986:	e004      	b.n	8001992 <wm8994_Init+0x39e>
 8001988:	2002ed94 	.word	0x2002ed94
    }
  }
  else
  {
    outputEnabled = 0;
 800198c:	4b99      	ldr	r3, [pc, #612]	; (8001bf4 <wm8994_Init+0x600>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8001992:	8afb      	ldrh	r3, [r7, #22]
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 81ab 	beq.w	8001cf0 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800199a:	4b97      	ldr	r3, [pc, #604]	; (8001bf8 <wm8994_Init+0x604>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80019a0:	8afb      	ldrh	r3, [r7, #22]
 80019a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019a6:	f000 8129 	beq.w	8001bfc <wm8994_Init+0x608>
 80019aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019ae:	f300 819b 	bgt.w	8001ce8 <wm8994_Init+0x6f4>
 80019b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019b6:	d05a      	beq.n	8001a6e <wm8994_Init+0x47a>
 80019b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019bc:	f300 8194 	bgt.w	8001ce8 <wm8994_Init+0x6f4>
 80019c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c4:	f000 80c6 	beq.w	8001b54 <wm8994_Init+0x560>
 80019c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019cc:	f040 818c 	bne.w	8001ce8 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80019d0:	89fb      	ldrh	r3, [r7, #14]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80019d8:	2104      	movs	r1, #4
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fde0 	bl	80025a0 <CODEC_IO_Write>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	4413      	add	r3, r2
 80019e8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80019ea:	89fb      	ldrh	r3, [r7, #14]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	22db      	movs	r2, #219	; 0xdb
 80019f0:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fdd3 	bl	80025a0 <CODEC_IO_Write>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	4413      	add	r3, r2
 8001a02:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8001a04:	89fb      	ldrh	r3, [r7, #14]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fdc6 	bl	80025a0 <CODEC_IO_Write>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8001a1e:	89fb      	ldrh	r3, [r7, #14]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2202      	movs	r2, #2
 8001a24:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 fdb9 	bl	80025a0 <CODEC_IO_Write>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	4413      	add	r3, r2
 8001a36:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8001a38:	89fb      	ldrh	r3, [r7, #14]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	f240 6109 	movw	r1, #1545	; 0x609
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fdac 	bl	80025a0 <CODEC_IO_Write>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	4413      	add	r3, r2
 8001a50:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8001a52:	89fb      	ldrh	r3, [r7, #14]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	220e      	movs	r2, #14
 8001a58:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fd9f 	bl	80025a0 <CODEC_IO_Write>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	4413      	add	r3, r2
 8001a6a:	61fb      	str	r3, [r7, #28]
      break;
 8001a6c:	e143      	b.n	8001cf6 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8001a6e:	89fb      	ldrh	r3, [r7, #14]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2211      	movs	r2, #17
 8001a74:	2128      	movs	r1, #40	; 0x28
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fd92 	bl	80025a0 <CODEC_IO_Write>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	4413      	add	r3, r2
 8001a84:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      //counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);

      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8001a86:	89fb      	ldrh	r3, [r7, #14]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	2129      	movs	r1, #41	; 0x29
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fd86 	bl	80025a0 <CODEC_IO_Write>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);

      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8001a9e:	89fb      	ldrh	r3, [r7, #14]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	212a      	movs	r1, #42	; 0x2a
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 fd7a 	bl	80025a0 <CODEC_IO_Write>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8001ab6:	89fb      	ldrh	r3, [r7, #14]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	f240 3203 	movw	r2, #771	; 0x303
 8001abe:	2104      	movs	r1, #4
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fd6d 	bl	80025a0 <CODEC_IO_Write>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001ad0:	89fb      	ldrh	r3, [r7, #14]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	22db      	movs	r2, #219	; 0xdb
 8001ad6:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 fd60 	bl	80025a0 <CODEC_IO_Write>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8001aea:	89fb      	ldrh	r3, [r7, #14]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f246 3250 	movw	r2, #25424	; 0x6350
 8001af2:	2102      	movs	r1, #2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 fd53 	bl	80025a0 <CODEC_IO_Write>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	4413      	add	r3, r2
 8001b02:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001b04:	89fb      	ldrh	r3, [r7, #14]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f240 6106 	movw	r1, #1542	; 0x606
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fd46 	bl	80025a0 <CODEC_IO_Write>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001b1e:	89fb      	ldrh	r3, [r7, #14]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2202      	movs	r2, #2
 8001b24:	f240 6107 	movw	r1, #1543	; 0x607
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 fd39 	bl	80025a0 <CODEC_IO_Write>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	4413      	add	r3, r2
 8001b36:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001b38:	89fb      	ldrh	r3, [r7, #14]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	220d      	movs	r2, #13
 8001b3e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 fd2c 	bl	80025a0 <CODEC_IO_Write>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	4413      	add	r3, r2
 8001b50:	61fb      	str	r3, [r7, #28]
      break;
 8001b52:	e0d0      	b.n	8001cf6 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8001b54:	89fb      	ldrh	r3, [r7, #14]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8001b5c:	2104      	movs	r1, #4
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fd1e 	bl	80025a0 <CODEC_IO_Write>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001b6e:	89fb      	ldrh	r3, [r7, #14]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	22db      	movs	r2, #219	; 0xdb
 8001b74:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fd11 	bl	80025a0 <CODEC_IO_Write>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	4413      	add	r3, r2
 8001b86:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8001b88:	89fb      	ldrh	r3, [r7, #14]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f246 3250 	movw	r2, #25424	; 0x6350
 8001b90:	2102      	movs	r1, #2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 fd04 	bl	80025a0 <CODEC_IO_Write>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001ba2:	89fb      	ldrh	r3, [r7, #14]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f240 6106 	movw	r1, #1542	; 0x606
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 fcf7 	bl	80025a0 <CODEC_IO_Write>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	4413      	add	r3, r2
 8001bba:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001bbc:	89fb      	ldrh	r3, [r7, #14]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	f240 6107 	movw	r1, #1543	; 0x607
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fcea 	bl	80025a0 <CODEC_IO_Write>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	220d      	movs	r2, #13
 8001bdc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 fcdd 	bl	80025a0 <CODEC_IO_Write>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	4413      	add	r3, r2
 8001bee:	61fb      	str	r3, [r7, #28]
      break; 
 8001bf0:	e081      	b.n	8001cf6 <wm8994_Init+0x702>
 8001bf2:	bf00      	nop
 8001bf4:	2002ed94 	.word	0x2002ed94
 8001bf8:	2002ed98 	.word	0x2002ed98
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8001bfc:	89fb      	ldrh	r3, [r7, #14]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f640 723c 	movw	r2, #3900	; 0xf3c
 8001c04:	2104      	movs	r1, #4
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fcca 	bl	80025a0 <CODEC_IO_Write>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	4413      	add	r3, r2
 8001c14:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8001c16:	89fb      	ldrh	r3, [r7, #14]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	22db      	movs	r2, #219	; 0xdb
 8001c1c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fcbd 	bl	80025a0 <CODEC_IO_Write>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	22db      	movs	r2, #219	; 0xdb
 8001c36:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 fcb0 	bl	80025a0 <CODEC_IO_Write>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	4413      	add	r3, r2
 8001c48:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8001c4a:	89fb      	ldrh	r3, [r7, #14]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8001c52:	2102      	movs	r1, #2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fca3 	bl	80025a0 <CODEC_IO_Write>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	4413      	add	r3, r2
 8001c62:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001c64:	89fb      	ldrh	r3, [r7, #14]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2202      	movs	r2, #2
 8001c6a:	f240 6106 	movw	r1, #1542	; 0x606
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fc96 	bl	80025a0 <CODEC_IO_Write>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001c7e:	89fb      	ldrh	r3, [r7, #14]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2202      	movs	r2, #2
 8001c84:	f240 6107 	movw	r1, #1543	; 0x607
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 fc89 	bl	80025a0 <CODEC_IO_Write>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	4413      	add	r3, r2
 8001c96:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8001c98:	89fb      	ldrh	r3, [r7, #14]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fc7c 	bl	80025a0 <CODEC_IO_Write>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	4413      	add	r3, r2
 8001cb0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8001cb2:	89fb      	ldrh	r3, [r7, #14]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f240 6109 	movw	r1, #1545	; 0x609
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 fc6f 	bl	80025a0 <CODEC_IO_Write>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	4413      	add	r3, r2
 8001cca:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001ccc:	89fb      	ldrh	r3, [r7, #14]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	220d      	movs	r2, #13
 8001cd2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fc62 	bl	80025a0 <CODEC_IO_Write>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	61fb      	str	r3, [r7, #28]
      break;    
 8001ce6:	e006      	b.n	8001cf6 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	3301      	adds	r3, #1
 8001cec:	61fb      	str	r3, [r7, #28]
      break;
 8001cee:	e002      	b.n	8001cf6 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8001cf0:	4bb1      	ldr	r3, [pc, #708]	; (8001fb8 <wm8994_Init+0x9c4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4ab0      	ldr	r2, [pc, #704]	; (8001fbc <wm8994_Init+0x9c8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d079      	beq.n	8001df2 <wm8994_Init+0x7fe>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4aae      	ldr	r2, [pc, #696]	; (8001fbc <wm8994_Init+0x9c8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	f200 80ad 	bhi.w	8001e62 <wm8994_Init+0x86e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d061      	beq.n	8001dd6 <wm8994_Init+0x7e2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	f200 80a2 	bhi.w	8001e62 <wm8994_Init+0x86e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001d24:	4293      	cmp	r3, r2
 8001d26:	f000 808e 	beq.w	8001e46 <wm8994_Init+0x852>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001d30:	4293      	cmp	r3, r2
 8001d32:	f200 8096 	bhi.w	8001e62 <wm8994_Init+0x86e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001d3c:	d03d      	beq.n	8001dba <wm8994_Init+0x7c6>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001d44:	f200 808d 	bhi.w	8001e62 <wm8994_Init+0x86e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f245 6222 	movw	r2, #22050	; 0x5622
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d06b      	beq.n	8001e2a <wm8994_Init+0x836>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f245 6222 	movw	r2, #22050	; 0x5622
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	f200 8082 	bhi.w	8001e62 <wm8994_Init+0x86e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001d64:	d01b      	beq.n	8001d9e <wm8994_Init+0x7aa>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001d6c:	d879      	bhi.n	8001e62 <wm8994_Init+0x86e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001d74:	d005      	beq.n	8001d82 <wm8994_Init+0x78e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d046      	beq.n	8001e0e <wm8994_Init+0x81a>
 8001d80:	e06f      	b.n	8001e62 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8001d82:	89fb      	ldrh	r3, [r7, #14]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2203      	movs	r2, #3
 8001d88:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fc07 	bl	80025a0 <CODEC_IO_Write>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	4413      	add	r3, r2
 8001d9a:	61fb      	str	r3, [r7, #28]
    break;
 8001d9c:	e06f      	b.n	8001e7e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8001d9e:	89fb      	ldrh	r3, [r7, #14]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2233      	movs	r2, #51	; 0x33
 8001da4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 fbf9 	bl	80025a0 <CODEC_IO_Write>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	4413      	add	r3, r2
 8001db6:	61fb      	str	r3, [r7, #28]
    break;
 8001db8:	e061      	b.n	8001e7e <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8001dba:	89fb      	ldrh	r3, [r7, #14]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2263      	movs	r2, #99	; 0x63
 8001dc0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fbeb 	bl	80025a0 <CODEC_IO_Write>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	461a      	mov	r2, r3
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	61fb      	str	r3, [r7, #28]
    break;
 8001dd4:	e053      	b.n	8001e7e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001dd6:	89fb      	ldrh	r3, [r7, #14]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2283      	movs	r2, #131	; 0x83
 8001ddc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fbdd 	bl	80025a0 <CODEC_IO_Write>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	4413      	add	r3, r2
 8001dee:	61fb      	str	r3, [r7, #28]
    break;
 8001df0:	e045      	b.n	8001e7e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8001df2:	89fb      	ldrh	r3, [r7, #14]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	22a3      	movs	r2, #163	; 0xa3
 8001df8:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fbcf 	bl	80025a0 <CODEC_IO_Write>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	4413      	add	r3, r2
 8001e0a:	61fb      	str	r3, [r7, #28]
    break;
 8001e0c:	e037      	b.n	8001e7e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8001e0e:	89fb      	ldrh	r3, [r7, #14]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2213      	movs	r2, #19
 8001e14:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fbc1 	bl	80025a0 <CODEC_IO_Write>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	4413      	add	r3, r2
 8001e26:	61fb      	str	r3, [r7, #28]
    break;
 8001e28:	e029      	b.n	8001e7e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8001e2a:	89fb      	ldrh	r3, [r7, #14]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2243      	movs	r2, #67	; 0x43
 8001e30:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fbb3 	bl	80025a0 <CODEC_IO_Write>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	4413      	add	r3, r2
 8001e42:	61fb      	str	r3, [r7, #28]
    break;
 8001e44:	e01b      	b.n	8001e7e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8001e46:	89fb      	ldrh	r3, [r7, #14]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2273      	movs	r2, #115	; 0x73
 8001e4c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fba5 	bl	80025a0 <CODEC_IO_Write>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	61fb      	str	r3, [r7, #28]
    break; 
 8001e60:	e00d      	b.n	8001e7e <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001e62:	89fb      	ldrh	r3, [r7, #14]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2283      	movs	r2, #131	; 0x83
 8001e68:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fb97 	bl	80025a0 <CODEC_IO_Write>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461a      	mov	r2, r3
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	4413      	add	r3, r2
 8001e7a:	61fb      	str	r3, [r7, #28]
    break; 
 8001e7c:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001e7e:	8afb      	ldrh	r3, [r7, #22]
 8001e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e84:	d10e      	bne.n	8001ea4 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8001e86:	89fb      	ldrh	r3, [r7, #14]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f244 0218 	movw	r2, #16408	; 0x4018
 8001e8e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fb84 	bl	80025a0 <CODEC_IO_Write>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	e00d      	b.n	8001ec0 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8001ea4:	89fb      	ldrh	r3, [r7, #14]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f244 0210 	movw	r2, #16400	; 0x4010
 8001eac:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 fb75 	bl	80025a0 <CODEC_IO_Write>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8001ec0:	89fb      	ldrh	r3, [r7, #14]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f240 3102 	movw	r1, #770	; 0x302
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fb68 	bl	80025a0 <CODEC_IO_Write>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8001eda:	89fb      	ldrh	r3, [r7, #14]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	220a      	movs	r2, #10
 8001ee0:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fb5b 	bl	80025a0 <CODEC_IO_Write>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8001ef4:	89fb      	ldrh	r3, [r7, #14]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fb4e 	bl	80025a0 <CODEC_IO_Write>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8001f0e:	8b3b      	ldrh	r3, [r7, #24]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 8123 	beq.w	800215c <wm8994_Init+0xb68>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8001f16:	89fb      	ldrh	r3, [r7, #14]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f1e:	2103      	movs	r1, #3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fb3d 	bl	80025a0 <CODEC_IO_Write>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8001f30:	89fb      	ldrh	r3, [r7, #14]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2200      	movs	r2, #0
 8001f36:	2122      	movs	r1, #34	; 0x22
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fb31 	bl	80025a0 <CODEC_IO_Write>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	4413      	add	r3, r2
 8001f46:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8001f48:	89fb      	ldrh	r3, [r7, #14]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2123      	movs	r1, #35	; 0x23
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fb25 	bl	80025a0 <CODEC_IO_Write>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8001f60:	89fb      	ldrh	r3, [r7, #14]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f68:	2136      	movs	r1, #54	; 0x36
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fb18 	bl	80025a0 <CODEC_IO_Write>
 8001f70:	4603      	mov	r3, r0
 8001f72:	461a      	mov	r2, r3
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	4413      	add	r3, r2
 8001f78:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8001f7a:	89fb      	ldrh	r3, [r7, #14]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f243 0203 	movw	r2, #12291	; 0x3003
 8001f82:	2101      	movs	r1, #1
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fb0b 	bl	80025a0 <CODEC_IO_Write>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	4413      	add	r3, r2
 8001f92:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001f94:	8afb      	ldrh	r3, [r7, #22]
 8001f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f9a:	d111      	bne.n	8001fc0 <wm8994_Init+0x9cc>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8001f9c:	89fb      	ldrh	r3, [r7, #14]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f240 2205 	movw	r2, #517	; 0x205
 8001fa4:	2151      	movs	r1, #81	; 0x51
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fafa 	bl	80025a0 <CODEC_IO_Write>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	e00f      	b.n	8001fd8 <wm8994_Init+0x9e4>
 8001fb8:	2002ed98 	.word	0x2002ed98
 8001fbc:	00017700 	.word	0x00017700
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8001fc0:	89fb      	ldrh	r3, [r7, #14]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2205      	movs	r2, #5
 8001fc6:	2151      	movs	r1, #81	; 0x51
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fae9 	bl	80025a0 <CODEC_IO_Write>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8001fd8:	8b7b      	ldrh	r3, [r7, #26]
 8001fda:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8001fde:	f043 0303 	orr.w	r3, r3, #3
 8001fe2:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001fe4:	89fb      	ldrh	r3, [r7, #14]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	8b7a      	ldrh	r2, [r7, #26]
 8001fea:	2101      	movs	r1, #1
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fad7 	bl	80025a0 <CODEC_IO_Write>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8001ffc:	89fb      	ldrh	r3, [r7, #14]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2222      	movs	r2, #34	; 0x22
 8002002:	2160      	movs	r1, #96	; 0x60
 8002004:	4618      	mov	r0, r3
 8002006:	f000 facb 	bl	80025a0 <CODEC_IO_Write>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	4413      	add	r3, r2
 8002012:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002014:	89fb      	ldrh	r3, [r7, #14]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f649 7225 	movw	r2, #40741	; 0x9f25
 800201c:	214c      	movs	r1, #76	; 0x4c
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fabe 	bl	80025a0 <CODEC_IO_Write>
 8002024:	4603      	mov	r3, r0
 8002026:	461a      	mov	r2, r3
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	4413      	add	r3, r2
 800202c:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 800202e:	200f      	movs	r0, #15
 8002030:	f000 fc9e 	bl	8002970 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002034:	89fb      	ldrh	r3, [r7, #14]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2201      	movs	r2, #1
 800203a:	212d      	movs	r1, #45	; 0x2d
 800203c:	4618      	mov	r0, r3
 800203e:	f000 faaf 	bl	80025a0 <CODEC_IO_Write>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	4413      	add	r3, r2
 800204a:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800204c:	89fb      	ldrh	r3, [r7, #14]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2201      	movs	r2, #1
 8002052:	212e      	movs	r1, #46	; 0x2e
 8002054:	4618      	mov	r0, r3
 8002056:	f000 faa3 	bl	80025a0 <CODEC_IO_Write>
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4413      	add	r3, r2
 8002062:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002064:	89fb      	ldrh	r3, [r7, #14]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f44f 724c 	mov.w	r2, #816	; 0x330
 800206c:	2103      	movs	r1, #3
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fa96 	bl	80025a0 <CODEC_IO_Write>
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	4413      	add	r3, r2
 800207c:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 800207e:	89fb      	ldrh	r3, [r7, #14]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2233      	movs	r2, #51	; 0x33
 8002084:	2154      	movs	r1, #84	; 0x54
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fa8a 	bl	80025a0 <CODEC_IO_Write>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	4413      	add	r3, r2
 8002094:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(250);
 8002096:	20fa      	movs	r0, #250	; 0xfa
 8002098:	f000 fc6a 	bl	8002970 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 800209c:	89fb      	ldrh	r3, [r7, #14]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	22ee      	movs	r2, #238	; 0xee
 80020a2:	2160      	movs	r1, #96	; 0x60
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 fa7b 	bl	80025a0 <CODEC_IO_Write>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461a      	mov	r2, r3
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	4413      	add	r3, r2
 80020b2:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80020b4:	89fb      	ldrh	r3, [r7, #14]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	22c0      	movs	r2, #192	; 0xc0
 80020ba:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fa6e 	bl	80025a0 <CODEC_IO_Write>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	4413      	add	r3, r2
 80020cc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80020ce:	89fb      	ldrh	r3, [r7, #14]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	22c0      	movs	r2, #192	; 0xc0
 80020d4:	f240 6111 	movw	r1, #1553	; 0x611
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fa61 	bl	80025a0 <CODEC_IO_Write>
 80020de:	4603      	mov	r3, r0
 80020e0:	461a      	mov	r2, r3
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	4413      	add	r3, r2
 80020e6:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2200      	movs	r2, #0
 80020ee:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fa54 	bl	80025a0 <CODEC_IO_Write>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	4413      	add	r3, r2
 8002100:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002102:	89fb      	ldrh	r3, [r7, #14]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	22c0      	movs	r2, #192	; 0xc0
 8002108:	f240 6112 	movw	r1, #1554	; 0x612
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fa47 	bl	80025a0 <CODEC_IO_Write>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	4413      	add	r3, r2
 800211a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 800211c:	89fb      	ldrh	r3, [r7, #14]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	22c0      	movs	r2, #192	; 0xc0
 8002122:	f240 6113 	movw	r1, #1555	; 0x613
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fa3a 	bl	80025a0 <CODEC_IO_Write>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	4413      	add	r3, r2
 8002134:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8002136:	89fb      	ldrh	r3, [r7, #14]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2200      	movs	r2, #0
 800213c:	f240 4122 	movw	r1, #1058	; 0x422
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fa2d 	bl	80025a0 <CODEC_IO_Write>
 8002146:	4603      	mov	r3, r0
 8002148:	461a      	mov	r2, r3
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	4413      	add	r3, r2
 800214e:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002150:	7afa      	ldrb	r2, [r7, #11]
 8002152:	89fb      	ldrh	r3, [r7, #14]
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f8b0 	bl	80022bc <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 800215c:	8afb      	ldrh	r3, [r7, #22]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80a6 	beq.w	80022b0 <wm8994_Init+0xcbc>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8002164:	8afb      	ldrh	r3, [r7, #22]
 8002166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800216a:	d003      	beq.n	8002174 <wm8994_Init+0xb80>
 800216c:	8afb      	ldrh	r3, [r7, #22]
 800216e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002172:	d12b      	bne.n	80021cc <wm8994_Init+0xbd8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002174:	8b7b      	ldrh	r3, [r7, #26]
 8002176:	f043 0313 	orr.w	r3, r3, #19
 800217a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800217c:	89fb      	ldrh	r3, [r7, #14]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	8b7a      	ldrh	r2, [r7, #26]
 8002182:	2101      	movs	r1, #1
 8002184:	4618      	mov	r0, r3
 8002186:	f000 fa0b 	bl	80025a0 <CODEC_IO_Write>
 800218a:	4603      	mov	r3, r0
 800218c:	461a      	mov	r2, r3
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	4413      	add	r3, r2
 8002192:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002194:	89fb      	ldrh	r3, [r7, #14]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2202      	movs	r2, #2
 800219a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f9fe 	bl	80025a0 <CODEC_IO_Write>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	4413      	add	r3, r2
 80021ac:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80021ae:	89fb      	ldrh	r3, [r7, #14]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021b6:	f240 4111 	movw	r1, #1041	; 0x411
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f9f0 	bl	80025a0 <CODEC_IO_Write>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461a      	mov	r2, r3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	4413      	add	r3, r2
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	e06b      	b.n	80022a4 <wm8994_Init+0xcb0>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80021cc:	8afb      	ldrh	r3, [r7, #22]
 80021ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021d2:	d139      	bne.n	8002248 <wm8994_Init+0xc54>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80021d4:	8b7b      	ldrh	r3, [r7, #26]
 80021d6:	f043 0313 	orr.w	r3, r3, #19
 80021da:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80021dc:	89fb      	ldrh	r3, [r7, #14]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	8b7a      	ldrh	r2, [r7, #26]
 80021e2:	2101      	movs	r1, #1
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 f9db 	bl	80025a0 <CODEC_IO_Write>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2202      	movs	r2, #2
 80021fa:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f9ce 	bl	80025a0 <CODEC_IO_Write>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	4413      	add	r3, r2
 800220c:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800220e:	89fb      	ldrh	r3, [r7, #14]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8002216:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f9c0 	bl	80025a0 <CODEC_IO_Write>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	4413      	add	r3, r2
 8002228:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800222a:	89fb      	ldrh	r3, [r7, #14]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8002232:	f240 4111 	movw	r1, #1041	; 0x411
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f9b2 	bl	80025a0 <CODEC_IO_Write>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	4413      	add	r3, r2
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e02d      	b.n	80022a4 <wm8994_Init+0xcb0>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8002248:	8afb      	ldrh	r3, [r7, #22]
 800224a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800224e:	d003      	beq.n	8002258 <wm8994_Init+0xc64>
 8002250:	8afb      	ldrh	r3, [r7, #22]
 8002252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002256:	d125      	bne.n	80022a4 <wm8994_Init+0xcb0>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8002258:	89fb      	ldrh	r3, [r7, #14]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	220b      	movs	r2, #11
 800225e:	2118      	movs	r1, #24
 8002260:	4618      	mov	r0, r3
 8002262:	f000 f99d 	bl	80025a0 <CODEC_IO_Write>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	4413      	add	r3, r2
 800226e:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8002270:	89fb      	ldrh	r3, [r7, #14]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	220b      	movs	r2, #11
 8002276:	211a      	movs	r1, #26
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f991 	bl	80025a0 <CODEC_IO_Write>
 800227e:	4603      	mov	r3, r0
 8002280:	461a      	mov	r2, r3
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	4413      	add	r3, r2
 8002286:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002288:	89fb      	ldrh	r3, [r7, #14]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8002290:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f983 	bl	80025a0 <CODEC_IO_Write>
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	4413      	add	r3, r2
 80022a2:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80022a4:	7afa      	ldrb	r2, [r7, #11]
 80022a6:	89fb      	ldrh	r3, [r7, #14]
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f806 	bl	80022bc <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 80022b0:	69fb      	ldr	r3, [r7, #28]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop

080022bc <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	460a      	mov	r2, r1
 80022c6:	80fb      	strh	r3, [r7, #6]
 80022c8:	4613      	mov	r3, r2
 80022ca:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80022d0:	797b      	ldrb	r3, [r7, #5]
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d80b      	bhi.n	80022ee <wm8994_SetVolume+0x32>
 80022d6:	797a      	ldrb	r2, [r7, #5]
 80022d8:	4613      	mov	r3, r2
 80022da:	019b      	lsls	r3, r3, #6
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	4a86      	ldr	r2, [pc, #536]	; (80024f8 <wm8994_SetVolume+0x23c>)
 80022e0:	fb82 1203 	smull	r1, r2, r2, r3
 80022e4:	1152      	asrs	r2, r2, #5
 80022e6:	17db      	asrs	r3, r3, #31
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	e000      	b.n	80022f0 <wm8994_SetVolume+0x34>
 80022ee:	2364      	movs	r3, #100	; 0x64
 80022f0:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 80022f2:	4b82      	ldr	r3, [pc, #520]	; (80024fc <wm8994_SetVolume+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 809b 	beq.w	8002432 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80022fc:	7afb      	ldrb	r3, [r7, #11]
 80022fe:	2b3e      	cmp	r3, #62	; 0x3e
 8002300:	d93d      	bls.n	800237e <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f8fc 	bl	8002504 <wm8994_SetMute>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4413      	add	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f240 127f 	movw	r2, #383	; 0x17f
 800231c:	211c      	movs	r1, #28
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f93e 	bl	80025a0 <CODEC_IO_Write>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f240 127f 	movw	r2, #383	; 0x17f
 8002336:	211d      	movs	r1, #29
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f931 	bl	80025a0 <CODEC_IO_Write>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f240 127f 	movw	r2, #383	; 0x17f
 8002350:	2126      	movs	r1, #38	; 0x26
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f924 	bl	80025a0 <CODEC_IO_Write>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f240 127f 	movw	r2, #383	; 0x17f
 800236a:	2127      	movs	r1, #39	; 0x27
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f917 	bl	80025a0 <CODEC_IO_Write>
 8002372:	4603      	mov	r3, r0
 8002374:	461a      	mov	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4413      	add	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	e059      	b.n	8002432 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 800237e:	797b      	ldrb	r3, [r7, #5]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	2101      	movs	r1, #1
 8002388:	4618      	mov	r0, r3
 800238a:	f000 f8bb 	bl	8002504 <wm8994_SetMute>
 800238e:	4602      	mov	r2, r0
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	e04c      	b.n	8002432 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f8b1 	bl	8002504 <wm8994_SetMute>
 80023a2:	4602      	mov	r2, r0
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	b2d8      	uxtb	r0, r3
 80023ae:	7afb      	ldrb	r3, [r7, #11]
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	211c      	movs	r1, #28
 80023be:	f000 f8ef 	bl	80025a0 <CODEC_IO_Write>
 80023c2:	4603      	mov	r3, r0
 80023c4:	461a      	mov	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4413      	add	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	b2d8      	uxtb	r0, r3
 80023d0:	7afb      	ldrb	r3, [r7, #11]
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80023d8:	b21b      	sxth	r3, r3
 80023da:	b29b      	uxth	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	211d      	movs	r1, #29
 80023e0:	f000 f8de 	bl	80025a0 <CODEC_IO_Write>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	b2d8      	uxtb	r0, r3
 80023f2:	7afb      	ldrb	r3, [r7, #11]
 80023f4:	b21b      	sxth	r3, r3
 80023f6:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	461a      	mov	r2, r3
 8002400:	2126      	movs	r1, #38	; 0x26
 8002402:	f000 f8cd 	bl	80025a0 <CODEC_IO_Write>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4413      	add	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	b2d8      	uxtb	r0, r3
 8002414:	7afb      	ldrb	r3, [r7, #11]
 8002416:	b21b      	sxth	r3, r3
 8002418:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800241c:	b21b      	sxth	r3, r3
 800241e:	b29b      	uxth	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	2127      	movs	r1, #39	; 0x27
 8002424:	f000 f8bc 	bl	80025a0 <CODEC_IO_Write>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8002432:	4b33      	ldr	r3, [pc, #204]	; (8002500 <wm8994_SetVolume+0x244>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d059      	beq.n	80024ee <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800243a:	797b      	ldrb	r3, [r7, #5]
 800243c:	2b63      	cmp	r3, #99	; 0x63
 800243e:	d80c      	bhi.n	800245a <wm8994_SetVolume+0x19e>
 8002440:	797a      	ldrb	r2, [r7, #5]
 8002442:	4613      	mov	r3, r2
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <wm8994_SetVolume+0x23c>)
 800244c:	fb82 1203 	smull	r1, r2, r2, r3
 8002450:	1152      	asrs	r2, r2, #5
 8002452:	17db      	asrs	r3, r3, #31
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	e000      	b.n	800245c <wm8994_SetVolume+0x1a0>
 800245a:	23ef      	movs	r3, #239	; 0xef
 800245c:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	b2d8      	uxtb	r0, r3
 8002462:	7afb      	ldrb	r3, [r7, #11]
 8002464:	b21b      	sxth	r3, r3
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	b21b      	sxth	r3, r3
 800246c:	b29b      	uxth	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002474:	f000 f894 	bl	80025a0 <CODEC_IO_Write>
 8002478:	4603      	mov	r3, r0
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	b2d8      	uxtb	r0, r3
 8002486:	7afb      	ldrb	r3, [r7, #11]
 8002488:	b21b      	sxth	r3, r3
 800248a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248e:	b21b      	sxth	r3, r3
 8002490:	b29b      	uxth	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	f240 4101 	movw	r1, #1025	; 0x401
 8002498:	f000 f882 	bl	80025a0 <CODEC_IO_Write>
 800249c:	4603      	mov	r3, r0
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	b2d8      	uxtb	r0, r3
 80024aa:	7afb      	ldrb	r3, [r7, #11]
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	b21b      	sxth	r3, r3
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	f240 4104 	movw	r1, #1028	; 0x404
 80024bc:	f000 f870 	bl	80025a0 <CODEC_IO_Write>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	b2d8      	uxtb	r0, r3
 80024ce:	7afb      	ldrb	r3, [r7, #11]
 80024d0:	b21b      	sxth	r3, r3
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	b29b      	uxth	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	f240 4105 	movw	r1, #1029	; 0x405
 80024e0:	f000 f85e 	bl	80025a0 <CODEC_IO_Write>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4413      	add	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80024ee:	68fb      	ldr	r3, [r7, #12]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	51eb851f 	.word	0x51eb851f
 80024fc:	2002ed94 	.word	0x2002ed94
 8002500:	2002ed98 	.word	0x2002ed98

08002504 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8002514:	4b21      	ldr	r3, [pc, #132]	; (800259c <wm8994_SetMute+0x98>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d039      	beq.n	8002590 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d11c      	bne.n	800255c <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800252a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f836 	bl	80025a0 <CODEC_IO_Write>
 8002534:	4603      	mov	r3, r0
 8002536:	461a      	mov	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002546:	f240 4122 	movw	r1, #1058	; 0x422
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f828 	bl	80025a0 <CODEC_IO_Write>
 8002550:	4603      	mov	r3, r0
 8002552:	461a      	mov	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e019      	b.n	8002590 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2200      	movs	r2, #0
 8002562:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f81a 	bl	80025a0 <CODEC_IO_Write>
 800256c:	4603      	mov	r3, r0
 800256e:	461a      	mov	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4413      	add	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2200      	movs	r2, #0
 800257c:	f240 4122 	movw	r1, #1058	; 0x422
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f80d 	bl	80025a0 <CODEC_IO_Write>
 8002586:	4603      	mov	r3, r0
 8002588:	461a      	mov	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8002590:	68fb      	ldr	r3, [r7, #12]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	2002ed94 	.word	0x2002ed94

080025a0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
 80025aa:	460b      	mov	r3, r1
 80025ac:	80bb      	strh	r3, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	88b9      	ldrh	r1, [r7, #4]
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 f9ad 	bl	800291c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	b2db      	uxtb	r3, r3
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <BSP_LED_Init+0x54>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a11      	ldr	r2, [pc, #68]	; (8002624 <BSP_LED_Init+0x54>)
 80025e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <BSP_LED_Init+0x54>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <BSP_LED_Init+0x58>)
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8002600:	2301      	movs	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002604:	2303      	movs	r3, #3
 8002606:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	4a08      	ldr	r2, [pc, #32]	; (800262c <BSP_LED_Init+0x5c>)
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	f107 020c 	add.w	r2, r7, #12
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f000 ff10 	bl	800343c <HAL_GPIO_Init>

}
 800261c:	bf00      	nop
 800261e:	3720      	adds	r7, #32
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40023800 	.word	0x40023800
 8002628:	20000fac 	.word	0x20000fac
 800262c:	20000fb4 	.word	0x20000fb4

08002630 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	4a07      	ldr	r2, [pc, #28]	; (800265c <BSP_LED_On+0x2c>)
 800263e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	4a06      	ldr	r2, [pc, #24]	; (8002660 <BSP_LED_On+0x30>)
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	b29b      	uxth	r3, r3
 800264c:	2201      	movs	r2, #1
 800264e:	4619      	mov	r1, r3
 8002650:	f001 f8a0 	bl	8003794 <HAL_GPIO_WritePin>
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000fb4 	.word	0x20000fb4
 8002660:	20000fac 	.word	0x20000fac

08002664 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	4a07      	ldr	r2, [pc, #28]	; (8002690 <BSP_LED_Off+0x2c>)
 8002672:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	4a06      	ldr	r2, [pc, #24]	; (8002694 <BSP_LED_Off+0x30>)
 800267a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267e:	b29b      	uxth	r3, r3
 8002680:	2200      	movs	r2, #0
 8002682:	4619      	mov	r1, r3
 8002684:	f001 f886 	bl	8003794 <HAL_GPIO_WritePin>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000fb4 	.word	0x20000fb4
 8002694:	20000fac 	.word	0x20000fac

08002698 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	; 0x30
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a58      	ldr	r2, [pc, #352]	; (8002804 <I2Cx_MspInit+0x16c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d15b      	bne.n	8002760 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 80026a8:	4b57      	ldr	r3, [pc, #348]	; (8002808 <I2Cx_MspInit+0x170>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	4a56      	ldr	r2, [pc, #344]	; (8002808 <I2Cx_MspInit+0x170>)
 80026ae:	f043 0308 	orr.w	r3, r3, #8
 80026b2:	6313      	str	r3, [r2, #48]	; 0x30
 80026b4:	4b54      	ldr	r3, [pc, #336]	; (8002808 <I2Cx_MspInit+0x170>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 80026c0:	4b51      	ldr	r3, [pc, #324]	; (8002808 <I2Cx_MspInit+0x170>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	4a50      	ldr	r2, [pc, #320]	; (8002808 <I2Cx_MspInit+0x170>)
 80026c6:	f043 0302 	orr.w	r3, r3, #2
 80026ca:	6313      	str	r3, [r2, #48]	; 0x30
 80026cc:	4b4e      	ldr	r3, [pc, #312]	; (8002808 <I2Cx_MspInit+0x170>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80026d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026dc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80026de:	2312      	movs	r3, #18
 80026e0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80026e6:	2302      	movs	r3, #2
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 80026ea:	2304      	movs	r3, #4
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	4619      	mov	r1, r3
 80026f4:	4845      	ldr	r0, [pc, #276]	; (800280c <I2Cx_MspInit+0x174>)
 80026f6:	f000 fea1 	bl	800343c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 80026fe:	230b      	movs	r3, #11
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8002702:	f107 031c 	add.w	r3, r7, #28
 8002706:	4619      	mov	r1, r3
 8002708:	4841      	ldr	r0, [pc, #260]	; (8002810 <I2Cx_MspInit+0x178>)
 800270a:	f000 fe97 	bl	800343c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800270e:	4b3e      	ldr	r3, [pc, #248]	; (8002808 <I2Cx_MspInit+0x170>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a3d      	ldr	r2, [pc, #244]	; (8002808 <I2Cx_MspInit+0x170>)
 8002714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <I2Cx_MspInit+0x170>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002726:	4b38      	ldr	r3, [pc, #224]	; (8002808 <I2Cx_MspInit+0x170>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a37      	ldr	r2, [pc, #220]	; (8002808 <I2Cx_MspInit+0x170>)
 800272c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002730:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002732:	4b35      	ldr	r3, [pc, #212]	; (8002808 <I2Cx_MspInit+0x170>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	4a34      	ldr	r2, [pc, #208]	; (8002808 <I2Cx_MspInit+0x170>)
 8002738:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800273c:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	210f      	movs	r1, #15
 8002742:	205f      	movs	r0, #95	; 0x5f
 8002744:	f000 fa51 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002748:	205f      	movs	r0, #95	; 0x5f
 800274a:	f000 fa6a 	bl	8002c22 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	210f      	movs	r1, #15
 8002752:	2060      	movs	r0, #96	; 0x60
 8002754:	f000 fa49 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8002758:	2060      	movs	r0, #96	; 0x60
 800275a:	f000 fa62 	bl	8002c22 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800275e:	e04d      	b.n	80027fc <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002760:	4b29      	ldr	r3, [pc, #164]	; (8002808 <I2Cx_MspInit+0x170>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	4a28      	ldr	r2, [pc, #160]	; (8002808 <I2Cx_MspInit+0x170>)
 8002766:	f043 0302 	orr.w	r3, r3, #2
 800276a:	6313      	str	r3, [r2, #48]	; 0x30
 800276c:	4b26      	ldr	r3, [pc, #152]	; (8002808 <I2Cx_MspInit+0x170>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800277e:	2312      	movs	r3, #18
 8002780:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002786:	2302      	movs	r3, #2
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800278a:	2304      	movs	r3, #4
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800278e:	f107 031c 	add.w	r3, r7, #28
 8002792:	4619      	mov	r1, r3
 8002794:	481e      	ldr	r0, [pc, #120]	; (8002810 <I2Cx_MspInit+0x178>)
 8002796:	f000 fe51 	bl	800343c <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800279a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800279e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	4619      	mov	r1, r3
 80027a6:	481a      	ldr	r0, [pc, #104]	; (8002810 <I2Cx_MspInit+0x178>)
 80027a8:	f000 fe48 	bl	800343c <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80027ac:	4b16      	ldr	r3, [pc, #88]	; (8002808 <I2Cx_MspInit+0x170>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	4a15      	ldr	r2, [pc, #84]	; (8002808 <I2Cx_MspInit+0x170>)
 80027b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027b6:	6413      	str	r3, [r2, #64]	; 0x40
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <I2Cx_MspInit+0x170>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <I2Cx_MspInit+0x170>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <I2Cx_MspInit+0x170>)
 80027ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ce:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80027d0:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <I2Cx_MspInit+0x170>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <I2Cx_MspInit+0x170>)
 80027d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027da:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80027dc:	2200      	movs	r2, #0
 80027de:	210f      	movs	r1, #15
 80027e0:	201f      	movs	r0, #31
 80027e2:	f000 fa02 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80027e6:	201f      	movs	r0, #31
 80027e8:	f000 fa1b 	bl	8002c22 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	210f      	movs	r1, #15
 80027f0:	2020      	movs	r0, #32
 80027f2:	f000 f9fa 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80027f6:	2020      	movs	r0, #32
 80027f8:	f000 fa13 	bl	8002c22 <HAL_NVIC_EnableIRQ>
}
 80027fc:	bf00      	nop
 80027fe:	3730      	adds	r7, #48	; 0x30
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	2002ed9c 	.word	0x2002ed9c
 8002808:	40023800 	.word	0x40023800
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40020400 	.word	0x40020400

08002814 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f001 f9cd 	bl	8003bbc <HAL_I2C_GetState>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d125      	bne.n	8002874 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a14      	ldr	r2, [pc, #80]	; (800287c <I2Cx_Init+0x68>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d103      	bne.n	8002838 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a13      	ldr	r2, [pc, #76]	; (8002880 <I2Cx_Init+0x6c>)
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e002      	b.n	800283e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <I2Cx_Init+0x70>)
 800283c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a11      	ldr	r2, [pc, #68]	; (8002888 <I2Cx_Init+0x74>)
 8002842:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff15 	bl	8002698 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 ffaa 	bl	80037c8 <HAL_I2C_Init>
  }
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	2002ed9c 	.word	0x2002ed9c
 8002880:	40006000 	.word	0x40006000
 8002884:	40005400 	.word	0x40005400
 8002888:	40912732 	.word	0x40912732

0800288c <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af04      	add	r7, sp, #16
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	4608      	mov	r0, r1
 8002896:	4611      	mov	r1, r2
 8002898:	461a      	mov	r2, r3
 800289a:	4603      	mov	r3, r0
 800289c:	72fb      	strb	r3, [r7, #11]
 800289e:	460b      	mov	r3, r1
 80028a0:	813b      	strh	r3, [r7, #8]
 80028a2:	4613      	mov	r3, r2
 80028a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	b299      	uxth	r1, r3
 80028ae:	88f8      	ldrh	r0, [r7, #6]
 80028b0:	893a      	ldrh	r2, [r7, #8]
 80028b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b6:	9302      	str	r3, [sp, #8]
 80028b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028ba:	9301      	str	r3, [sp, #4]
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	4603      	mov	r3, r0
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f001 f854 	bl	8003970 <HAL_I2C_Mem_Write>
 80028c8:	4603      	mov	r3, r0
 80028ca:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d004      	beq.n	80028dc <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80028d2:	7afb      	ldrb	r3, [r7, #11]
 80028d4:	4619      	mov	r1, r3
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f805 	bl	80028e6 <I2Cx_Error>
  }
  return status;
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fff8 	bl	80038e8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ff8b 	bl	8002814 <I2Cx_Init>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <AUDIO_IO_Init+0x10>)
 800290e:	f7ff ff81 	bl	8002814 <I2Cx_Init>
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	2002ed9c 	.word	0x2002ed9c

0800291c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af02      	add	r7, sp, #8
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
 8002926:	460b      	mov	r3, r1
 8002928:	80bb      	strh	r3, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8002932:	89fb      	ldrh	r3, [r7, #14]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	b29b      	uxth	r3, r3
 8002938:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800293a:	89fb      	ldrh	r3, [r7, #14]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	b29b      	uxth	r3, r3
 8002940:	b21a      	sxth	r2, r3
 8002942:	887b      	ldrh	r3, [r7, #2]
 8002944:	b21b      	sxth	r3, r3
 8002946:	4313      	orrs	r3, r2
 8002948:	b21b      	sxth	r3, r3
 800294a:	b29b      	uxth	r3, r3
 800294c:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800294e:	88ba      	ldrh	r2, [r7, #4]
 8002950:	79f9      	ldrb	r1, [r7, #7]
 8002952:	2302      	movs	r3, #2
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	1cbb      	adds	r3, r7, #2
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2302      	movs	r3, #2
 800295c:	4803      	ldr	r0, [pc, #12]	; (800296c <AUDIO_IO_Write+0x50>)
 800295e:	f7ff ff95 	bl	800288c <I2Cx_WriteMultiple>
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	2002ed9c 	.word	0x2002ed9c

08002970 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f847 	bl	8002a0c <HAL_Delay>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	af00      	add	r7, sp, #0
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298a:	2003      	movs	r0, #3
 800298c:	f000 f922 	bl	8002bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002990:	2000      	movs	r0, #0
 8002992:	f000 f805 	bl	80029a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002996:	f7fe fd93 	bl	80014c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_InitTick+0x30>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a09      	ldr	r2, [pc, #36]	; (80029d4 <HAL_InitTick+0x34>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	099b      	lsrs	r3, r3, #6
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f942 	bl	8002c3e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029c2:	f000 f912 	bl	8002bea <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000fa8 	.word	0x20000fa8
 80029d4:	10624dd3 	.word	0x10624dd3

080029d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  uwTick++;
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <HAL_IncTick+0x18>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3301      	adds	r3, #1
 80029e2:	4a03      	ldr	r2, [pc, #12]	; (80029f0 <HAL_IncTick+0x18>)
 80029e4:	6013      	str	r3, [r2, #0]
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	2002ede8 	.word	0x2002ede8

080029f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return uwTick;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_GetTick+0x14>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	2002ede8 	.word	0x2002ede8

08002a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8002a18:	f7ff ffec 	bl	80029f4 <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8002a1e:	bf00      	nop
 8002a20:	f7ff ffe8 	bl	80029f4 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad2      	subs	r2, r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d3f7      	bcc.n	8002a20 <HAL_Delay+0x14>
  {
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <NVIC_SetPriorityGrouping+0x40>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <NVIC_SetPriorityGrouping+0x44>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6a:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <NVIC_SetPriorityGrouping+0x40>)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	60d3      	str	r3, [r2, #12]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000ed00 	.word	0xe000ed00
 8002a80:	05fa0000 	.word	0x05fa0000

08002a84 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	f003 021f 	and.w	r2, r3, #31
 8002ab0:	4907      	ldr	r1, [pc, #28]	; (8002ad0 <NVIC_EnableIRQ+0x30>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2001      	movs	r0, #1
 8002aba:	fa00 f202 	lsl.w	r2, r0, r2
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000e100 	.word	0xe000e100

08002ad4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	6039      	str	r1, [r7, #0]
 8002ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	da0b      	bge.n	8002b00 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	490c      	ldr	r1, [pc, #48]	; (8002b20 <NVIC_SetPriority+0x4c>)
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	3b04      	subs	r3, #4
 8002af6:	0112      	lsls	r2, r2, #4
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	440b      	add	r3, r1
 8002afc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002afe:	e009      	b.n	8002b14 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	4907      	ldr	r1, [pc, #28]	; (8002b24 <NVIC_SetPriority+0x50>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00
 8002b24:	e000e100 	.word	0xe000e100

08002b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	; 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f1c3 0307 	rsb	r3, r3, #7
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	bf28      	it	cs
 8002b46:	2304      	movcs	r3, #4
 8002b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d902      	bls.n	8002b58 <NVIC_EncodePriority+0x30>
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3b03      	subs	r3, #3
 8002b56:	e000      	b.n	8002b5a <NVIC_EncodePriority+0x32>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	4313      	orrs	r3, r2
         );
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba0:	d301      	bcc.n	8002ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00f      	b.n	8002bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <SysTick_Config+0x40>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bae:	210f      	movs	r1, #15
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bb4:	f7ff ff8e 	bl	8002ad4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <SysTick_Config+0x40>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bbe:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <SysTick_Config+0x40>)
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	e000e010 	.word	0xe000e010

08002bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ff2d 	bl	8002a3c <NVIC_SetPriorityGrouping>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bfc:	f7ff ff42 	bl	8002a84 <NVIC_GetPriorityGrouping>
 8002c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f7ff ff8e 	bl	8002b28 <NVIC_EncodePriority>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff5d 	bl	8002ad4 <NVIC_SetPriority>
}
 8002c1a:	bf00      	nop
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff35 	bl	8002aa0 <NVIC_EnableIRQ>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ffa2 	bl	8002b90 <SysTick_Config>
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d106      	bne.n	8002c74 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002c72:	e005      	b.n	8002c80 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002c7a:	f023 0304 	bic.w	r3, r3, #4
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000e010 	.word	0xe000e010

08002c90 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002c94:	f000 f802 	bl	8002c9c <HAL_SYSTICK_Callback>
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cb8:	f7ff fe9c 	bl	80029f4 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e099      	b.n	8002dfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ce8:	e00f      	b.n	8002d0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cea:	f7ff fe83 	bl	80029f4 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b05      	cmp	r3, #5
 8002cf6:	d908      	bls.n	8002d0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2203      	movs	r2, #3
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e078      	b.n	8002dfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e8      	bne.n	8002cea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <HAL_DMA_Init+0x158>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d107      	bne.n	8002d74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f023 0307 	bic.w	r3, r3, #7
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d117      	bne.n	8002dce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00e      	beq.n	8002dce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fac7 	bl	8003344 <DMA_CheckFifoParam>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2240      	movs	r2, #64	; 0x40
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e016      	b.n	8002dfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa7e 	bl	80032d8 <DMA_CalcBaseAndBitshift>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	223f      	movs	r2, #63	; 0x3f
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	e010803f 	.word	0xe010803f

08002e08 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e03e      	b.n	8002e98 <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d101      	bne.n	8002e2a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
 8002e28:	e036      	b.n	8002e98 <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2200      	movs	r2, #0
 8002e48:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2200      	movs	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2221      	movs	r2, #33	; 0x21
 8002e68:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fa34 	bl	80032d8 <DMA_CalcBaseAndBitshift>
 8002e70:	4603      	mov	r3, r0
 8002e72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	223f      	movs	r2, #63	; 0x3f
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_DMA_Start_IT+0x26>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e048      	b.n	8002f58 <HAL_DMA_Start_IT+0xb8>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d137      	bne.n	8002f4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2202      	movs	r2, #2
 8002ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f9c4 	bl	800327c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	223f      	movs	r2, #63	; 0x3f
 8002efa:	409a      	lsls	r2, r3
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0216 	orr.w	r2, r2, #22
 8002f0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f1e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0208 	orr.w	r2, r2, #8
 8002f36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e005      	b.n	8002f56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f52:	2302      	movs	r3, #2
 8002f54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002f6c:	4b8e      	ldr	r3, [pc, #568]	; (80031a8 <HAL_DMA_IRQHandler+0x248>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a8e      	ldr	r2, [pc, #568]	; (80031ac <HAL_DMA_IRQHandler+0x24c>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	0a9b      	lsrs	r3, r3, #10
 8002f78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d01a      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d013      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0204 	bic.w	r2, r2, #4
 8002fb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb8:	2208      	movs	r2, #8
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	4a77      	ldr	r2, [pc, #476]	; (80031b0 <HAL_DMA_IRQHandler+0x250>)
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d012      	beq.n	8003002 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fee:	4a70      	ldr	r2, [pc, #448]	; (80031b0 <HAL_DMA_IRQHandler+0x250>)
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffa:	f043 0202 	orr.w	r2, r3, #2
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	4a6b      	ldr	r2, [pc, #428]	; (80031b4 <HAL_DMA_IRQHandler+0x254>)
 8003008:	409a      	lsls	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4013      	ands	r3, r2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d012      	beq.n	8003038 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00b      	beq.n	8003038 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	4a63      	ldr	r2, [pc, #396]	; (80031b4 <HAL_DMA_IRQHandler+0x254>)
 8003026:	409a      	lsls	r2, r3
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003030:	f043 0204 	orr.w	r2, r3, #4
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303c:	2210      	movs	r2, #16
 800303e:	409a      	lsls	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d043      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d03c      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	2210      	movs	r2, #16
 800305c:	409a      	lsls	r2, r3
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d018      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d108      	bne.n	8003090 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d024      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
 800308e:	e01f      	b.n	80030d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01b      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
 80030a0:	e016      	b.n	80030d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d107      	bne.n	80030c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0208 	bic.w	r2, r2, #8
 80030be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d4:	2220      	movs	r2, #32
 80030d6:	409a      	lsls	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8093 	beq.w	8003208 <HAL_DMA_IRQHandler+0x2a8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 808b 	beq.w	8003208 <HAL_DMA_IRQHandler+0x2a8>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f6:	2220      	movs	r2, #32
 80030f8:	409a      	lsls	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b05      	cmp	r3, #5
 8003108:	d137      	bne.n	800317a <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0216 	bic.w	r2, r2, #22
 8003118:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003128:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d103      	bne.n	800313a <HAL_DMA_IRQHandler+0x1da>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0208 	bic.w	r2, r2, #8
 8003148:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314e:	223f      	movs	r2, #63	; 0x3f
 8003150:	409a      	lsls	r2, r3
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8082 	beq.w	8003274 <HAL_DMA_IRQHandler+0x314>
        {
          hdma->XferAbortCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
        }
        return;
 8003178:	e07c      	b.n	8003274 <HAL_DMA_IRQHandler+0x314>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_DMA_IRQHandler+0x26a>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d110      	bne.n	80031b8 <HAL_DMA_IRQHandler+0x258>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	2b00      	cmp	r3, #0
 800319c:	d034      	beq.n	8003208 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
 80031a6:	e02f      	b.n	8003208 <HAL_DMA_IRQHandler+0x2a8>
 80031a8:	20000fa8 	.word	0x20000fa8
 80031ac:	1b4e81b5 	.word	0x1b4e81b5
 80031b0:	00800001 	.word	0x00800001
 80031b4:	00800004 	.word	0x00800004
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d023      	beq.n	8003208 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	4798      	blx	r3
 80031c8:	e01e      	b.n	8003208 <HAL_DMA_IRQHandler+0x2a8>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10f      	bne.n	80031f8 <HAL_DMA_IRQHandler+0x298>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0210 	bic.w	r2, r2, #16
 80031e6:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_DMA_IRQHandler+0x2a8>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	2b00      	cmp	r3, #0
 800320e:	d032      	beq.n	8003276 <HAL_DMA_IRQHandler+0x316>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d022      	beq.n	8003262 <HAL_DMA_IRQHandler+0x302>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2205      	movs	r2, #5
 8003220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3301      	adds	r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	429a      	cmp	r2, r3
 800323e:	d307      	bcc.n	8003250 <HAL_DMA_IRQHandler+0x2f0>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f2      	bne.n	8003234 <HAL_DMA_IRQHandler+0x2d4>
 800324e:	e000      	b.n	8003252 <HAL_DMA_IRQHandler+0x2f2>
          break;
 8003250:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <HAL_DMA_IRQHandler+0x316>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
 8003272:	e000      	b.n	8003276 <HAL_DMA_IRQHandler+0x316>
        return;
 8003274:	bf00      	nop
    }
  }
}
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003298:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b40      	cmp	r3, #64	; 0x40
 80032a8:	d108      	bne.n	80032bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032ba:	e007      	b.n	80032cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	60da      	str	r2, [r3, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	3b10      	subs	r3, #16
 80032e8:	4a13      	ldr	r2, [pc, #76]	; (8003338 <DMA_CalcBaseAndBitshift+0x60>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032f2:	4a12      	ldr	r2, [pc, #72]	; (800333c <DMA_CalcBaseAndBitshift+0x64>)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d908      	bls.n	8003318 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <DMA_CalcBaseAndBitshift+0x68>)
 800330e:	4013      	ands	r3, r2
 8003310:	1d1a      	adds	r2, r3, #4
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	659a      	str	r2, [r3, #88]	; 0x58
 8003316:	e006      	b.n	8003326 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	4b08      	ldr	r3, [pc, #32]	; (8003340 <DMA_CalcBaseAndBitshift+0x68>)
 8003320:	4013      	ands	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	aaaaaaab 	.word	0xaaaaaaab
 800333c:	08006bbc 	.word	0x08006bbc
 8003340:	fffffc00 	.word	0xfffffc00

08003344 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d11f      	bne.n	800339e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d856      	bhi.n	8003412 <DMA_CheckFifoParam+0xce>
 8003364:	a201      	add	r2, pc, #4	; (adr r2, 800336c <DMA_CheckFifoParam+0x28>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	0800337d 	.word	0x0800337d
 8003370:	0800338f 	.word	0x0800338f
 8003374:	0800337d 	.word	0x0800337d
 8003378:	08003413 	.word	0x08003413
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d046      	beq.n	8003416 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800338c:	e043      	b.n	8003416 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003396:	d140      	bne.n	800341a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800339c:	e03d      	b.n	800341a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a6:	d121      	bne.n	80033ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d837      	bhi.n	800341e <DMA_CheckFifoParam+0xda>
 80033ae:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <DMA_CheckFifoParam+0x70>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	080033cb 	.word	0x080033cb
 80033bc:	080033c5 	.word	0x080033c5
 80033c0:	080033dd 	.word	0x080033dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      break;
 80033c8:	e030      	b.n	800342c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d025      	beq.n	8003422 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033da:	e022      	b.n	8003422 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033e4:	d11f      	bne.n	8003426 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ea:	e01c      	b.n	8003426 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d903      	bls.n	80033fa <DMA_CheckFifoParam+0xb6>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d003      	beq.n	8003400 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033f8:	e018      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
      break;
 80033fe:	e015      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00e      	beq.n	800342a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
      break;
 8003410:	e00b      	b.n	800342a <DMA_CheckFifoParam+0xe6>
      break;
 8003412:	bf00      	nop
 8003414:	e00a      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 8003416:	bf00      	nop
 8003418:	e008      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 800341a:	bf00      	nop
 800341c:	e006      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 800341e:	bf00      	nop
 8003420:	e004      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 8003422:	bf00      	nop
 8003424:	e002      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;   
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 800342a:	bf00      	nop
    }
  } 
  
  return status; 
 800342c:	7bfb      	ldrb	r3, [r7, #15]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop

0800343c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003452:	2300      	movs	r3, #0
 8003454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	e175      	b.n	8003748 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800345c:	2201      	movs	r2, #1
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	429a      	cmp	r2, r3
 8003476:	f040 8164 	bne.w	8003742 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d003      	beq.n	800348a <HAL_GPIO_Init+0x4e>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b12      	cmp	r3, #18
 8003488:	d123      	bne.n	80034d2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	08da      	lsrs	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3208      	adds	r2, #8
 8003492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	220f      	movs	r2, #15
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4013      	ands	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	08da      	lsrs	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3208      	adds	r2, #8
 80034cc:	69b9      	ldr	r1, [r7, #24]
 80034ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	2203      	movs	r2, #3
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0203 	and.w	r2, r3, #3
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d00b      	beq.n	8003526 <HAL_GPIO_Init+0xea>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d007      	beq.n	8003526 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800351a:	2b11      	cmp	r3, #17
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b12      	cmp	r3, #18
 8003524:	d130      	bne.n	8003588 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800355c:	2201      	movs	r2, #1
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 0201 	and.w	r2, r3, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	2203      	movs	r2, #3
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80be 	beq.w	8003742 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c6:	4b66      	ldr	r3, [pc, #408]	; (8003760 <HAL_GPIO_Init+0x324>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	4a65      	ldr	r2, [pc, #404]	; (8003760 <HAL_GPIO_Init+0x324>)
 80035cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d0:	6453      	str	r3, [r2, #68]	; 0x44
 80035d2:	4b63      	ldr	r3, [pc, #396]	; (8003760 <HAL_GPIO_Init+0x324>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035de:	4a61      	ldr	r2, [pc, #388]	; (8003764 <HAL_GPIO_Init+0x328>)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	3302      	adds	r3, #2
 80035e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	220f      	movs	r2, #15
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a58      	ldr	r2, [pc, #352]	; (8003768 <HAL_GPIO_Init+0x32c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d037      	beq.n	800367a <HAL_GPIO_Init+0x23e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a57      	ldr	r2, [pc, #348]	; (800376c <HAL_GPIO_Init+0x330>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d031      	beq.n	8003676 <HAL_GPIO_Init+0x23a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a56      	ldr	r2, [pc, #344]	; (8003770 <HAL_GPIO_Init+0x334>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d02b      	beq.n	8003672 <HAL_GPIO_Init+0x236>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a55      	ldr	r2, [pc, #340]	; (8003774 <HAL_GPIO_Init+0x338>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d025      	beq.n	800366e <HAL_GPIO_Init+0x232>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a54      	ldr	r2, [pc, #336]	; (8003778 <HAL_GPIO_Init+0x33c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d01f      	beq.n	800366a <HAL_GPIO_Init+0x22e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a53      	ldr	r2, [pc, #332]	; (800377c <HAL_GPIO_Init+0x340>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d019      	beq.n	8003666 <HAL_GPIO_Init+0x22a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a52      	ldr	r2, [pc, #328]	; (8003780 <HAL_GPIO_Init+0x344>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d013      	beq.n	8003662 <HAL_GPIO_Init+0x226>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a51      	ldr	r2, [pc, #324]	; (8003784 <HAL_GPIO_Init+0x348>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00d      	beq.n	800365e <HAL_GPIO_Init+0x222>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a50      	ldr	r2, [pc, #320]	; (8003788 <HAL_GPIO_Init+0x34c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d007      	beq.n	800365a <HAL_GPIO_Init+0x21e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a4f      	ldr	r2, [pc, #316]	; (800378c <HAL_GPIO_Init+0x350>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d101      	bne.n	8003656 <HAL_GPIO_Init+0x21a>
 8003652:	2309      	movs	r3, #9
 8003654:	e012      	b.n	800367c <HAL_GPIO_Init+0x240>
 8003656:	230a      	movs	r3, #10
 8003658:	e010      	b.n	800367c <HAL_GPIO_Init+0x240>
 800365a:	2308      	movs	r3, #8
 800365c:	e00e      	b.n	800367c <HAL_GPIO_Init+0x240>
 800365e:	2307      	movs	r3, #7
 8003660:	e00c      	b.n	800367c <HAL_GPIO_Init+0x240>
 8003662:	2306      	movs	r3, #6
 8003664:	e00a      	b.n	800367c <HAL_GPIO_Init+0x240>
 8003666:	2305      	movs	r3, #5
 8003668:	e008      	b.n	800367c <HAL_GPIO_Init+0x240>
 800366a:	2304      	movs	r3, #4
 800366c:	e006      	b.n	800367c <HAL_GPIO_Init+0x240>
 800366e:	2303      	movs	r3, #3
 8003670:	e004      	b.n	800367c <HAL_GPIO_Init+0x240>
 8003672:	2302      	movs	r3, #2
 8003674:	e002      	b.n	800367c <HAL_GPIO_Init+0x240>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <HAL_GPIO_Init+0x240>
 800367a:	2300      	movs	r3, #0
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	f002 0203 	and.w	r2, r2, #3
 8003682:	0092      	lsls	r2, r2, #2
 8003684:	4093      	lsls	r3, r2
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800368c:	4935      	ldr	r1, [pc, #212]	; (8003764 <HAL_GPIO_Init+0x328>)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	3302      	adds	r3, #2
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800369a:	4b3d      	ldr	r3, [pc, #244]	; (8003790 <HAL_GPIO_Init+0x354>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036be:	4a34      	ldr	r2, [pc, #208]	; (8003790 <HAL_GPIO_Init+0x354>)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036c4:	4b32      	ldr	r3, [pc, #200]	; (8003790 <HAL_GPIO_Init+0x354>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036e8:	4a29      	ldr	r2, [pc, #164]	; (8003790 <HAL_GPIO_Init+0x354>)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ee:	4b28      	ldr	r3, [pc, #160]	; (8003790 <HAL_GPIO_Init+0x354>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	43db      	mvns	r3, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4013      	ands	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003712:	4a1f      	ldr	r2, [pc, #124]	; (8003790 <HAL_GPIO_Init+0x354>)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003718:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <HAL_GPIO_Init+0x354>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800373c:	4a14      	ldr	r2, [pc, #80]	; (8003790 <HAL_GPIO_Init+0x354>)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	3301      	adds	r3, #1
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	2b0f      	cmp	r3, #15
 800374c:	f67f ae86 	bls.w	800345c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003750:	bf00      	nop
 8003752:	bf00      	nop
 8003754:	3724      	adds	r7, #36	; 0x24
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40023800 	.word	0x40023800
 8003764:	40013800 	.word	0x40013800
 8003768:	40020000 	.word	0x40020000
 800376c:	40020400 	.word	0x40020400
 8003770:	40020800 	.word	0x40020800
 8003774:	40020c00 	.word	0x40020c00
 8003778:	40021000 	.word	0x40021000
 800377c:	40021400 	.word	0x40021400
 8003780:	40021800 	.word	0x40021800
 8003784:	40021c00 	.word	0x40021c00
 8003788:	40022000 	.word	0x40022000
 800378c:	40022400 	.word	0x40022400
 8003790:	40013c00 	.word	0x40013c00

08003794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	807b      	strh	r3, [r7, #2]
 80037a0:	4613      	mov	r3, r2
 80037a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037a4:	787b      	ldrb	r3, [r7, #1]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037aa:	887a      	ldrh	r2, [r7, #2]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037b0:	e003      	b.n	80037ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037b2:	887b      	ldrh	r3, [r7, #2]
 80037b4:	041a      	lsls	r2, r3, #16
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	619a      	str	r2, [r3, #24]
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e07f      	b.n	80038da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f8a9 	bl	8003946 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2224      	movs	r2, #36	; 0x24
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003818:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003828:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d107      	bne.n	8003842 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	e006      	b.n	8003850 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800384e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d104      	bne.n	8003862 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003860:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_I2C_Init+0x11c>)
 800386e:	430b      	orrs	r3, r1
 8003870:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003880:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	ea42 0103 	orr.w	r1, r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	021a      	lsls	r2, r3, #8
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69d9      	ldr	r1, [r3, #28]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1a      	ldr	r2, [r3, #32]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	02008000 	.word	0x02008000

080038e8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e021      	b.n	800393e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2224      	movs	r2, #36	; 0x24
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f821 	bl	800395a <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	4608      	mov	r0, r1
 800397a:	4611      	mov	r1, r2
 800397c:	461a      	mov	r2, r3
 800397e:	4603      	mov	r3, r0
 8003980:	817b      	strh	r3, [r7, #10]
 8003982:	460b      	mov	r3, r1
 8003984:	813b      	strh	r3, [r7, #8]
 8003986:	4613      	mov	r3, r2
 8003988:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b20      	cmp	r3, #32
 8003998:	f040 8109 	bne.w	8003bae <HAL_I2C_Mem_Write+0x23e>
  {
    if((pData == NULL) || (Size == 0U))
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_I2C_Mem_Write+0x38>
 80039a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e101      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_I2C_Mem_Write+0x4a>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e0fa      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x240>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039c2:	f7ff f817 	bl	80029f4 <HAL_GetTick>
 80039c6:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	2319      	movs	r3, #25
 80039ce:	2201      	movs	r2, #1
 80039d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f982 	bl	8003cde <I2C_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e0e5      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2221      	movs	r2, #33	; 0x21
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2240      	movs	r2, #64	; 0x40
 80039f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a3a      	ldr	r2, [r7, #32]
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a0c:	88f8      	ldrh	r0, [r7, #6]
 8003a0e:	893a      	ldrh	r2, [r7, #8]
 8003a10:	8979      	ldrh	r1, [r7, #10]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	9301      	str	r3, [sp, #4]
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f8db 	bl	8003bd8 <I2C_RequestMemoryWrite>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00f      	beq.n	8003a48 <HAL_I2C_Mem_Write+0xd8>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d105      	bne.n	8003a3c <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0b9      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e0b3      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2bff      	cmp	r3, #255	; 0xff
 8003a50:	d90e      	bls.n	8003a70 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	22ff      	movs	r2, #255	; 0xff
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	8979      	ldrh	r1, [r7, #10]
 8003a60:	2300      	movs	r3, #0
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fa4d 	bl	8003f08 <I2C_TransferConfig>
 8003a6e:	e00f      	b.n	8003a90 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	8979      	ldrh	r1, [r7, #10]
 8003a82:	2300      	movs	r3, #0
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fa3c 	bl	8003f08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f95c 	bl	8003d52 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <HAL_I2C_Mem_Write+0x140>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d101      	bne.n	8003aac <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e081      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e07f      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	1c59      	adds	r1, r3, #1
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	6251      	str	r1, [r2, #36]	; 0x24
 8003aba:	781a      	ldrb	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d135      	bne.n	8003b50 <HAL_I2C_Mem_Write+0x1e0>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d030      	beq.n	8003b50 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	2200      	movs	r2, #0
 8003af6:	2180      	movs	r1, #128	; 0x80
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f8f0 	bl	8003cde <I2C_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e053      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x240>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2bff      	cmp	r3, #255	; 0xff
 8003b10:	d90e      	bls.n	8003b30 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	22ff      	movs	r2, #255	; 0xff
 8003b16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	8979      	ldrh	r1, [r7, #10]
 8003b20:	2300      	movs	r3, #0
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f9ed 	bl	8003f08 <I2C_TransferConfig>
 8003b2e:	e00f      	b.n	8003b50 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	8979      	ldrh	r1, [r7, #10]
 8003b42:	2300      	movs	r3, #0
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f9dc 	bl	8003f08 <I2C_TransferConfig>
        }
      }

    }while(hi2c->XferCount > 0U);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d19a      	bne.n	8003a90 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f937 	bl	8003dd2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <HAL_I2C_Mem_Write+0x20a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d101      	bne.n	8003b76 <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e01c      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e01a      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <HAL_I2C_Mem_Write+0x248>)
 8003b8e:	400b      	ands	r3, r1
 8003b90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e000      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 8003bae:	2302      	movs	r3, #2
  }
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	fe00e800 	.word	0xfe00e800

08003bbc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	4608      	mov	r0, r1
 8003be2:	4611      	mov	r1, r2
 8003be4:	461a      	mov	r2, r3
 8003be6:	4603      	mov	r3, r0
 8003be8:	817b      	strh	r3, [r7, #10]
 8003bea:	460b      	mov	r3, r1
 8003bec:	813b      	strh	r3, [r7, #8]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	8979      	ldrh	r1, [r7, #10]
 8003bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f980 	bl	8003f08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	69b9      	ldr	r1, [r7, #24]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f8a0 	bl	8003d52 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <I2C_RequestMemoryWrite+0x50>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d101      	bne.n	8003c24 <I2C_RequestMemoryWrite+0x4c>
    {
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e034      	b.n	8003c8e <I2C_RequestMemoryWrite+0xb6>
    }
    else
    {
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e032      	b.n	8003c8e <I2C_RequestMemoryWrite+0xb6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d105      	bne.n	8003c3a <I2C_RequestMemoryWrite+0x62>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c2e:	893b      	ldrh	r3, [r7, #8]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	629a      	str	r2, [r3, #40]	; 0x28
 8003c38:	e01b      	b.n	8003c72 <I2C_RequestMemoryWrite+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c3a:	893b      	ldrh	r3, [r7, #8]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	69b9      	ldr	r1, [r7, #24]
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f880 	bl	8003d52 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <I2C_RequestMemoryWrite+0x90>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d101      	bne.n	8003c64 <I2C_RequestMemoryWrite+0x8c>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e014      	b.n	8003c8e <I2C_RequestMemoryWrite+0xb6>
      }
      else
      {
        return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e012      	b.n	8003c8e <I2C_RequestMemoryWrite+0xb6>
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c68:	893b      	ldrh	r3, [r7, #8]
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2180      	movs	r1, #128	; 0x80
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f82e 	bl	8003cde <I2C_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <I2C_RequestMemoryWrite+0xb4>
  {
    return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e000      	b.n	8003c8e <I2C_RequestMemoryWrite+0xb6>
  }

return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d103      	bne.n	8003cb4 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d007      	beq.n	8003cd2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699a      	ldr	r2, [r3, #24]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0201 	orr.w	r2, r2, #1
 8003cd0:	619a      	str	r2, [r3, #24]
  }
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cee:	e01c      	b.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf6:	d018      	beq.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cfe:	f7fe fe79 	bl	80029f4 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d20d      	bcs.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e00f      	b.n	8003d4a <I2C_WaitOnFlagUntilTimeout+0x6c>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699a      	ldr	r2, [r3, #24]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4013      	ands	r3, r2
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	bf0c      	ite	eq
 8003d3a:	2301      	moveq	r3, #1
 8003d3c:	2300      	movne	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d0d3      	beq.n	8003cf0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d5e:	e02c      	b.n	8003dba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f871 	bl	8003e4c <I2C_IsAcknowledgeFailed>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e02a      	b.n	8003dca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d7a:	d01e      	beq.n	8003dba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d82:	f7fe fe37 	bl	80029f4 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d213      	bcs.n	8003dba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	f043 0220 	orr.w	r2, r3, #32
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e007      	b.n	8003dca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d1cb      	bne.n	8003d60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dde:	e028      	b.n	8003e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f831 	bl	8003e4c <I2C_IsAcknowledgeFailed>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e026      	b.n	8003e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003dfa:	f7fe fdfb 	bl	80029f4 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d213      	bcs.n	8003e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f043 0220 	orr.w	r2, r3, #32
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e007      	b.n	8003e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d1cf      	bne.n	8003de0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d148      	bne.n	8003ef8 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e66:	e01c      	b.n	8003ea2 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e6e:	d018      	beq.n	8003ea2 <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <I2C_IsAcknowledgeFailed+0x3a>
 8003e76:	f7fe fdbd 	bl	80029f4 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d20d      	bcs.n	8003ea2 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e02b      	b.n	8003efa <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d1db      	bne.n	8003e68 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff fee8 	bl	8003c96 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6859      	ldr	r1, [r3, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <I2C_IsAcknowledgeFailed+0xb8>)
 8003ed2:	400b      	ands	r3, r1
 8003ed4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2204      	movs	r2, #4
 8003eda:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	fe00e800 	.word	0xfe00e800

08003f08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	607b      	str	r3, [r7, #4]
 8003f12:	460b      	mov	r3, r1
 8003f14:	817b      	strh	r3, [r7, #10]
 8003f16:	4613      	mov	r3, r2
 8003f18:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <I2C_TransferConfig+0x58>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8003f2e:	897b      	ldrh	r3, [r7, #10]
 8003f30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f34:	7a7b      	ldrb	r3, [r7, #9]
 8003f36:	041b      	lsls	r3, r3, #16
 8003f38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	605a      	str	r2, [r3, #4]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	fc009800 	.word	0xfc009800

08003f64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <HAL_PWREx_EnableOverDrive+0x98>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	4a22      	ldr	r2, [pc, #136]	; (8003ffc <HAL_PWREx_EnableOverDrive+0x98>)
 8003f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f78:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_PWREx_EnableOverDrive+0x98>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f86:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f92:	f7fe fd2f 	bl	80029f4 <HAL_GetTick>
 8003f96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f98:	e009      	b.n	8003fae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f9a:	f7fe fd2b 	bl	80029f4 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fa8:	d901      	bls.n	8003fae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e022      	b.n	8003ff4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fae:	4b14      	ldr	r3, [pc, #80]	; (8004000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fba:	d1ee      	bne.n	8003f9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003fbc:	4b10      	ldr	r3, [pc, #64]	; (8004000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a0f      	ldr	r2, [pc, #60]	; (8004000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fc8:	f7fe fd14 	bl	80029f4 <HAL_GetTick>
 8003fcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fce:	e009      	b.n	8003fe4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fd0:	f7fe fd10 	bl	80029f4 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fde:	d901      	bls.n	8003fe4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e007      	b.n	8003ff4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ff0:	d1ee      	bne.n	8003fd0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40007000 	.word	0x40007000

08004004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b092      	sub	sp, #72	; 0x48
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	643b      	str	r3, [r7, #64]	; 0x40
  FlagStatus pwrclkchanged = RESET;
 8004010:	2300      	movs	r3, #0
 8004012:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8087 	beq.w	8004132 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004024:	4b97      	ldr	r3, [pc, #604]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 030c 	and.w	r3, r3, #12
 800402c:	2b04      	cmp	r3, #4
 800402e:	d00c      	beq.n	800404a <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004030:	4b94      	ldr	r3, [pc, #592]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 030c 	and.w	r3, r3, #12
 8004038:	2b08      	cmp	r3, #8
 800403a:	d112      	bne.n	8004062 <HAL_RCC_OscConfig+0x5e>
 800403c:	4b91      	ldr	r3, [pc, #580]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004048:	d10b      	bne.n	8004062 <HAL_RCC_OscConfig+0x5e>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404a:	4b8e      	ldr	r3, [pc, #568]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d06c      	beq.n	8004130 <HAL_RCC_OscConfig+0x12c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d168      	bne.n	8004130 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e281      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406a:	d106      	bne.n	800407a <HAL_RCC_OscConfig+0x76>
 800406c:	4b85      	ldr	r3, [pc, #532]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a84      	ldr	r2, [pc, #528]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	e02e      	b.n	80040d8 <HAL_RCC_OscConfig+0xd4>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10c      	bne.n	800409c <HAL_RCC_OscConfig+0x98>
 8004082:	4b80      	ldr	r3, [pc, #512]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a7f      	ldr	r2, [pc, #508]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	4b7d      	ldr	r3, [pc, #500]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a7c      	ldr	r2, [pc, #496]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	e01d      	b.n	80040d8 <HAL_RCC_OscConfig+0xd4>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0xbc>
 80040a6:	4b77      	ldr	r3, [pc, #476]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a76      	ldr	r2, [pc, #472]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	4b74      	ldr	r3, [pc, #464]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a73      	ldr	r2, [pc, #460]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e00b      	b.n	80040d8 <HAL_RCC_OscConfig+0xd4>
 80040c0:	4b70      	ldr	r3, [pc, #448]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a6f      	ldr	r2, [pc, #444]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	4b6d      	ldr	r3, [pc, #436]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a6c      	ldr	r2, [pc, #432]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d6:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d013      	beq.n	8004108 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fe fc88 	bl	80029f4 <HAL_GetTick>
 80040e4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e8:	f7fe fc84 	bl	80029f4 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	; 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e235      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fa:	4b62      	ldr	r3, [pc, #392]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCC_OscConfig+0xe4>
 8004106:	e014      	b.n	8004132 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fe fc74 	bl	80029f4 <HAL_GetTick>
 800410c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x11e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004110:	f7fe fc70 	bl	80029f4 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	; 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e221      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004122:	4b58      	ldr	r3, [pc, #352]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x10c>
 800412e:	e000      	b.n	8004132 <HAL_RCC_OscConfig+0x12e>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d07d      	beq.n	800423a <HAL_RCC_OscConfig+0x236>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800413e:	4b51      	ldr	r3, [pc, #324]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <HAL_RCC_OscConfig+0x15e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414a:	4b4e      	ldr	r3, [pc, #312]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b08      	cmp	r3, #8
 8004154:	d126      	bne.n	80041a4 <HAL_RCC_OscConfig+0x1a0>
 8004156:	4b4b      	ldr	r3, [pc, #300]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d120      	bne.n	80041a4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004162:	4b48      	ldr	r3, [pc, #288]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_RCC_OscConfig+0x176>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d001      	beq.n	800417a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e1f5      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417a:	4b42      	ldr	r3, [pc, #264]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6919      	ldr	r1, [r3, #16]
 8004186:	23f8      	movs	r3, #248	; 0xf8
 8004188:	63fb      	str	r3, [r7, #60]	; 0x3c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418c:	fa93 f3a3 	rbit	r3, r3
 8004190:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	fab3 f383 	clz	r3, r3
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	4939      	ldr	r1, [pc, #228]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a2:	e04a      	b.n	800423a <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d02d      	beq.n	8004208 <HAL_RCC_OscConfig+0x204>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ac:	4b35      	ldr	r3, [pc, #212]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a34      	ldr	r2, [pc, #208]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fe fc1c 	bl	80029f4 <HAL_GetTick>
 80041bc:	6438      	str	r0, [r7, #64]	; 0x40

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x1ce>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c0:	f7fe fc18 	bl	80029f4 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e1c9      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d2:	4b2c      	ldr	r3, [pc, #176]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x1bc>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041de:	4b29      	ldr	r3, [pc, #164]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6919      	ldr	r1, [r3, #16]
 80041ea:	23f8      	movs	r3, #248	; 0xf8
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	fab3 f383 	clz	r3, r3
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	4920      	ldr	r1, [pc, #128]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
 8004206:	e018      	b.n	800423a <HAL_RCC_OscConfig+0x236>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004208:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fe fbee 	bl	80029f4 <HAL_GetTick>
 8004218:	6438      	str	r0, [r7, #64]	; 0x40
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421c:	f7fe fbea 	bl	80029f4 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e19b      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422e:	4b15      	ldr	r3, [pc, #84]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x218>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d039      	beq.n	80042ba <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01c      	beq.n	8004288 <HAL_RCC_OscConfig+0x284>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800424e:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004252:	4a0c      	ldr	r2, [pc, #48]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425a:	f7fe fbcb 	bl	80029f4 <HAL_GetTick>
 800425e:	6438      	str	r0, [r7, #64]	; 0x40
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004262:	f7fe fbc7 	bl	80029f4 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e178      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004274:	4b03      	ldr	r3, [pc, #12]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0x25e>
 8004280:	e01b      	b.n	80042ba <HAL_RCC_OscConfig+0x2b6>
 8004282:	bf00      	nop
 8004284:	40023800 	.word	0x40023800
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004288:	4b9e      	ldr	r3, [pc, #632]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 800428a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428c:	4a9d      	ldr	r2, [pc, #628]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fe fbae 	bl	80029f4 <HAL_GetTick>
 8004298:	6438      	str	r0, [r7, #64]	; 0x40
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x2aa>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800429c:	f7fe fbaa 	bl	80029f4 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x2aa>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e15b      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ae:	4b95      	ldr	r3, [pc, #596]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 80042b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x298>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80a6 	beq.w	8004414 <HAL_RCC_OscConfig+0x410>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c8:	4b8e      	ldr	r3, [pc, #568]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10e      	bne.n	80042f2 <HAL_RCC_OscConfig+0x2ee>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d4:	4b8b      	ldr	r3, [pc, #556]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	4a8a      	ldr	r2, [pc, #552]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 80042da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042de:	6413      	str	r3, [r2, #64]	; 0x40
 80042e0:	4b88      	ldr	r3, [pc, #544]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042f2:	4b85      	ldr	r3, [pc, #532]	; (8004508 <HAL_RCC_OscConfig+0x504>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d118      	bne.n	8004330 <HAL_RCC_OscConfig+0x32c>
    {    
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042fe:	4b82      	ldr	r3, [pc, #520]	; (8004508 <HAL_RCC_OscConfig+0x504>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a81      	ldr	r2, [pc, #516]	; (8004508 <HAL_RCC_OscConfig+0x504>)
 8004304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004308:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430a:	f7fe fb73 	bl	80029f4 <HAL_GetTick>
 800430e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x320>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004312:	f7fe fb6f 	bl	80029f4 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b64      	cmp	r3, #100	; 0x64
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x320>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e120      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004324:	4b78      	ldr	r3, [pc, #480]	; (8004508 <HAL_RCC_OscConfig+0x504>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x30e>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d106      	bne.n	8004346 <HAL_RCC_OscConfig+0x342>
 8004338:	4b72      	ldr	r3, [pc, #456]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 800433a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433c:	4a71      	ldr	r2, [pc, #452]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6713      	str	r3, [r2, #112]	; 0x70
 8004344:	e02d      	b.n	80043a2 <HAL_RCC_OscConfig+0x39e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10c      	bne.n	8004368 <HAL_RCC_OscConfig+0x364>
 800434e:	4b6d      	ldr	r3, [pc, #436]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004352:	4a6c      	ldr	r2, [pc, #432]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	6713      	str	r3, [r2, #112]	; 0x70
 800435a:	4b6a      	ldr	r3, [pc, #424]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4a69      	ldr	r2, [pc, #420]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 8004360:	f023 0304 	bic.w	r3, r3, #4
 8004364:	6713      	str	r3, [r2, #112]	; 0x70
 8004366:	e01c      	b.n	80043a2 <HAL_RCC_OscConfig+0x39e>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b05      	cmp	r3, #5
 800436e:	d10c      	bne.n	800438a <HAL_RCC_OscConfig+0x386>
 8004370:	4b64      	ldr	r3, [pc, #400]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	4a63      	ldr	r2, [pc, #396]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 8004376:	f043 0304 	orr.w	r3, r3, #4
 800437a:	6713      	str	r3, [r2, #112]	; 0x70
 800437c:	4b61      	ldr	r3, [pc, #388]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	4a60      	ldr	r2, [pc, #384]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6713      	str	r3, [r2, #112]	; 0x70
 8004388:	e00b      	b.n	80043a2 <HAL_RCC_OscConfig+0x39e>
 800438a:	4b5e      	ldr	r3, [pc, #376]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	4a5d      	ldr	r2, [pc, #372]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	6713      	str	r3, [r2, #112]	; 0x70
 8004396:	4b5b      	ldr	r3, [pc, #364]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	4a5a      	ldr	r2, [pc, #360]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 800439c:	f023 0304 	bic.w	r3, r3, #4
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d015      	beq.n	80043d6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043aa:	f7fe fb23 	bl	80029f4 <HAL_GetTick>
 80043ae:	6438      	str	r0, [r7, #64]	; 0x40
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b0:	e00a      	b.n	80043c8 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b2:	f7fe fb1f 	bl	80029f4 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e0ce      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c8:	4b4e      	ldr	r3, [pc, #312]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ee      	beq.n	80043b2 <HAL_RCC_OscConfig+0x3ae>
 80043d4:	e014      	b.n	8004400 <HAL_RCC_OscConfig+0x3fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d6:	f7fe fb0d 	bl	80029f4 <HAL_GetTick>
 80043da:	6438      	str	r0, [r7, #64]	; 0x40
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043dc:	e00a      	b.n	80043f4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043de:	f7fe fb09 	bl	80029f4 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e0b8      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f4:	4b43      	ldr	r3, [pc, #268]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1ee      	bne.n	80043de <HAL_RCC_OscConfig+0x3da>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004400:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004408:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	4a3d      	ldr	r2, [pc, #244]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 800440e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004412:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80a3 	beq.w	8004564 <HAL_RCC_OscConfig+0x560>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800441e:	4b39      	ldr	r3, [pc, #228]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b08      	cmp	r3, #8
 8004428:	f000 809a 	beq.w	8004560 <HAL_RCC_OscConfig+0x55c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d17b      	bne.n	800452c <HAL_RCC_OscConfig+0x528>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004434:	4b33      	ldr	r3, [pc, #204]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a32      	ldr	r2, [pc, #200]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 800443a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800443e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fe fad8 	bl	80029f4 <HAL_GetTick>
 8004444:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004448:	f7fe fad4 	bl	80029f4 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e085      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445a:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x444>
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004474:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	fa93 f3a3 	rbit	r3, r3
 8004480:	613b      	str	r3, [r7, #16]
  return(result);
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	fab3 f383 	clz	r3, r3
 8004488:	fa01 f303 	lsl.w	r3, r1, r3
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	1e59      	subs	r1, r3, #1
 8004496:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800449a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	fab3 f383 	clz	r3, r3
 80044aa:	fa01 f303 	lsl.w	r3, r1, r3
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044b4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	fa93 f3a3 	rbit	r3, r3
 80044c0:	623b      	str	r3, [r7, #32]
  return(result);
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	fab3 f383 	clz	r3, r3
 80044c8:	fa01 f303 	lsl.w	r3, r1, r3
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044d2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80044d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	fa93 f3a3 	rbit	r3, r3
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80044e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e2:	fab3 f383 	clz	r3, r3
 80044e6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ea:	4906      	ldr	r1, [pc, #24]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a03      	ldr	r2, [pc, #12]	; (8004504 <HAL_RCC_OscConfig+0x500>)
 80044f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fe fa7a 	bl	80029f4 <HAL_GetTick>
 8004500:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004502:	e00c      	b.n	800451e <HAL_RCC_OscConfig+0x51a>
 8004504:	40023800 	.word	0x40023800
 8004508:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450c:	f7fe fa72 	bl	80029f4 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x51a>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e023      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451e:	4b14      	ldr	r3, [pc, #80]	; (8004570 <HAL_RCC_OscConfig+0x56c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x508>
 800452a:	e01b      	b.n	8004564 <HAL_RCC_OscConfig+0x560>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452c:	4b10      	ldr	r3, [pc, #64]	; (8004570 <HAL_RCC_OscConfig+0x56c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0f      	ldr	r2, [pc, #60]	; (8004570 <HAL_RCC_OscConfig+0x56c>)
 8004532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004536:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fe fa5c 	bl	80029f4 <HAL_GetTick>
 800453c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004540:	f7fe fa58 	bl	80029f4 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x54e>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e009      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004552:	4b07      	ldr	r3, [pc, #28]	; (8004570 <HAL_RCC_OscConfig+0x56c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x53c>
 800455e:	e001      	b.n	8004564 <HAL_RCC_OscConfig+0x560>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3748      	adds	r7, #72	; 0x48
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800

08004574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004582:	4b77      	ldr	r3, [pc, #476]	; (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d910      	bls.n	80045b2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004590:	4b73      	ldr	r3, [pc, #460]	; (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 020f 	bic.w	r2, r3, #15
 8004598:	4971      	ldr	r1, [pc, #452]	; (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	4313      	orrs	r3, r2
 800459e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045a0:	4b6f      	ldr	r3, [pc, #444]	; (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 030f 	and.w	r3, r3, #15
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d001      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e0d2      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d008      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045be:	4b69      	ldr	r3, [pc, #420]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	4966      	ldr	r1, [pc, #408]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d06a      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d107      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e4:	4b5f      	ldr	r3, [pc, #380]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d115      	bne.n	800461c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0b1      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d107      	bne.n	800460c <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fc:	4b59      	ldr	r3, [pc, #356]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0a5      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460c:	4b55      	ldr	r3, [pc, #340]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e09d      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461c:	4b51      	ldr	r3, [pc, #324]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f023 0203 	bic.w	r2, r3, #3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	494e      	ldr	r1, [pc, #312]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 800462a:	4313      	orrs	r3, r2
 800462c:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800462e:	f7fe f9e1 	bl	80029f4 <HAL_GetTick>
 8004632:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d112      	bne.n	8004662 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800463c:	e00a      	b.n	8004654 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800463e:	f7fe f9d9 	bl	80029f4 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	f241 3288 	movw	r2, #5000	; 0x1388
 800464c:	4293      	cmp	r3, r2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e081      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004654:	4b43      	ldr	r3, [pc, #268]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 030c 	and.w	r3, r3, #12
 800465c:	2b04      	cmp	r3, #4
 800465e:	d1ee      	bne.n	800463e <HAL_RCC_ClockConfig+0xca>
 8004660:	e027      	b.n	80046b2 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d11d      	bne.n	80046a6 <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800466a:	e00a      	b.n	8004682 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800466c:	f7fe f9c2 	bl	80029f4 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	; 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e06a      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004682:	4b38      	ldr	r3, [pc, #224]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	2b08      	cmp	r3, #8
 800468c:	d1ee      	bne.n	800466c <HAL_RCC_ClockConfig+0xf8>
 800468e:	e010      	b.n	80046b2 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004690:	f7fe f9b0 	bl	80029f4 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e058      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046a6:	4b2f      	ldr	r3, [pc, #188]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1ee      	bne.n	8004690 <HAL_RCC_ClockConfig+0x11c>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80046b2:	4b2b      	ldr	r3, [pc, #172]	; (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d210      	bcs.n	80046e2 <HAL_RCC_ClockConfig+0x16e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c0:	4b27      	ldr	r3, [pc, #156]	; (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f023 020f 	bic.w	r2, r3, #15
 80046c8:	4925      	ldr	r1, [pc, #148]	; (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046d0:	4b23      	ldr	r3, [pc, #140]	; (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d001      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e03a      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ee:	4b1d      	ldr	r3, [pc, #116]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	491a      	ldr	r1, [pc, #104]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800470c:	4b15      	ldr	r3, [pc, #84]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	4912      	ldr	r1, [pc, #72]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 800471c:	4313      	orrs	r3, r2
 800471e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004720:	f000 f826 	bl	8004770 <HAL_RCC_GetSysClockFreq>
 8004724:	4601      	mov	r1, r0
 8004726:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800472e:	23f0      	movs	r3, #240	; 0xf0
 8004730:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	fa93 f3a3 	rbit	r3, r3
 8004738:	60fb      	str	r3, [r7, #12]
  return(result);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	fab3 f383 	clz	r3, r3
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
 8004744:	4a08      	ldr	r2, [pc, #32]	; (8004768 <HAL_RCC_ClockConfig+0x1f4>)
 8004746:	5cd3      	ldrb	r3, [r2, r3]
 8004748:	fa21 f303 	lsr.w	r3, r1, r3
 800474c:	4a07      	ldr	r2, [pc, #28]	; (800476c <HAL_RCC_ClockConfig+0x1f8>)
 800474e:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004750:	2000      	movs	r0, #0
 8004752:	f7fe f925 	bl	80029a0 <HAL_InitTick>
  
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40023c00 	.word	0x40023c00
 8004764:	40023800 	.word	0x40023800
 8004768:	08006bac 	.word	0x08006bac
 800476c:	20000fa8 	.word	0x20000fa8

08004770 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004770:	b480      	push	{r7}
 8004772:	b08b      	sub	sp, #44	; 0x2c
 8004774:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	2300      	movs	r3, #0
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
 800477e:	2300      	movs	r3, #0
 8004780:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004786:	4b38      	ldr	r3, [pc, #224]	; (8004868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b08      	cmp	r3, #8
 8004790:	d00c      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x3c>
 8004792:	2b08      	cmp	r3, #8
 8004794:	d85d      	bhi.n	8004852 <HAL_RCC_GetSysClockFreq+0xe2>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x30>
 800479a:	2b04      	cmp	r3, #4
 800479c:	d003      	beq.n	80047a6 <HAL_RCC_GetSysClockFreq+0x36>
 800479e:	e058      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047a0:	4b32      	ldr	r3, [pc, #200]	; (800486c <HAL_RCC_GetSysClockFreq+0xfc>)
 80047a2:	623b      	str	r3, [r7, #32]
       break;
 80047a4:	e058      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047a6:	4b32      	ldr	r3, [pc, #200]	; (8004870 <HAL_RCC_GetSysClockFreq+0x100>)
 80047a8:	623b      	str	r3, [r7, #32]
      break;
 80047aa:	e055      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047ac:	4b2e      	ldr	r3, [pc, #184]	; (8004868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b4:	61fb      	str	r3, [r7, #28]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80047b6:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d017      	beq.n	80047f2 <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80047c2:	4a2b      	ldr	r2, [pc, #172]	; (8004870 <HAL_RCC_GetSysClockFreq+0x100>)
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80047ca:	4b27      	ldr	r3, [pc, #156]	; (8004868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047cc:	6859      	ldr	r1, [r3, #4]
 80047ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047d2:	400b      	ands	r3, r1
 80047d4:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80047d8:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	6979      	ldr	r1, [r7, #20]
 80047dc:	fa91 f1a1 	rbit	r1, r1
 80047e0:	6139      	str	r1, [r7, #16]
  return(result);
 80047e2:	6939      	ldr	r1, [r7, #16]
 80047e4:	fab1 f181 	clz	r1, r1
 80047e8:	40cb      	lsrs	r3, r1
 80047ea:	fb02 f303 	mul.w	r3, r2, r3
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
 80047f0:	e016      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80047f2:	4a1e      	ldr	r2, [pc, #120]	; (800486c <HAL_RCC_GetSysClockFreq+0xfc>)
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80047fa:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047fc:	6859      	ldr	r1, [r3, #4]
 80047fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004802:	400b      	ands	r3, r1
 8004804:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8004808:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	68f9      	ldr	r1, [r7, #12]
 800480c:	fa91 f1a1 	rbit	r1, r1
 8004810:	60b9      	str	r1, [r7, #8]
  return(result);
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	fab1 f181 	clz	r1, r1
 8004818:	40cb      	lsrs	r3, r1
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8004820:	4b11      	ldr	r3, [pc, #68]	; (8004868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004828:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800482c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	fa93 f3a3 	rbit	r3, r3
 8004834:	603b      	str	r3, [r7, #0]
  return(result);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	fab3 f383 	clz	r3, r3
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
 8004840:	3301      	adds	r3, #1
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8004846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	623b      	str	r3, [r7, #32]
      break;
 8004850:	e002      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004854:	623b      	str	r3, [r7, #32]
      break;
 8004856:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004858:	6a3b      	ldr	r3, [r7, #32]
}
 800485a:	4618      	mov	r0, r3
 800485c:	372c      	adds	r7, #44	; 0x2c
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40023800 	.word	0x40023800
 800486c:	00f42400 	.word	0x00f42400
 8004870:	017d7840 	.word	0x017d7840

08004874 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect. 
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004878:	4b03      	ldr	r3, [pc, #12]	; (8004888 <HAL_RCC_GetHCLKFreq+0x14>)
 800487a:	681b      	ldr	r3, [r3, #0]
}
 800487c:	4618      	mov	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000fa8 	.word	0x20000fa8

0800488c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b0d8      	sub	sp, #352	; 0x160
 8004890:	af00      	add	r7, sp, #0
 8004892:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004896:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800489a:	6018      	str	r0, [r3, #0]
  uint32_t tickstart = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  uint32_t tmpreg0 = 0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  uint32_t tmpreg1 = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  uint32_t plli2sused = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  uint32_t pllsaiused = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048ba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048be:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d01b      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048ce:	4b94      	ldr	r3, [pc, #592]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	4a93      	ldr	r2, [pc, #588]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80048d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048d8:	6093      	str	r3, [r2, #8]
 80048da:	4b91      	ldr	r3, [pc, #580]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048e2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ea:	498d      	ldr	r1, [pc, #564]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80048f0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048f4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d102      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1; 
 8004900:	2301      	movs	r3, #1
 8004902:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004906:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800490a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d025      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800491a:	4b81      	ldr	r3, [pc, #516]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800491c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004920:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004924:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004928:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004930:	497b      	ldr	r1, [pc, #492]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004938:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800493c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004948:	d102      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      plli2sused = 1; 
 800494a:	2301      	movs	r3, #1
 800494c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004950:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004954:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d102      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xda>
    {
      pllsaiused = 1; 
 8004960:	2301      	movs	r3, #1
 8004962:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004966:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800496a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d025      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800497a:	4b69      	ldr	r3, [pc, #420]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800497c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004980:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004984:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004988:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	4963      	ldr	r1, [pc, #396]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004998:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800499c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049a8:	d102      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      plli2sused = 1; 
 80049aa:	2301      	movs	r3, #1
 80049ac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049b0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049b4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      pllsaiused = 1; 
 80049c0:	2301      	movs	r3, #1
 80049c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049c6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049ca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {    
      plli2sused = 1; 
 80049da:	2301      	movs	r3, #1
 80049dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049e0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049e4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80ae 	beq.w	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049f6:	4b4a      	ldr	r3, [pc, #296]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	4a49      	ldr	r2, [pc, #292]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80049fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a00:	6413      	str	r3, [r2, #64]	; 0x40
 8004a02:	4b47      	ldr	r3, [pc, #284]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004a0a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a0e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a18:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004a1c:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a1e:	4b41      	ldr	r3, [pc, #260]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a40      	ldr	r2, [pc, #256]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a28:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a2a:	f7fd ffe3 	bl	80029f4 <HAL_GetTick>
 8004a2e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a32:	e00a      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a34:	f7fd ffde 	bl	80029f4 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b64      	cmp	r3, #100	; 0x64
 8004a42:	d902      	bls.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
      {
        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	f000 bfd9 	b.w	80059fc <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a4a:	4b36      	ldr	r3, [pc, #216]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0ee      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a56:	4b32      	ldr	r3, [pc, #200]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a62:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d03f      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004a6a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a6e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d033      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a82:	4b27      	ldr	r3, [pc, #156]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a8a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a8e:	4b24      	ldr	r3, [pc, #144]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	4a23      	ldr	r2, [pc, #140]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a9a:	4b21      	ldr	r3, [pc, #132]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	4a20      	ldr	r2, [pc, #128]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004aa8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004aac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004aae:	4b1c      	ldr	r3, [pc, #112]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d017      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x25e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aba:	f7fd ff9b 	bl	80029f4 <HAL_GetTick>
 8004abe:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac2:	e00c      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x252>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac4:	f7fd ff96 	bl	80029f4 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d902      	bls.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x252>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	f000 bf8f 	b.w	80059fc <HAL_RCCEx_PeriphCLKConfig+0x1170>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ade:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0ec      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x238>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004aee:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004afe:	d115      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b08:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b0c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b14:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b16:	400b      	ands	r3, r1
 8004b18:	4901      	ldr	r1, [pc, #4]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
 8004b1e:	e00b      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40007000 	.word	0x40007000
 8004b28:	0ffffcff 	.word	0x0ffffcff
 8004b2c:	4bbb      	ldr	r3, [pc, #748]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4aba      	ldr	r2, [pc, #744]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b32:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b36:	6093      	str	r3, [r2, #8]
 8004b38:	4bb8      	ldr	r3, [pc, #736]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b3c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b40:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4c:	49b3      	ldr	r1, [pc, #716]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b52:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b56:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d014      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b66:	4bad      	ldr	r3, [pc, #692]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b6c:	4aab      	ldr	r2, [pc, #684]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b76:	4ba9      	ldr	r3, [pc, #676]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b7c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b80:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	49a4      	ldr	r1, [pc, #656]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b90:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b94:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00e      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ba4:	4b9d      	ldr	r3, [pc, #628]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004baa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004bb2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bba:	4998      	ldr	r1, [pc, #608]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bc2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004bc6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00e      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bd6:	4b91      	ldr	r3, [pc, #580]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004be0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004be4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bec:	498b      	ldr	r1, [pc, #556]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bf4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004bf8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00e      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c08:	4b84      	ldr	r3, [pc, #528]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c12:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c16:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c1e:	497f      	ldr	r1, [pc, #508]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c26:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c2a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00e      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c3a:	4b78      	ldr	r3, [pc, #480]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c44:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c48:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	4972      	ldr	r1, [pc, #456]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c58:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c5c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00e      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c6c:	4b6b      	ldr	r3, [pc, #428]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c72:	f023 0203 	bic.w	r2, r3, #3
 8004c76:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c7a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c82:	4966      	ldr	r1, [pc, #408]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c8a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c8e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00e      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c9e:	4b5f      	ldr	r3, [pc, #380]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca4:	f023 020c 	bic.w	r2, r3, #12
 8004ca8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004cac:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb4:	4959      	ldr	r1, [pc, #356]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cbc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004cc0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00e      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cd0:	4b52      	ldr	r3, [pc, #328]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cda:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004cde:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	494d      	ldr	r1, [pc, #308]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004cf2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00e      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d02:	4b46      	ldr	r3, [pc, #280]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d0c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d10:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d18:	4940      	ldr	r1, [pc, #256]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d20:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d24:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d34:	4b39      	ldr	r3, [pc, #228]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d3e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d42:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4a:	4934      	ldr	r1, [pc, #208]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d52:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d56:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00e      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d66:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d70:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d74:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	4927      	ldr	r1, [pc, #156]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d84:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d88:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00e      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d98:	4b20      	ldr	r3, [pc, #128]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004da2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004da6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dae:	491b      	ldr	r1, [pc, #108]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004db6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004dba:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00e      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004dca:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dd4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004dd8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de0:	490e      	ldr	r1, [pc, #56]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004de8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004dec:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d011      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dfc:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e06:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e0a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e12:	4902      	ldr	r1, [pc, #8]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e1a:	e001      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004e1c:	40023800 	.word	0x40023800
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e20:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e24:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01a      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x5de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e34:	4b66      	ldr	r3, [pc, #408]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e3e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e42:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e4a:	4961      	ldr	r1, [pc, #388]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e52:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e56:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e62:	d102      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x5de>
    {
      pllsaiused = 1; 
 8004e64:	2301      	movs	r3, #1
 8004e66:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e6a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e6e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    pllsaiused = 1; 
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e84:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004e88:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00e      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e98:	4b4d      	ldr	r3, [pc, #308]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ea2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ea6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eae:	4948      	ldr	r1, [pc, #288]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004eb6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004eba:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00f      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x65e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004eca:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ed4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ed8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ee2:	493b      	ldr	r1, [pc, #236]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004eea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004eee:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00f      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004efe:	4b34      	ldr	r3, [pc, #208]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f04:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f08:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f0c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f16:	492e      	ldr	r1, [pc, #184]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f1e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f22:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00f      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f32:	4b27      	ldr	r3, [pc, #156]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f38:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f3c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f40:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4a:	4921      	ldr	r1, [pc, #132]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004f52:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f56:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00f      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f66:	4b1a      	ldr	r3, [pc, #104]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f6c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f70:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f74:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f7e:	4914      	ldr	r1, [pc, #80]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004f86:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d009      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x716>
 8004f8e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004f92:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f9e:	f040 8284 	bne.w	80054aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a0a      	ldr	r2, [pc, #40]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004fa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fac:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fae:	f7fd fd21 	bl	80029f4 <HAL_GetTick>
 8004fb2:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fb6:	e00d      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fb8:	f7fd fd1c 	bl	80029f4 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b64      	cmp	r3, #100	; 0x64
 8004fc6:	d905      	bls.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	f000 bd17 	b.w	80059fc <HAL_RCCEx_PeriphCLKConfig+0x1170>
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fd4:	4be4      	ldr	r3, [pc, #912]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1eb      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004fe0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004fe4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 808c 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x882>
 8004ff6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ffa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005002:	2b00      	cmp	r3, #0
 8005004:	f040 8083 	bne.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005008:	4bd7      	ldr	r3, [pc, #860]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800500a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005012:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005016:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800501e:	fa93 f3a3 	rbit	r3, r3
 8005022:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  return(result);
 8005026:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800502a:	fab3 f383 	clz	r3, r3
 800502e:	fa22 f303 	lsr.w	r3, r2, r3
 8005032:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005036:	4bcc      	ldr	r3, [pc, #816]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8005038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800503c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005040:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005044:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005048:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800504c:	fa93 f3a3 	rbit	r3, r3
 8005050:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  return(result);
 8005054:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005058:	fab3 f383 	clz	r3, r3
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
 8005060:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005064:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005068:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005074:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005078:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800507c:	fa93 f3a3 	rbit	r3, r3
 8005080:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return(result);
 8005084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005088:	fab3 f383 	clz	r3, r3
 800508c:	409a      	lsls	r2, r3
 800508e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005092:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800509a:	fa93 f3a3 	rbit	r3, r3
 800509e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return(result);
 80050a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050a6:	fab3 f383 	clz	r3, r3
 80050aa:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80050ae:	fa01 f303 	lsl.w	r3, r1, r3
 80050b2:	431a      	orrs	r2, r3
 80050b4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80050b8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80050c0:	fa93 f3a3 	rbit	r3, r3
 80050c4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  return(result);
 80050c8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80050cc:	fab3 f383 	clz	r3, r3
 80050d0:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80050d4:	fa01 f303 	lsl.w	r3, r1, r3
 80050d8:	431a      	orrs	r2, r3
 80050da:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80050de:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6899      	ldr	r1, [r3, #8]
 80050e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80050ea:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80050f2:	fa93 f3a3 	rbit	r3, r3
 80050f6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  return(result);
 80050fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80050fe:	fab3 f383 	clz	r3, r3
 8005102:	fa01 f303 	lsl.w	r3, r1, r3
 8005106:	4998      	ldr	r1, [pc, #608]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800510e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005112:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005122:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005126:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005132:	d014      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x8d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005134:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005138:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 809d 	beq.w	8005284 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 800514a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800514e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800515a:	f040 8093 	bne.w	8005284 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800515e:	4b82      	ldr	r3, [pc, #520]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8005160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005164:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005168:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800516c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005170:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005174:	fa93 f3a3 	rbit	r3, r3
 8005178:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  return(result);
 800517c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005180:	fab3 f383 	clz	r3, r3
 8005184:	fa22 f303 	lsr.w	r3, r2, r3
 8005188:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800518c:	4b76      	ldr	r3, [pc, #472]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800518e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005192:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005196:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800519a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051a2:	fa93 f3a3 	rbit	r3, r3
 80051a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  return(result);
 80051aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ae:	fab3 f383 	clz	r3, r3
 80051b2:	fa22 f303 	lsr.w	r3, r2, r3
 80051b6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051ba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80051be:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051d2:	fa93 f3a3 	rbit	r3, r3
 80051d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  return(result);
 80051da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051de:	fab3 f383 	clz	r3, r3
 80051e2:	409a      	lsls	r2, r3
 80051e4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80051e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80051f0:	fa93 f3a3 	rbit	r3, r3
 80051f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  return(result);
 80051f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051fc:	fab3 f383 	clz	r3, r3
 8005200:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005204:	fa01 f303 	lsl.w	r3, r1, r3
 8005208:	431a      	orrs	r2, r3
 800520a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800520e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68d9      	ldr	r1, [r3, #12]
 8005216:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800521a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005222:	fa93 f3a3 	rbit	r3, r3
 8005226:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return(result);
 800522a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800522e:	fab3 f383 	clz	r3, r3
 8005232:	fa01 f303 	lsl.w	r3, r1, r3
 8005236:	431a      	orrs	r2, r3
 8005238:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800523c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005240:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005244:	fa93 f3a3 	rbit	r3, r3
 8005248:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  return(result);
 800524c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005250:	fab3 f383 	clz	r3, r3
 8005254:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8005258:	fa01 f303 	lsl.w	r3, r1, r3
 800525c:	4942      	ldr	r1, [pc, #264]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8005264:	4b40      	ldr	r3, [pc, #256]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8005266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800526a:	f023 021f 	bic.w	r2, r3, #31
 800526e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005272:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	3b01      	subs	r3, #1
 800527c:	493a      	ldr	r1, [pc, #232]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005284:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005288:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 8086 	beq.w	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800529a:	4b33      	ldr	r3, [pc, #204]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800529c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052a4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80052a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052b0:	fa93 f3a3 	rbit	r3, r3
 80052b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 80052b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052bc:	fab3 f383 	clz	r3, r3
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
 80052c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80052c8:	4b27      	ldr	r3, [pc, #156]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 80052ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80052d2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80052d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052de:	fa93 f3a3 	rbit	r3, r3
 80052e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 80052e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052ea:	fab3 f383 	clz	r3, r3
 80052ee:	fa22 f303 	lsr.w	r3, r2, r3
 80052f2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80052f6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80052fa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005306:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800530e:	fa93 f3a3 	rbit	r3, r3
 8005312:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 8005316:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800531a:	fab3 f383 	clz	r3, r3
 800531e:	409a      	lsls	r2, r3
 8005320:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005324:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6919      	ldr	r1, [r3, #16]
 800532c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005338:	fa93 f3a3 	rbit	r3, r3
 800533c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8005340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005344:	fab3 f383 	clz	r3, r3
 8005348:	fa01 f303 	lsl.w	r3, r1, r3
 800534c:	431a      	orrs	r2, r3
 800534e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005352:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535a:	fa93 f3a3 	rbit	r3, r3
 800535e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  return(result);
 8005362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005366:	e001      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005368:	40023800 	.word	0x40023800
 800536c:	fab3 f383 	clz	r3, r3
 8005370:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	431a      	orrs	r2, r3
 800537a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800537e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005382:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005386:	fa93 f3a3 	rbit	r3, r3
 800538a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  return(result);
 800538e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005392:	fab3 f383 	clz	r3, r3
 8005396:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800539a:	fa01 f303 	lsl.w	r3, r1, r3
 800539e:	4950      	ldr	r1, [pc, #320]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053a6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80053aa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d05c      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053ba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80053be:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053d2:	fa93 f3a3 	rbit	r3, r3
 80053d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 80053da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053de:	fab3 f383 	clz	r3, r3
 80053e2:	409a      	lsls	r2, r3
 80053e4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80053e8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6919      	ldr	r1, [r3, #16]
 80053f0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80053f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053fc:	fa93 f3a3 	rbit	r3, r3
 8005400:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  return(result);
 8005404:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005408:	fab3 f383 	clz	r3, r3
 800540c:	fa01 f303 	lsl.w	r3, r1, r3
 8005410:	431a      	orrs	r2, r3
 8005412:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005416:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68d9      	ldr	r1, [r3, #12]
 800541e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005426:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800542a:	fa93 f3a3 	rbit	r3, r3
 800542e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 8005432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005436:	fab3 f383 	clz	r3, r3
 800543a:	fa01 f303 	lsl.w	r3, r1, r3
 800543e:	431a      	orrs	r2, r3
 8005440:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005444:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6899      	ldr	r1, [r3, #8]
 800544c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005450:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005454:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005458:	fa93 f3a3 	rbit	r3, r3
 800545c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8005460:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005464:	fab3 f383 	clz	r3, r3
 8005468:	fa01 f303 	lsl.w	r3, r1, r3
 800546c:	491c      	ldr	r1, [pc, #112]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005474:	4b1a      	ldr	r3, [pc, #104]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a19      	ldr	r2, [pc, #100]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 800547a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800547e:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005480:	f7fd fab8 	bl	80029f4 <HAL_GetTick>
 8005484:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005488:	e009      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800548a:	f7fd fab3 	bl	80029f4 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b64      	cmp	r3, #100	; 0x64
 8005498:	d901      	bls.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xc12>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e2ae      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800549e:	4b10      	ldr	r3, [pc, #64]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0ef      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80054aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	f040 82a3 	bne.w	80059fa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 80054b4:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 80054ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054be:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c0:	f7fd fa98 	bl	80029f4 <HAL_GetTick>
 80054c4:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054c8:	e00c      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc58>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054ca:	f7fd fa93 	bl	80029f4 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b64      	cmp	r3, #100	; 0x64
 80054d8:	d904      	bls.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc58>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e28e      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x1170>
 80054de:	bf00      	nop
 80054e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054e4:	4bd4      	ldr	r3, [pc, #848]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f0:	d0eb      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xc3e>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054f2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80054f6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 8005506:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800550a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d013      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xcb2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005516:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800551a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 8093 	beq.w	8005652 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800552c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005530:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	f040 808a 	bne.w	8005652 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800553e:	4bbe      	ldr	r3, [pc, #760]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005544:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005548:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800554c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005550:	fa93 f3a3 	rbit	r3, r3
 8005554:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8005556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005558:	fab3 f383 	clz	r3, r3
 800555c:	fa22 f303 	lsr.w	r3, r2, r3
 8005560:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8005564:	4bb4      	ldr	r3, [pc, #720]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800556e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005572:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005576:	fa93 f3a3 	rbit	r3, r3
 800557a:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 800557c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800557e:	fab3 f383 	clz	r3, r3
 8005582:	fa22 f303 	lsr.w	r3, r2, r3
 8005586:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800558a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800558e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695a      	ldr	r2, [r3, #20]
 8005596:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800559a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055a2:	fa93 f3a3 	rbit	r3, r3
 80055a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 80055a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055aa:	fab3 f383 	clz	r3, r3
 80055ae:	409a      	lsls	r2, r3
 80055b0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80055b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055bc:	fa93 f3a3 	rbit	r3, r3
 80055c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 80055c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055c8:	fab3 f383 	clz	r3, r3
 80055cc:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80055d0:	fa01 f303 	lsl.w	r3, r1, r3
 80055d4:	431a      	orrs	r2, r3
 80055d6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80055da:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6999      	ldr	r1, [r3, #24]
 80055e2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80055e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055ee:	fa93 f3a3 	rbit	r3, r3
 80055f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 80055f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055fa:	fab3 f383 	clz	r3, r3
 80055fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005602:	431a      	orrs	r2, r3
 8005604:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005610:	fa93 f3a3 	rbit	r3, r3
 8005614:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8005618:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800561c:	fab3 f383 	clz	r3, r3
 8005620:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8005624:	fa01 f303 	lsl.w	r3, r1, r3
 8005628:	4983      	ldr	r1, [pc, #524]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005630:	4b81      	ldr	r3, [pc, #516]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8005632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005636:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800563a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800563e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	3b01      	subs	r3, #1
 8005648:	021b      	lsls	r3, r3, #8
 800564a:	497b      	ldr	r1, [pc, #492]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005652:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005656:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80c5 	beq.w	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
 8005668:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800566c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005678:	f040 80bb 	bne.w	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800567c:	4b6e      	ldr	r3, [pc, #440]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005682:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005686:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800568a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800568e:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8005692:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005694:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005698:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	fa93 f1a3 	rbit	r1, r3
 80056a2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80056a6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80056aa:	6019      	str	r1, [r3, #0]
  return(result);
 80056ac:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80056b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	fab3 f383 	clz	r3, r3
 80056ba:	fa22 f303 	lsr.w	r3, r2, r3
 80056be:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80056c2:	4b5d      	ldr	r3, [pc, #372]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80056cc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80056d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80056d4:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80056d8:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056da:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80056de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	fa93 f1a3 	rbit	r1, r3
 80056e8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80056ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80056f0:	6019      	str	r1, [r3, #0]
  return(result);
 80056f2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80056f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	fab3 f383 	clz	r3, r3
 8005700:	fa22 f303 	lsr.w	r3, r2, r3
 8005704:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005708:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800570c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695a      	ldr	r2, [r3, #20]
 8005714:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005718:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800571c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005720:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005726:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	fa93 f1a3 	rbit	r1, r3
 8005730:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005734:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005738:	6019      	str	r1, [r3, #0]
  return(result);
 800573a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800573e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	fab3 f383 	clz	r3, r3
 8005748:	409a      	lsls	r2, r3
 800574a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800574e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6a19      	ldr	r1, [r3, #32]
 8005756:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800575a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800575e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8005762:	6018      	str	r0, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005764:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	fa93 f0a3 	rbit	r0, r3
 8005772:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005776:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800577a:	6018      	str	r0, [r3, #0]
  return(result);
 800577c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005780:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	fab3 f383 	clz	r3, r3
 800578a:	fa01 f303 	lsl.w	r3, r1, r3
 800578e:	431a      	orrs	r2, r3
 8005790:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005794:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005798:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800579c:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80057a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	fa93 f1a3 	rbit	r1, r3
 80057ac:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80057b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057b4:	6019      	str	r1, [r3, #0]
  return(result);
 80057b6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80057ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	fab3 f383 	clz	r3, r3
 80057c4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80057c8:	fa01 f303 	lsl.w	r3, r1, r3
 80057cc:	431a      	orrs	r2, r3
 80057ce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80057d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057d6:	fa93 f3a3 	rbit	r3, r3
 80057da:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 80057dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057de:	fab3 f383 	clz	r3, r3
 80057e2:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80057e6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ea:	4913      	ldr	r1, [pc, #76]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80057f2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80057f6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 80dd 	beq.w	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005808:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800580a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005812:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005816:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800581a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800581e:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005820:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005824:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	fa93 f1a3 	rbit	r1, r3
 800582e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005832:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005836:	e001      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
 8005838:	40023800 	.word	0x40023800
 800583c:	6019      	str	r1, [r3, #0]
  return(result);
 800583e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005842:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	fab3 f383 	clz	r3, r3
 800584c:	fa22 f303 	lsr.w	r3, r2, r3
 8005850:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8005854:	4b6c      	ldr	r3, [pc, #432]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800585e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005862:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005866:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800586a:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005870:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	fa93 f1a3 	rbit	r1, r3
 800587a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800587e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005882:	6019      	str	r1, [r3, #0]
  return(result);
 8005884:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005888:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	fab3 f383 	clz	r3, r3
 8005892:	fa22 f303 	lsr.w	r3, r2, r3
 8005896:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800589a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800589e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695a      	ldr	r2, [r3, #20]
 80058a6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80058aa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80058ae:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80058b2:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80058b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	fa93 f1a3 	rbit	r1, r3
 80058c2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80058c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80058ca:	6019      	str	r1, [r3, #0]
  return(result);
 80058cc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80058d0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	fab3 f383 	clz	r3, r3
 80058da:	409a      	lsls	r2, r3
 80058dc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80058e0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80058e4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80058e8:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80058ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	fa93 f1a3 	rbit	r1, r3
 80058f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80058fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005900:	6019      	str	r1, [r3, #0]
  return(result);
 8005902:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005906:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	fab3 f383 	clz	r3, r3
 8005910:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8005914:	fa01 f303 	lsl.w	r3, r1, r3
 8005918:	431a      	orrs	r2, r3
 800591a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800591e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005922:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8005926:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005928:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800592c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	fa93 f1a3 	rbit	r1, r3
 8005936:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800593a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800593e:	6019      	str	r1, [r3, #0]
  return(result);
 8005940:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005944:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	fab3 f383 	clz	r3, r3
 800594e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005952:	fa01 f303 	lsl.w	r3, r1, r3
 8005956:	431a      	orrs	r2, r3
 8005958:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800595c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69d9      	ldr	r1, [r3, #28]
 8005964:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005968:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800596c:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8005970:	6018      	str	r0, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005972:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005976:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	fa93 f0a3 	rbit	r0, r3
 8005980:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005984:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005988:	6018      	str	r0, [r3, #0]
  return(result);
 800598a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800598e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	fab3 f383 	clz	r3, r3
 8005998:	fa01 f303 	lsl.w	r3, r1, r3
 800599c:	491a      	ldr	r1, [pc, #104]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80059a4:	4b18      	ldr	r3, [pc, #96]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 80059a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059ae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80059b2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	4913      	ldr	r1, [pc, #76]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80059c2:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a10      	ldr	r2, [pc, #64]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 80059c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059cc:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ce:	f7fd f811 	bl	80029f4 <HAL_GetTick>
 80059d2:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059d6:	e009      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1160>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059d8:	f7fd f80c 	bl	80029f4 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b64      	cmp	r3, #100	; 0x64
 80059e6:	d901      	bls.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1160>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e007      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059ec:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f8:	d1ee      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x114c>
      }
    }
  }
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	40023800 	.word	0x40023800

08005a0c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b09b      	sub	sp, #108	; 0x6c
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	667b      	str	r3, [r7, #100]	; 0x64
  
  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4ab6      	ldr	r2, [pc, #728]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKConfig+0x2e8>)
 8005a1c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8005a1e:	4bb6      	ldr	r3, [pc, #728]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a20:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005a24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a28:	4013      	ands	r3, r2
 8005a2a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005a2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	fa92 f2a2 	rbit	r2, r2
 8005a36:	60fa      	str	r2, [r7, #12]
  return(result);
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	fab2 f282 	clz	r2, r2
 8005a3e:	fa23 f202 	lsr.w	r2, r3, r2
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005a46:	4bac      	ldr	r3, [pc, #688]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a50:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005a54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	fa93 f3a3 	rbit	r3, r3
 8005a5c:	617b      	str	r3, [r7, #20]
  return(result);
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	fab3 f383 	clz	r3, r3
 8005a64:	40da      	lsrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005a6a:	4ba3      	ldr	r3, [pc, #652]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a74:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005a78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	fa93 f3a3 	rbit	r3, r3
 8005a80:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	fab3 f383 	clz	r3, r3
 8005a88:	40da      	lsrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005a8e:	4b9a      	ldr	r3, [pc, #616]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a94:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005a98:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	fa93 f3a3 	rbit	r3, r3
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	fab3 f383 	clz	r3, r3
 8005aac:	40da      	lsrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	609a      	str	r2, [r3, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 8005ab2:	4b91      	ldr	r3, [pc, #580]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005ab4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ab8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005abc:	4013      	ands	r3, r2
 8005abe:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005ac2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac6:	fa92 f2a2 	rbit	r2, r2
 8005aca:	62fa      	str	r2, [r7, #44]	; 0x2c
  return(result);
 8005acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ace:	fab2 f282 	clz	r2, r2
 8005ad2:	fa23 f202 	lsr.w	r2, r3, r2
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8005ada:	4b87      	ldr	r3, [pc, #540]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ae4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aec:	fa93 f3a3 	rbit	r3, r3
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af4:	fab3 f383 	clz	r3, r3
 8005af8:	40da      	lsrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 8005afe:	4b7e      	ldr	r3, [pc, #504]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b08:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005b0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b10:	fa93 f3a3 	rbit	r3, r3
 8005b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b18:	fab3 f383 	clz	r3, r3
 8005b1c:	40da      	lsrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 8005b22:	4b75      	ldr	r3, [pc, #468]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b28:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b2c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005b30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b34:	fa93 f3a3 	rbit	r3, r3
 8005b38:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8005b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3c:	fab3 f383 	clz	r3, r3
 8005b40:	40da      	lsrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	61da      	str	r2, [r3, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 8005b46:	4b6c      	ldr	r3, [pc, #432]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b4c:	f003 021f 	and.w	r2, r3, #31
 8005b50:	231f      	movs	r3, #31
 8005b52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b56:	fa93 f3a3 	rbit	r3, r3
 8005b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8005b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5e:	fab3 f383 	clz	r3, r3
 8005b62:	40da      	lsrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 8005b68:	4b63      	ldr	r3, [pc, #396]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b6e:	f403 52f8 	and.w	r2, r3, #7936	; 0x1f00
 8005b72:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005b76:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b7a:	fa93 f3a3 	rbit	r3, r3
 8005b7e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b82:	fab3 f383 	clz	r3, r3
 8005b86:	40da      	lsrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 8005b8c:	4b5a      	ldr	r3, [pc, #360]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b96:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005b9a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b9e:	fa93 f3a3 	rbit	r3, r3
 8005ba2:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8005ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ba6:	fab3 f383 	clz	r3, r3
 8005baa:	40da      	lsrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8005bb0:	4b51      	ldr	r3, [pc, #324]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb6:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8005bbe:	4b4e      	ldr	r3, [pc, #312]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8005bcc:	4b4a      	ldr	r3, [pc, #296]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8005bd8:	4b47      	ldr	r3, [pc, #284]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	665a      	str	r2, [r3, #100]	; 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8005be6:	4b44      	ldr	r3, [pc, #272]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bec:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	669a      	str	r2, [r3, #104]	; 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8005bf4:	4b40      	ldr	r3, [pc, #256]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfa:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	66da      	str	r2, [r3, #108]	; 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8005c02:	4b3d      	ldr	r3, [pc, #244]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c08:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	671a      	str	r2, [r3, #112]	; 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8005c10:	4b39      	ldr	r3, [pc, #228]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c16:	f003 0203 	and.w	r2, r3, #3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8005c1e:	4b36      	ldr	r3, [pc, #216]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c24:	f003 020c 	and.w	r2, r3, #12
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8005c2c:	4b32      	ldr	r3, [pc, #200]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8005c3a:	4b2f      	ldr	r3, [pc, #188]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c40:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8005c48:	4b2b      	ldr	r3, [pc, #172]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8005c56:	4b28      	ldr	r3, [pc, #160]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8005c64:	4b24      	ldr	r3, [pc, #144]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6a:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8005c72:	4b21      	ldr	r3, [pc, #132]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c78:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	661a      	str	r2, [r3, #96]	; 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005c80:	4b1d      	ldr	r3, [pc, #116]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c86:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8005c8e:	4b1a      	ldr	r3, [pc, #104]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c94:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	679a      	str	r2, [r3, #120]	; 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8005c9c:	4b16      	ldr	r3, [pc, #88]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca2:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005caa:	4b13      	ldr	r3, [pc, #76]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 8005cba:	4b0f      	ldr	r3, [pc, #60]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	
  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005cca:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cd0:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
 8005cda:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ce0:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005cea:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005cf2:	e003      	b.n	8005cfc <HAL_RCCEx_GetPeriphCLKConfig+0x2f0>
 8005cf4:	1cfffff1 	.word	0x1cfffff1
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005cfe:	4b0e      	ldr	r3, [pc, #56]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x32c>)
 8005d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d02:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005d06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8005d0e:	4b0a      	ldr	r3, [pc, #40]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x32c>)
 8005d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d103      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKConfig+0x318>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8005d22:	e003      	b.n	8005d2c <HAL_RCCEx_GetPeriphCLKConfig+0x320>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005d2c:	bf00      	nop
 8005d2e:	376c      	adds	r7, #108	; 0x6c
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	40023800 	.word	0x40023800

08005d3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60bb      	str	r3, [r7, #8]
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d5a:	f040 80a4 	bne.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;   
 8005d5e:	4ba6      	ldr	r3, [pc, #664]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d64:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005d6c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d74:	f000 808a 	beq.w	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d7e:	f200 8091 	bhi.w	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d88:	d07d      	beq.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d90:	f200 8088 	bhi.w	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d004      	beq.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005da0:	d039      	beq.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;       
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
    default :
      {
        break;
 8005da2:	e07f      	b.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005da4:	4b94      	ldr	r3, [pc, #592]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d108      	bne.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005db0:	4b91      	ldr	r3, [pc, #580]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005db8:	4a90      	ldr	r2, [pc, #576]	; (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	e007      	b.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005dc2:	4b8d      	ldr	r3, [pc, #564]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dca:	4a8d      	ldr	r2, [pc, #564]	; (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005dd2:	4b89      	ldr	r3, [pc, #548]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	0e1b      	lsrs	r3, r3, #24
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005de0:	4b85      	ldr	r3, [pc, #532]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	fb03 f202 	mul.w	r2, r3, r2
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df8:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005dfa:	4b7f      	ldr	r3, [pc, #508]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e00:	0a1b      	lsrs	r3, r3, #8
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg); 
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e12:	617b      	str	r3, [r7, #20]
        break;       
 8005e14:	e047      	b.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005e16:	4b78      	ldr	r3, [pc, #480]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d108      	bne.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e22:	4b75      	ldr	r3, [pc, #468]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e2a:	4a74      	ldr	r2, [pc, #464]	; (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	e007      	b.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005e34:	4b70      	ldr	r3, [pc, #448]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e3c:	4a70      	ldr	r2, [pc, #448]	; (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e42:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005e44:	4b6c      	ldr	r3, [pc, #432]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e4a:	0e1b      	lsrs	r3, r3, #24
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005e52:	4b69      	ldr	r3, [pc, #420]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e58:	099b      	lsrs	r3, r3, #6
 8005e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	fb03 f202 	mul.w	r2, r3, r2
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6a:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8005e6c:	4b62      	ldr	r3, [pc, #392]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e72:	f003 031f 	and.w	r3, r3, #31
 8005e76:	3301      	adds	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e82:	617b      	str	r3, [r7, #20]
        break;
 8005e84:	e00f      	b.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e86:	4b5f      	ldr	r3, [pc, #380]	; (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005e88:	617b      	str	r3, [r7, #20]
        break;       
 8005e8a:	e00c      	b.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005e8c:	4b5a      	ldr	r3, [pc, #360]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d102      	bne.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8005e98:	4b58      	ldr	r3, [pc, #352]	; (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e9a:	617b      	str	r3, [r7, #20]
        break;       
 8005e9c:	e003      	b.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 8005e9e:	4b58      	ldr	r3, [pc, #352]	; (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005ea0:	617b      	str	r3, [r7, #20]
        break;       
 8005ea2:	e000      	b.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 8005ea4:	bf00      	nop
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eac:	f040 80ad 	bne.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;   
 8005eb0:	4b51      	ldr	r3, [pc, #324]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eb6:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005ebe:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ec6:	f000 808a 	beq.w	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ed0:	f200 809a 	bhi.w	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005eda:	d07d      	beq.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ee2:	f200 8091 	bhi.w	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d004      	beq.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ef2:	d039      	beq.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;       
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
    default :
      {
        break;
 8005ef4:	e088      	b.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005ef6:	4b40      	ldr	r3, [pc, #256]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d108      	bne.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f02:	4b3d      	ldr	r3, [pc, #244]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f0a:	4a3c      	ldr	r2, [pc, #240]	; (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	e007      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005f14:	4b38      	ldr	r3, [pc, #224]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f1c:	4a38      	ldr	r2, [pc, #224]	; (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f22:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005f24:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2a:	0e1b      	lsrs	r3, r3, #24
 8005f2c:	f003 030f 	and.w	r3, r3, #15
 8005f30:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005f32:	4b31      	ldr	r3, [pc, #196]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f38:	099b      	lsrs	r3, r3, #6
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	fb03 f202 	mul.w	r2, r3, r2
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005f4c:	4b2a      	ldr	r3, [pc, #168]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	3301      	adds	r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg); 
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f64:	617b      	str	r3, [r7, #20]
        break;       
 8005f66:	e050      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005f68:	4b23      	ldr	r3, [pc, #140]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d108      	bne.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f74:	4b20      	ldr	r3, [pc, #128]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f7c:	4a1f      	ldr	r2, [pc, #124]	; (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f82:	613b      	str	r3, [r7, #16]
 8005f84:	e007      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005f86:	4b1c      	ldr	r3, [pc, #112]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f8e:	4a1c      	ldr	r2, [pc, #112]	; (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f94:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005f96:	4b18      	ldr	r3, [pc, #96]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9c:	0e1b      	lsrs	r3, r3, #24
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005fa4:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005faa:	099b      	lsrs	r3, r3, #6
 8005fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	fb03 f202 	mul.w	r2, r3, r2
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8005fbe:	4b0e      	ldr	r3, [pc, #56]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc4:	f003 031f 	and.w	r3, r3, #31
 8005fc8:	3301      	adds	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd4:	617b      	str	r3, [r7, #20]
        break;
 8005fd6:	e018      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005fda:	617b      	str	r3, [r7, #20]
        break;       
 8005fdc:	e015      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005fde:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 8005fea:	4b04      	ldr	r3, [pc, #16]	; (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fec:	617b      	str	r3, [r7, #20]
        break;       
 8005fee:	e00c      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 8005ff0:	4b03      	ldr	r3, [pc, #12]	; (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005ff2:	617b      	str	r3, [r7, #20]
        break;       
 8005ff4:	e009      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 8005ff6:	bf00      	nop
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	00f42400 	.word	0x00f42400
 8006000:	017d7840 	.word	0x017d7840
 8006004:	00bb8000 	.word	0x00bb8000
        break;
 8006008:	bf00      	nop
      }
    }
  }
  
  return frequency;
 800600a:	697b      	ldr	r3, [r7, #20]
}
 800600c:	4618      	mov	r0, r3
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_SAI_Init>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006020:	2300      	movs	r3, #0
 8006022:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006024:	2300      	movs	r3, #0
 8006026:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e14d      	b.n	80062d2 <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f95a 	bl	8006304 <HAL_SAI_MspInit>
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 facd 	bl	80065f8 <SAI_Disable>
  
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	2b02      	cmp	r3, #2
 8006064:	d00c      	beq.n	8006080 <HAL_SAI_Init+0x68>
 8006066:	2b02      	cmp	r3, #2
 8006068:	d80d      	bhi.n	8006086 <HAL_SAI_Init+0x6e>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <HAL_SAI_Init+0x5c>
 800606e:	2b01      	cmp	r3, #1
 8006070:	d003      	beq.n	800607a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8006072:	e008      	b.n	8006086 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	61fb      	str	r3, [r7, #28]
      break;
 8006078:	e006      	b.n	8006088 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800607a:	2310      	movs	r3, #16
 800607c:	61fb      	str	r3, [r7, #28]
      break;
 800607e:	e003      	b.n	8006088 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006080:	2320      	movs	r3, #32
 8006082:	61fb      	str	r3, [r7, #28]
      break;
 8006084:	e000      	b.n	8006088 <HAL_SAI_Init+0x70>
    break;
 8006086:	bf00      	nop
  }
  
  switch(hsai->Init.Synchro)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b03      	cmp	r3, #3
 800608e:	d81e      	bhi.n	80060ce <HAL_SAI_Init+0xb6>
 8006090:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <HAL_SAI_Init+0x80>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060af 	.word	0x080060af
 80060a0:	080060b7 	.word	0x080060b7
 80060a4:	080060bf 	.word	0x080060bf
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]
      }
      break;
 80060ac:	e010      	b.n	80060d0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80060ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060b2:	617b      	str	r3, [r7, #20]
      }
      break;
 80060b4:	e00c      	b.n	80060d0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80060b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060ba:	617b      	str	r3, [r7, #20]
      }
      break;
 80060bc:	e008      	b.n	80060d0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80060be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060c2:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	f043 0301 	orr.w	r3, r3, #1
 80060ca:	61fb      	str	r3, [r7, #28]
      }
      break;
 80060cc:	e000      	b.n	80060d0 <HAL_SAI_Init+0xb8>
  default:
    break;      
 80060ce:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a81      	ldr	r2, [pc, #516]	; (80062dc <HAL_SAI_Init+0x2c4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_SAI_Init+0xcc>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a80      	ldr	r2, [pc, #512]	; (80062e0 <HAL_SAI_Init+0x2c8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d103      	bne.n	80060ec <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80060e4:	4a7f      	ldr	r2, [pc, #508]	; (80062e4 <HAL_SAI_Init+0x2cc>)
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	e002      	b.n	80060f2 <HAL_SAI_Init+0xda>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 80060ec:	4a7e      	ldr	r2, [pc, #504]	; (80062e8 <HAL_SAI_Init+0x2d0>)
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d043      	beq.n	8006182 <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a76      	ldr	r2, [pc, #472]	; (80062dc <HAL_SAI_Init+0x2c4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d004      	beq.n	8006112 <HAL_SAI_Init+0xfa>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a74      	ldr	r2, [pc, #464]	; (80062e0 <HAL_SAI_Init+0x2c8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d104      	bne.n	800611c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006112:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006116:	f7ff fe11 	bl	8005d3c <HAL_RCCEx_GetPeriphCLKFreq>
 800611a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a72      	ldr	r2, [pc, #456]	; (80062ec <HAL_SAI_Init+0x2d4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d004      	beq.n	8006130 <HAL_SAI_Init+0x118>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a71      	ldr	r2, [pc, #452]	; (80062f0 <HAL_SAI_Init+0x2d8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d104      	bne.n	800613a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006130:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006134:	f7ff fe02 	bl	8005d3c <HAL_RCCEx_GetPeriphCLKFreq>
 8006138:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	461a      	mov	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	025b      	lsls	r3, r3, #9
 800614c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006150:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4a67      	ldr	r2, [pc, #412]	; (80062f4 <HAL_SAI_Init+0x2dc>)
 8006156:	fba2 2303 	umull	r2, r3, r2, r3
 800615a:	08da      	lsrs	r2, r3, #3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	621a      	str	r2, [r3, #32]
    
    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8006160:	68f9      	ldr	r1, [r7, #12]
 8006162:	4b64      	ldr	r3, [pc, #400]	; (80062f4 <HAL_SAI_Init+0x2dc>)
 8006164:	fba3 2301 	umull	r2, r3, r3, r1
 8006168:	08da      	lsrs	r2, r3, #3
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	1aca      	subs	r2, r1, r3
 8006174:	2a08      	cmp	r2, #8
 8006176:	d904      	bls.n	8006182 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	621a      	str	r2, [r3, #32]
    }
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_SAI_Init+0x17a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b02      	cmp	r3, #2
 8006190:	d109      	bne.n	80061a6 <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006196:	2b01      	cmp	r3, #1
 8006198:	d101      	bne.n	800619e <HAL_SAI_Init+0x186>
 800619a:	2300      	movs	r3, #0
 800619c:	e001      	b.n	80061a2 <HAL_SAI_Init+0x18a>
 800619e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061a2:	61bb      	str	r3, [r7, #24]
 80061a4:	e008      	b.n	80061b8 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d102      	bne.n	80061b4 <HAL_SAI_Init+0x19c>
 80061ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061b2:	e000      	b.n	80061b6 <HAL_SAI_Init+0x19e>
 80061b4:	2300      	movs	r3, #0
 80061b6:	61bb      	str	r3, [r7, #24]
  }
  
  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6819      	ldr	r1, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	4b4d      	ldr	r3, [pc, #308]	; (80062f8 <HAL_SAI_Init+0x2e0>)
 80061c4:	400b      	ands	r3, r1
 80061c6:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6819      	ldr	r1, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80061dc:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	431a      	orrs	r2, r3
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80061f0:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80061fc:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	051b      	lsls	r3, r3, #20
 8006204:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	601a      	str	r2, [r3, #0]
  
  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6859      	ldr	r1, [r3, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	4b38      	ldr	r3, [pc, #224]	; (80062fc <HAL_SAI_Init+0x2e4>)
 800621a:	400b      	ands	r3, r1
 800621c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6859      	ldr	r1, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699a      	ldr	r2, [r3, #24]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	605a      	str	r2, [r3, #4]
  
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6899      	ldr	r1, [r3, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	4b2e      	ldr	r3, [pc, #184]	; (8006300 <HAL_SAI_Init+0x2e8>)
 8006248:	400b      	ands	r3, r1
 800624a:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6899      	ldr	r1, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800625c:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8006262:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8006268:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626e:	3b01      	subs	r3, #1
 8006270:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8006272:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	609a      	str	r2, [r3, #8]
  
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68d9      	ldr	r1, [r3, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	f24f 0320 	movw	r3, #61472	; 0xf020
 800628a:	400b      	ands	r3, r1
 800628c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68d9      	ldr	r1, [r3, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	431a      	orrs	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062aa:	3b01      	subs	r3, #1
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	60da      	str	r2, [r3, #12]
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  
  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3720      	adds	r7, #32
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	40015804 	.word	0x40015804
 80062e0:	40015824 	.word	0x40015824
 80062e4:	40015800 	.word	0x40015800
 80062e8:	40015c00 	.word	0x40015c00
 80062ec:	40015c04 	.word	0x40015c04
 80062f0:	40015c24 	.word	0x40015c24
 80062f4:	cccccccd 	.word	0xcccccccd
 80062f8:	ff05c010 	.word	0xff05c010
 80062fc:	ffff1ff0 	.word	0xffff1ff0
 8006300:	fff88000 	.word	0xfff88000

08006304 <HAL_SAI_MspInit>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_SAI_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	4613      	mov	r3, r2
 8006324:	80fb      	strh	r3, [r7, #6]
  if((pData == NULL) || (Size == 0))
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <HAL_SAI_Transmit_DMA+0x1a>
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_SAI_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e074      	b.n	8006420 <HAL_SAI_Transmit_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b01      	cmp	r3, #1
 8006340:	d16d      	bne.n	800641e <HAL_SAI_Transmit_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_SAI_Transmit_DMA+0x38>
 800634c:	2302      	movs	r3, #2
 800634e:	e067      	b.n	8006420 <HAL_SAI_Transmit_DMA+0x108>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	88fa      	ldrh	r2, [r7, #6]
 8006362:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	88fa      	ldrh	r2, [r7, #6]
 800636a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2212      	movs	r2, #18
 800637a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006382:	4a29      	ldr	r2, [pc, #164]	; (8006428 <HAL_SAI_Transmit_DMA+0x110>)
 8006384:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800638a:	4a28      	ldr	r2, [pc, #160]	; (800642c <HAL_SAI_Transmit_DMA+0x114>)
 800638c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006392:	4a27      	ldr	r2, [pc, #156]	; (8006430 <HAL_SAI_Transmit_DMA+0x118>)
 8006394:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800639a:	2200      	movs	r2, #0
 800639c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a6:	4619      	mov	r1, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	331c      	adds	r3, #28
 80063ae:	461a      	mov	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80063b6:	f7fc fd73 	bl	8002ea0 <HAL_DMA_Start_IT>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <HAL_SAI_Transmit_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e029      	b.n	8006420 <HAL_SAI_Transmit_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d107      	bne.n	80063ea <HAL_SAI_Transmit_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80063e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80063ea:	2100      	movs	r1, #0
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 f8cd 	bl	800658c <SAI_InterruptFlag>
 80063f2:	4601      	mov	r1, r0
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691a      	ldr	r2, [r3, #16]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006410:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	e000      	b.n	8006420 <HAL_SAI_Transmit_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800641e:	2302      	movs	r3, #2
  }
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	080066c9 	.word	0x080066c9
 800642c:	08006665 	.word	0x08006665
 8006430:	08006765 	.word	0x08006765

08006434 <HAL_SAI_Receive_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	4613      	mov	r3, r2
 8006440:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <HAL_SAI_Receive_DMA+0x1a>
 8006448:	88fb      	ldrh	r3, [r7, #6]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e074      	b.n	800653c <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b01      	cmp	r3, #1
 800645c:	d16d      	bne.n	800653a <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_SAI_Receive_DMA+0x38>
 8006468:	2302      	movs	r3, #2
 800646a:	e067      	b.n	800653c <HAL_SAI_Receive_DMA+0x108>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	88fa      	ldrh	r2, [r7, #6]
 800647e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	88fa      	ldrh	r2, [r7, #6]
 8006486:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2222      	movs	r2, #34	; 0x22
 8006496:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649e:	4a29      	ldr	r2, [pc, #164]	; (8006544 <HAL_SAI_Receive_DMA+0x110>)
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a6:	4a28      	ldr	r2, [pc, #160]	; (8006548 <HAL_SAI_Receive_DMA+0x114>)
 80064a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ae:	4a27      	ldr	r2, [pc, #156]	; (800654c <HAL_SAI_Receive_DMA+0x118>)
 80064b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b6:	2200      	movs	r2, #0
 80064b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	331c      	adds	r3, #28
 80064c4:	4619      	mov	r1, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ca:	461a      	mov	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80064d2:	f7fc fce5 	bl	8002ea0 <HAL_DMA_Start_IT>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e029      	b.n	800653c <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d107      	bne.n	8006506 <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006504:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006506:	2100      	movs	r1, #0
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 f83f 	bl	800658c <SAI_InterruptFlag>
 800650e:	4601      	mov	r1, r0
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800652c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	e000      	b.n	800653c <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800653a:	2302      	movs	r3, #2
  }
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	08006749 	.word	0x08006749
 8006548:	080066e5 	.word	0x080066e5
 800654c:	08006765 	.word	0x08006765

08006550 <HAL_SAI_TxCpltCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
 __weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_SAI_ErrorCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode: SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006596:	2301      	movs	r3, #1
 8006598:	60fb      	str	r3, [r7, #12]
  
  if(mode == SAI_MODE_IT)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d103      	bne.n	80065a8 <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f043 0308 	orr.w	r3, r3, #8
 80065a6:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d10b      	bne.n	80065c8 <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d003      	beq.n	80065c0 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d103      	bne.n	80065c8 <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f043 0310 	orr.w	r3, r3, #16
 80065c6:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d003      	beq.n	80065d8 <SAI_InterruptFlag+0x4c>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d104      	bne.n	80065e2 <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	e003      	b.n	80065ea <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f043 0304 	orr.w	r3, r3, #4
 80065e8:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80065ea:	68fb      	ldr	r3, [r7, #12]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <SAI_Disable>:
  * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80065f8:	b490      	push	{r4, r7}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006600:	4b16      	ldr	r3, [pc, #88]	; (800665c <SAI_Disable+0x64>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a16      	ldr	r2, [pc, #88]	; (8006660 <SAI_Disable+0x68>)
 8006606:	fba2 2303 	umull	r2, r3, r2, r3
 800660a:	0b1b      	lsrs	r3, r3, #12
 800660c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006620:	601a      	str	r2, [r3, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006622:	4623      	mov	r3, r4
 8006624:	1e5c      	subs	r4, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <SAI_Disable+0x48>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	73fb      	strb	r3, [r7, #15]
      break;
 800663e:	e006      	b.n	800664e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e9      	bne.n	8006622 <SAI_Disable+0x2a>

  return status;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bc90      	pop	{r4, r7}
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20000fa8 	.word	0x20000fa8
 8006660:	95cbec1b 	.word	0x95cbec1b

08006664 <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	60fb      	str	r3, [r7, #12]

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667c:	2b00      	cmp	r3, #0
 800667e:	d11c      	bne.n	80066ba <SAI_DMATxCplt+0x56>
  {
    hsai->XferCount = 0;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006696:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006698:	2100      	movs	r1, #0
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f7ff ff76 	bl	800658c <SAI_InterruptFlag>
 80066a0:	4603      	mov	r3, r0
 80066a2:	43d9      	mvns	r1, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	400a      	ands	r2, r1
 80066b0:	611a      	str	r2, [r3, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7ff ff48 	bl	8006550 <HAL_SAI_TxCpltCallback>
}
 80066c0:	bf00      	nop
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <SAI_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	60fb      	str	r3, [r7, #12]

  HAL_SAI_TxHalfCpltCallback(hsai);
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f7ff ff44 	bl	8006564 <HAL_SAI_TxHalfCpltCallback>
}
 80066dc:	bf00      	nop
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	60fb      	str	r3, [r7, #12]
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d11c      	bne.n	800673a <SAI_DMARxCplt+0x56>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800670e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006718:	2100      	movs	r1, #0
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f7ff ff36 	bl	800658c <SAI_InterruptFlag>
 8006720:	4603      	mov	r3, r0
 8006722:	43d9      	mvns	r1, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691a      	ldr	r2, [r3, #16]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	400a      	ands	r2, r1
 8006730:	611a      	str	r2, [r3, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f7fa fe9e 	bl	800147c <HAL_SAI_RxCpltCallback>
}
 8006740:	bf00      	nop
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006754:	60fb      	str	r3, [r7, #12]

  HAL_SAI_RxHalfCpltCallback(hsai);
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f7fa fe86 	bl	8001468 <HAL_SAI_RxHalfCpltCallback>
}
 800675c:	bf00      	nop
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006778:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006788:	2b01      	cmp	r3, #1
 800678a:	d004      	beq.n	8006796 <SAI_DMAError+0x32>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006792:	2b01      	cmp	r3, #1
 8006794:	d112      	bne.n	80067bc <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80067a4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7ff ff26 	bl	80065f8 <SAI_Disable>
    
    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f7ff fedb 	bl	8006578 <HAL_SAI_ErrorCallback>
}
 80067c2:	bf00      	nop
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <__errno>:
 80067cc:	4b01      	ldr	r3, [pc, #4]	; (80067d4 <__errno+0x8>)
 80067ce:	6818      	ldr	r0, [r3, #0]
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20001008 	.word	0x20001008

080067d8 <__libc_init_array>:
 80067d8:	b570      	push	{r4, r5, r6, lr}
 80067da:	4d0d      	ldr	r5, [pc, #52]	; (8006810 <__libc_init_array+0x38>)
 80067dc:	4c0d      	ldr	r4, [pc, #52]	; (8006814 <__libc_init_array+0x3c>)
 80067de:	1b64      	subs	r4, r4, r5
 80067e0:	10a4      	asrs	r4, r4, #2
 80067e2:	2600      	movs	r6, #0
 80067e4:	42a6      	cmp	r6, r4
 80067e6:	d109      	bne.n	80067fc <__libc_init_array+0x24>
 80067e8:	4d0b      	ldr	r5, [pc, #44]	; (8006818 <__libc_init_array+0x40>)
 80067ea:	4c0c      	ldr	r4, [pc, #48]	; (800681c <__libc_init_array+0x44>)
 80067ec:	f000 f9c6 	bl	8006b7c <_init>
 80067f0:	1b64      	subs	r4, r4, r5
 80067f2:	10a4      	asrs	r4, r4, #2
 80067f4:	2600      	movs	r6, #0
 80067f6:	42a6      	cmp	r6, r4
 80067f8:	d105      	bne.n	8006806 <__libc_init_array+0x2e>
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
 80067fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006800:	4798      	blx	r3
 8006802:	3601      	adds	r6, #1
 8006804:	e7ee      	b.n	80067e4 <__libc_init_array+0xc>
 8006806:	f855 3b04 	ldr.w	r3, [r5], #4
 800680a:	4798      	blx	r3
 800680c:	3601      	adds	r6, #1
 800680e:	e7f2      	b.n	80067f6 <__libc_init_array+0x1e>
 8006810:	08006d08 	.word	0x08006d08
 8006814:	08006d08 	.word	0x08006d08
 8006818:	08006d08 	.word	0x08006d08
 800681c:	08006d0c 	.word	0x08006d0c

08006820 <sinf_poly>:
 8006820:	07cb      	lsls	r3, r1, #31
 8006822:	d412      	bmi.n	800684a <sinf_poly+0x2a>
 8006824:	ee21 5b00 	vmul.f64	d5, d1, d0
 8006828:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800682c:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8006830:	eea6 7b01 	vfma.f64	d7, d6, d1
 8006834:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 8006838:	ee21 1b05 	vmul.f64	d1, d1, d5
 800683c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8006840:	eea7 0b01 	vfma.f64	d0, d7, d1
 8006844:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006848:	4770      	bx	lr
 800684a:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800684e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8006852:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8006856:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800685a:	eea1 7b06 	vfma.f64	d7, d1, d6
 800685e:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 8006862:	eea1 0b06 	vfma.f64	d0, d1, d6
 8006866:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800686a:	ee21 1b05 	vmul.f64	d1, d1, d5
 800686e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8006872:	e7e5      	b.n	8006840 <sinf_poly+0x20>
 8006874:	0000      	movs	r0, r0
	...

08006878 <sinf>:
 8006878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800687a:	ee10 4a10 	vmov	r4, s0
 800687e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006882:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8006886:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800688a:	eef0 7a40 	vmov.f32	s15, s0
 800688e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8006892:	d218      	bcs.n	80068c6 <sinf+0x4e>
 8006894:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006898:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800689c:	d20a      	bcs.n	80068b4 <sinf+0x3c>
 800689e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 80068a2:	d103      	bne.n	80068ac <sinf+0x34>
 80068a4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80068a8:	ed8d 1a01 	vstr	s2, [sp, #4]
 80068ac:	eeb0 0a67 	vmov.f32	s0, s15
 80068b0:	b003      	add	sp, #12
 80068b2:	bd30      	pop	{r4, r5, pc}
 80068b4:	483a      	ldr	r0, [pc, #232]	; (80069a0 <sinf+0x128>)
 80068b6:	eeb0 0b46 	vmov.f64	d0, d6
 80068ba:	2100      	movs	r1, #0
 80068bc:	b003      	add	sp, #12
 80068be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068c2:	f7ff bfad 	b.w	8006820 <sinf_poly>
 80068c6:	f240 422e 	movw	r2, #1070	; 0x42e
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d824      	bhi.n	8006918 <sinf+0xa0>
 80068ce:	4b34      	ldr	r3, [pc, #208]	; (80069a0 <sinf+0x128>)
 80068d0:	ed93 7b08 	vldr	d7, [r3, #32]
 80068d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80068d8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80068dc:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80068e0:	ee17 1a90 	vmov	r1, s15
 80068e4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 80068e8:	1609      	asrs	r1, r1, #24
 80068ea:	ee07 1a90 	vmov	s15, r1
 80068ee:	f001 0203 	and.w	r2, r1, #3
 80068f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80068f6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80068fa:	ed92 0b00 	vldr	d0, [r2]
 80068fe:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006902:	f011 0f02 	tst.w	r1, #2
 8006906:	eea5 6b47 	vfms.f64	d6, d5, d7
 800690a:	bf08      	it	eq
 800690c:	4618      	moveq	r0, r3
 800690e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006912:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006916:	e7d1      	b.n	80068bc <sinf+0x44>
 8006918:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800691c:	d237      	bcs.n	800698e <sinf+0x116>
 800691e:	4a21      	ldr	r2, [pc, #132]	; (80069a4 <sinf+0x12c>)
 8006920:	f3c4 6183 	ubfx	r1, r4, #26, #4
 8006924:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8006928:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800692c:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8006930:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8006934:	6a2a      	ldr	r2, [r5, #32]
 8006936:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800693a:	4083      	lsls	r3, r0
 800693c:	fba3 2002 	umull	r2, r0, r3, r2
 8006940:	692a      	ldr	r2, [r5, #16]
 8006942:	4359      	muls	r1, r3
 8006944:	fbe3 0102 	umlal	r0, r1, r3, r2
 8006948:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 800694c:	0f9d      	lsrs	r5, r3, #30
 800694e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006952:	1ac9      	subs	r1, r1, r3
 8006954:	f7f9 fdfe 	bl	8000554 <__aeabi_l2d>
 8006958:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800695c:	4b10      	ldr	r3, [pc, #64]	; (80069a0 <sinf+0x128>)
 800695e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006998 <sinf+0x120>
 8006962:	ec41 0b17 	vmov	d7, r0, r1
 8006966:	f004 0203 	and.w	r2, r4, #3
 800696a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800696e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8006972:	ed92 7b00 	vldr	d7, [r2]
 8006976:	ee20 1b00 	vmul.f64	d1, d0, d0
 800697a:	f014 0f02 	tst.w	r4, #2
 800697e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8006982:	4629      	mov	r1, r5
 8006984:	bf08      	it	eq
 8006986:	4618      	moveq	r0, r3
 8006988:	ee27 0b00 	vmul.f64	d0, d7, d0
 800698c:	e796      	b.n	80068bc <sinf+0x44>
 800698e:	b003      	add	sp, #12
 8006990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006994:	f000 b8e3 	b.w	8006b5e <__math_invalidf>
 8006998:	54442d18 	.word	0x54442d18
 800699c:	3c1921fb 	.word	0x3c1921fb
 80069a0:	08006c28 	.word	0x08006c28
 80069a4:	08006bc4 	.word	0x08006bc4

080069a8 <sinf_poly>:
 80069a8:	07cb      	lsls	r3, r1, #31
 80069aa:	d412      	bmi.n	80069d2 <sinf_poly+0x2a>
 80069ac:	ee21 5b00 	vmul.f64	d5, d1, d0
 80069b0:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 80069b4:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 80069b8:	eea6 7b01 	vfma.f64	d7, d6, d1
 80069bc:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 80069c0:	ee21 1b05 	vmul.f64	d1, d1, d5
 80069c4:	eea6 0b05 	vfma.f64	d0, d6, d5
 80069c8:	eea7 0b01 	vfma.f64	d0, d7, d1
 80069cc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80069d0:	4770      	bx	lr
 80069d2:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 80069d6:	ee21 5b01 	vmul.f64	d5, d1, d1
 80069da:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 80069de:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 80069e2:	eea1 7b06 	vfma.f64	d7, d1, d6
 80069e6:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 80069ea:	eea1 0b06 	vfma.f64	d0, d1, d6
 80069ee:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 80069f2:	ee21 1b05 	vmul.f64	d1, d1, d5
 80069f6:	eea5 0b06 	vfma.f64	d0, d5, d6
 80069fa:	e7e5      	b.n	80069c8 <sinf_poly+0x20>
 80069fc:	0000      	movs	r0, r0
	...

08006a00 <cosf>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	ee10 4a10 	vmov	r4, s0
 8006a06:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006a0a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8006a0e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8006a12:	d21f      	bcs.n	8006a54 <cosf+0x54>
 8006a14:	ee27 7b07 	vmul.f64	d7, d7, d7
 8006a18:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8006a1c:	f0c0 8086 	bcc.w	8006b2c <cosf+0x12c>
 8006a20:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006a24:	4b46      	ldr	r3, [pc, #280]	; (8006b40 <cosf+0x140>)
 8006a26:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 8006a2a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8006a2e:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 8006a32:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006a36:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8006a3a:	eea7 0b05 	vfma.f64	d0, d7, d5
 8006a3e:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8006a42:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006a46:	eea4 0b05 	vfma.f64	d0, d4, d5
 8006a4a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8006a4e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	f240 422e 	movw	r2, #1070	; 0x42e
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d829      	bhi.n	8006ab0 <cosf+0xb0>
 8006a5c:	4b38      	ldr	r3, [pc, #224]	; (8006b40 <cosf+0x140>)
 8006a5e:	ed93 6b08 	vldr	d6, [r3, #32]
 8006a62:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006a66:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8006a6a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8006a6e:	ee16 1a90 	vmov	r1, s13
 8006a72:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8006a76:	1609      	asrs	r1, r1, #24
 8006a78:	ee06 1a90 	vmov	s13, r1
 8006a7c:	f001 0203 	and.w	r2, r1, #3
 8006a80:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006a84:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8006a88:	ed92 0b00 	vldr	d0, [r2]
 8006a8c:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8006a90:	f011 0f02 	tst.w	r1, #2
 8006a94:	bf08      	it	eq
 8006a96:	4618      	moveq	r0, r3
 8006a98:	f081 0101 	eor.w	r1, r1, #1
 8006a9c:	eea5 7b46 	vfms.f64	d7, d5, d6
 8006aa0:	ee27 1b07 	vmul.f64	d1, d7, d7
 8006aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aa8:	ee27 0b00 	vmul.f64	d0, d7, d0
 8006aac:	f7ff bf7c 	b.w	80069a8 <sinf_poly>
 8006ab0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8006ab4:	d236      	bcs.n	8006b24 <cosf+0x124>
 8006ab6:	4a23      	ldr	r2, [pc, #140]	; (8006b44 <cosf+0x144>)
 8006ab8:	f3c4 6183 	ubfx	r1, r4, #26, #4
 8006abc:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8006ac0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8006ac4:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8006ac8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8006acc:	6a2a      	ldr	r2, [r5, #32]
 8006ace:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ad2:	4083      	lsls	r3, r0
 8006ad4:	fba3 2002 	umull	r2, r0, r3, r2
 8006ad8:	692a      	ldr	r2, [r5, #16]
 8006ada:	4359      	muls	r1, r3
 8006adc:	fbe3 0102 	umlal	r0, r1, r3, r2
 8006ae0:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 8006ae4:	0f9d      	lsrs	r5, r3, #30
 8006ae6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006aea:	1ac9      	subs	r1, r1, r3
 8006aec:	f7f9 fd32 	bl	8000554 <__aeabi_l2d>
 8006af0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8006af4:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <cosf+0x140>)
 8006af6:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8006b38 <cosf+0x138>
 8006afa:	ec41 0b17 	vmov	d7, r0, r1
 8006afe:	f004 0203 	and.w	r2, r4, #3
 8006b02:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006b06:	f014 0f02 	tst.w	r4, #2
 8006b0a:	ee27 0b00 	vmul.f64	d0, d7, d0
 8006b0e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8006b12:	ed92 7b00 	vldr	d7, [r2]
 8006b16:	ee20 1b00 	vmul.f64	d1, d0, d0
 8006b1a:	f085 0101 	eor.w	r1, r5, #1
 8006b1e:	bf08      	it	eq
 8006b20:	4618      	moveq	r0, r3
 8006b22:	e7bf      	b.n	8006aa4 <cosf+0xa4>
 8006b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b28:	f000 b819 	b.w	8006b5e <__math_invalidf>
 8006b2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006b30:	e78f      	b.n	8006a52 <cosf+0x52>
 8006b32:	bf00      	nop
 8006b34:	f3af 8000 	nop.w
 8006b38:	54442d18 	.word	0x54442d18
 8006b3c:	3c1921fb 	.word	0x3c1921fb
 8006b40:	08006c28 	.word	0x08006c28
 8006b44:	08006bc4 	.word	0x08006bc4

08006b48 <with_errnof>:
 8006b48:	b513      	push	{r0, r1, r4, lr}
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006b50:	f7ff fe3c 	bl	80067cc <__errno>
 8006b54:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006b58:	6004      	str	r4, [r0, #0]
 8006b5a:	b002      	add	sp, #8
 8006b5c:	bd10      	pop	{r4, pc}

08006b5e <__math_invalidf>:
 8006b5e:	eef0 7a40 	vmov.f32	s15, s0
 8006b62:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006b66:	eef4 7a67 	vcmp.f32	s15, s15
 8006b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b6e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8006b72:	d602      	bvs.n	8006b7a <__math_invalidf+0x1c>
 8006b74:	2021      	movs	r0, #33	; 0x21
 8006b76:	f7ff bfe7 	b.w	8006b48 <with_errnof>
 8006b7a:	4770      	bx	lr

08006b7c <_init>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	bf00      	nop
 8006b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b82:	bc08      	pop	{r3}
 8006b84:	469e      	mov	lr, r3
 8006b86:	4770      	bx	lr

08006b88 <_fini>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr
