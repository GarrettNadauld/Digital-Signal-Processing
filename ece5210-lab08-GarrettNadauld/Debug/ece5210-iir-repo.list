
ece5210-iir-repo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e5c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08006054  08006054  00007054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006080  08006080  0000807c  2**0
                  CONTENTS
  4 .ARM          00000000  08006080  08006080  0000807c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006080  08006080  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006080  08006080  00007080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006084  08006084  00007084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006088  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005270  2000007c  08006104  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200052ec  08006104  000082ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c233  00000000  00000000  000080aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224e  00000000  00000000  000142dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00016530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000875  00000000  00000000  00017058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db53  00000000  00000000  000178cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7c1  00000000  00000000  00045420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010cd63  00000000  00000000  00054be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161944  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c0c  00000000  00000000  00161988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00164594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000007c 	.word	0x2000007c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800603c 	.word	0x0800603c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000080 	.word	0x20000080
 8000234:	0800603c 	.word	0x0800603c

08000238 <H_ap>:

float d[(NS_TOT)*NUM_BQ_TAPS] = {0.0f};
float y[NS_TOT*NUM_BQ_TAPS] = {0.0f};
float w[NS_TOT][NUM_BQ_TAPS] = {0};

float H_ap(float x, float *b, float *a, uint16_t len_b, float *z) {
 8000238:	b480      	push	{r7}
 800023a:	b08b      	sub	sp, #44	@ 0x2c
 800023c:	af00      	add	r7, sp, #0
 800023e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000242:	6138      	str	r0, [r7, #16]
 8000244:	60f9      	str	r1, [r7, #12]
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	4613      	mov	r3, r2
 800024a:	817b      	strh	r3, [r7, #10]
    float sample_out_f = 0.0f;
 800024c:	f04f 0300 	mov.w	r3, #0
 8000250:	627b      	str	r3, [r7, #36]	@ 0x24

    z[0] = x;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	697a      	ldr	r2, [r7, #20]
 8000256:	601a      	str	r2, [r3, #0]

    for (int i = 1; i < len_b; i++) {
 8000258:	2301      	movs	r3, #1
 800025a:	623b      	str	r3, [r7, #32]
 800025c:	e018      	b.n	8000290 <H_ap+0x58>
        z[0] -= a[i] * z[i];
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	ed93 7a00 	vldr	s14, [r3]
 8000264:	6a3b      	ldr	r3, [r7, #32]
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	4413      	add	r3, r2
 800026c:	edd3 6a00 	vldr	s13, [r3]
 8000270:	6a3b      	ldr	r3, [r7, #32]
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	4413      	add	r3, r2
 8000278:	edd3 7a00 	vldr	s15, [r3]
 800027c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 1; i < len_b; i++) {
 800028a:	6a3b      	ldr	r3, [r7, #32]
 800028c:	3301      	adds	r3, #1
 800028e:	623b      	str	r3, [r7, #32]
 8000290:	897b      	ldrh	r3, [r7, #10]
 8000292:	6a3a      	ldr	r2, [r7, #32]
 8000294:	429a      	cmp	r2, r3
 8000296:	dbe2      	blt.n	800025e <H_ap+0x26>
    }

    for (int i = 0; i < len_b; i++) {
 8000298:	2300      	movs	r3, #0
 800029a:	61fb      	str	r3, [r7, #28]
 800029c:	e016      	b.n	80002cc <H_ap+0x94>
        sample_out_f += b[i] * z[i];
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	009b      	lsls	r3, r3, #2
 80002a2:	693a      	ldr	r2, [r7, #16]
 80002a4:	4413      	add	r3, r2
 80002a6:	ed93 7a00 	vldr	s14, [r3]
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	4413      	add	r3, r2
 80002b2:	edd3 7a00 	vldr	s15, [r3]
 80002b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002ba:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80002be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    for (int i = 0; i < len_b; i++) {
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	3301      	adds	r3, #1
 80002ca:	61fb      	str	r3, [r7, #28]
 80002cc:	897b      	ldrh	r3, [r7, #10]
 80002ce:	69fa      	ldr	r2, [r7, #28]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	dbe4      	blt.n	800029e <H_ap+0x66>
    }

    for(int i = 2; i>0; i--) {
 80002d4:	2302      	movs	r3, #2
 80002d6:	61bb      	str	r3, [r7, #24]
 80002d8:	e00f      	b.n	80002fa <H_ap+0xc2>
    	z[i] = z[i-1];
 80002da:	69ba      	ldr	r2, [r7, #24]
 80002dc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80002e0:	4413      	add	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	441a      	add	r2, r3
 80002e8:	69bb      	ldr	r3, [r7, #24]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	6879      	ldr	r1, [r7, #4]
 80002ee:	440b      	add	r3, r1
 80002f0:	6812      	ldr	r2, [r2, #0]
 80002f2:	601a      	str	r2, [r3, #0]
    for(int i = 2; i>0; i--) {
 80002f4:	69bb      	ldr	r3, [r7, #24]
 80002f6:	3b01      	subs	r3, #1
 80002f8:	61bb      	str	r3, [r7, #24]
 80002fa:	69bb      	ldr	r3, [r7, #24]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	dcec      	bgt.n	80002da <H_ap+0xa2>
    }

    return sample_out_f;
 8000300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000302:	ee07 3a90 	vmov	s15, r3
}
 8000306:	eeb0 0a67 	vmov.f32	s0, s15
 800030a:	372c      	adds	r7, #44	@ 0x2c
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <iir_sos>:

float iir_sos(float x, float *b , float *a, int num_stages) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	ed87 0a03 	vstr	s0, [r7, #12]
 800031e:	60b8      	str	r0, [r7, #8]
 8000320:	6079      	str	r1, [r7, #4]
 8000322:	603a      	str	r2, [r7, #0]
	float y = x;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	617b      	str	r3, [r7, #20]
	for(int i =0; i<num_stages; i++) {
 8000328:	2300      	movs	r3, #0
 800032a:	613b      	str	r3, [r7, #16]
 800032c:	e020      	b.n	8000370 <iir_sos+0x5c>
		y = H_ap(y, &b[3*i], &a[3*i], NUM_BQ_TAPS, w[i]);
 800032e:	693a      	ldr	r2, [r7, #16]
 8000330:	4613      	mov	r3, r2
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	4413      	add	r3, r2
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	461a      	mov	r2, r3
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	1898      	adds	r0, r3, r2
 800033e:	693a      	ldr	r2, [r7, #16]
 8000340:	4613      	mov	r3, r2
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	4413      	add	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	461a      	mov	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	1899      	adds	r1, r3, r2
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	4613      	mov	r3, r2
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	4413      	add	r3, r2
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4a0b      	ldr	r2, [pc, #44]	@ (8000388 <iir_sos+0x74>)
 800035a:	4413      	add	r3, r2
 800035c:	2203      	movs	r2, #3
 800035e:	ed97 0a05 	vldr	s0, [r7, #20]
 8000362:	f7ff ff69 	bl	8000238 <H_ap>
 8000366:	ed87 0a05 	vstr	s0, [r7, #20]
	for(int i =0; i<num_stages; i++) {
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	3301      	adds	r3, #1
 800036e:	613b      	str	r3, [r7, #16]
 8000370:	693a      	ldr	r2, [r7, #16]
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	429a      	cmp	r2, r3
 8000376:	dbda      	blt.n	800032e <iir_sos+0x1a>
	}
	return y;
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	ee07 3a90 	vmov	s15, r3
}
 800037e:	eeb0 0a67 	vmov.f32	s0, s15
 8000382:	3718      	adds	r7, #24
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000098 	.word	0x20000098

0800038c <process_sample>:


int16_t process_sample(int16_t sample_in)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	80fb      	strh	r3, [r7, #6]
    int16_t sample_out = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	82fb      	strh	r3, [r7, #22]
    float sample_in_f = (float)sample_in;
 800039a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800039e:	ee07 3a90 	vmov	s15, r3
 80003a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003a6:	edc7 7a04 	vstr	s15, [r7, #16]
    float sample_out_f = iir_sos(sample_in_f, b, a, NS_TOT);
 80003aa:	2204      	movs	r2, #4
 80003ac:	490a      	ldr	r1, [pc, #40]	@ (80003d8 <process_sample+0x4c>)
 80003ae:	480b      	ldr	r0, [pc, #44]	@ (80003dc <process_sample+0x50>)
 80003b0:	ed97 0a04 	vldr	s0, [r7, #16]
 80003b4:	f7ff ffae 	bl	8000314 <iir_sos>
 80003b8:	ed87 0a03 	vstr	s0, [r7, #12]
    
    sample_out = (int16_t)sample_out_f;
 80003bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80003c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80003c4:	ee17 3a90 	vmov	r3, s15
 80003c8:	82fb      	strh	r3, [r7, #22]
    return sample_out;
 80003ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3718      	adds	r7, #24
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000030 	.word	0x20000030
 80003dc:	20000000 	.word	0x20000000

080003e0 <main>:
#include "myaudio.h"

void SystemClock_Config(void);

int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e4:	f001 fee3 	bl	80021ae <HAL_Init>

  BSP_LED_Init(LED_RED);
 80003e8:	2000      	movs	r0, #0
 80003ea:	f001 fd05 	bl	8001df8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80003ee:	2001      	movs	r0, #1
 80003f0:	f001 fd02 	bl	8001df8 <BSP_LED_Init>
  BSP_LED_Off(LED_RED);
 80003f4:	2000      	movs	r0, #0
 80003f6:	f001 fd49 	bl	8001e8c <BSP_LED_Off>
  BSP_LED_On(LED_GREEN);
 80003fa:	2001      	movs	r0, #1
 80003fc:	f001 fd2c 	bl	8001e58 <BSP_LED_On>

  /* Configure the system clock */
  SystemClock_Config();
 8000400:	f000 f804 	bl	800040c <SystemClock_Config>

  audio_init();
 8000404:	f000 f8b6 	bl	8000574 <audio_init>
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <main+0x28>

0800040c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b0b8      	sub	sp, #224	@ 0xe0
 8000410:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b4f      	ldr	r3, [pc, #316]	@ (8000550 <SystemClock_Config+0x144>)
 8000414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000416:	4a4e      	ldr	r2, [pc, #312]	@ (8000550 <SystemClock_Config+0x144>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800041c:	6413      	str	r3, [r2, #64]	@ 0x40
 800041e:	4b4c      	ldr	r3, [pc, #304]	@ (8000550 <SystemClock_Config+0x144>)
 8000420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800042a:	4b4a      	ldr	r3, [pc, #296]	@ (8000554 <SystemClock_Config+0x148>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a49      	ldr	r2, [pc, #292]	@ (8000554 <SystemClock_Config+0x148>)
 8000430:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000434:	6013      	str	r3, [r2, #0]
 8000436:	4b47      	ldr	r3, [pc, #284]	@ (8000554 <SystemClock_Config+0x148>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000442:	2301      	movs	r3, #1
 8000444:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000448:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800044c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000450:	2302      	movs	r3, #2
 8000452:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000456:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800045a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800045e:	2319      	movs	r3, #25
 8000460:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000464:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800046c:	2302      	movs	r3, #2
 800046e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000472:	2304      	movs	r3, #4
 8000474:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000478:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800047c:	4618      	mov	r0, r3
 800047e:	f003 f9d5 	bl	800382c <HAL_RCC_OscConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d003      	beq.n	8000490 <SystemClock_Config+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000488:	215f      	movs	r1, #95	@ 0x5f
 800048a:	4833      	ldr	r0, [pc, #204]	@ (8000558 <SystemClock_Config+0x14c>)
 800048c:	f000 f86a 	bl	8000564 <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000490:	f003 f97c 	bl	800378c <HAL_PWREx_EnableOverDrive>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d003      	beq.n	80004a2 <SystemClock_Config+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 800049a:	2166      	movs	r1, #102	@ 0x66
 800049c:	482e      	ldr	r0, [pc, #184]	@ (8000558 <SystemClock_Config+0x14c>)
 800049e:	f000 f861 	bl	8000564 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a2:	230f      	movs	r3, #15
 80004a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a8:	2302      	movs	r3, #2
 80004aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80004b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80004b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80004bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80004c4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80004c8:	2107      	movs	r1, #7
 80004ca:	4618      	mov	r0, r3
 80004cc:	f003 fc66 	bl	8003d9c <HAL_RCC_ClockConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d003      	beq.n	80004de <SystemClock_Config+0xd2>
  {
    _Error_Handler(__FILE__, __LINE__);
 80004d6:	2174      	movs	r1, #116	@ 0x74
 80004d8:	481f      	ldr	r0, [pc, #124]	@ (8000558 <SystemClock_Config+0x14c>)
 80004da:	f000 f843 	bl	8000564 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 80004de:	4b1f      	ldr	r3, [pc, #124]	@ (800055c <SystemClock_Config+0x150>)
 80004e0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80004e2:	23c0      	movs	r3, #192	@ 0xc0
 80004e4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80004e6:	2302      	movs	r3, #2
 80004e8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 80004ea:	2303      	movs	r3, #3
 80004ec:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80004ee:	2300      	movs	r3, #0
 80004f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80004f2:	2301      	movs	r3, #1
 80004f4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80004f6:	2300      	movs	r3, #0
 80004f8:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80004fa:	2300      	movs	r3, #0
 80004fc:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80004fe:	2300      	movs	r3, #0
 8000500:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000502:	2300      	movs	r3, #0
 8000504:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000508:	f107 0308 	add.w	r3, r7, #8
 800050c:	4618      	mov	r0, r3
 800050e:	f003 fdd1 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d003      	beq.n	8000520 <SystemClock_Config+0x114>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000518:	2184      	movs	r1, #132	@ 0x84
 800051a:	480f      	ldr	r0, [pc, #60]	@ (8000558 <SystemClock_Config+0x14c>)
 800051c:	f000 f822 	bl	8000564 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000520:	f003 fdbc 	bl	800409c <HAL_RCC_GetHCLKFreq>
 8000524:	4603      	mov	r3, r0
 8000526:	4a0e      	ldr	r2, [pc, #56]	@ (8000560 <SystemClock_Config+0x154>)
 8000528:	fba2 2303 	umull	r2, r3, r2, r3
 800052c:	099b      	lsrs	r3, r3, #6
 800052e:	4618      	mov	r0, r3
 8000530:	f001 ff99 	bl	8002466 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000534:	2004      	movs	r0, #4
 8000536:	f001 ffa3 	bl	8002480 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000542:	f001 ff66 	bl	8002412 <HAL_NVIC_SetPriority>
}
 8000546:	bf00      	nop
 8000548:	37e0      	adds	r7, #224	@ 0xe0
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800
 8000554:	40007000 	.word	0x40007000
 8000558:	08006054 	.word	0x08006054
 800055c:	08080040 	.word	0x08080040
 8000560:	10624dd3 	.word	0x10624dd3

08000564 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 800056e:	bf00      	nop
 8000570:	e7fd      	b.n	800056e <_Error_Handler+0xa>
	...

08000574 <audio_init>:
///////////////////////////////////////////////////////////



void audio_init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
    haudio_out_sai.Instance = SAI1_Block_A;
 8000578:	4b37      	ldr	r3, [pc, #220]	@ (8000658 <audio_init+0xe4>)
 800057a:	4a38      	ldr	r2, [pc, #224]	@ (800065c <audio_init+0xe8>)
 800057c:	601a      	str	r2, [r3, #0]
    haudio_in_sai.Instance = SAI1_Block_B;
 800057e:	4b38      	ldr	r3, [pc, #224]	@ (8000660 <audio_init+0xec>)
 8000580:	4a38      	ldr	r2, [pc, #224]	@ (8000664 <audio_init+0xf0>)
 8000582:	601a      	str	r2, [r3, #0]

    fill_buffer_with_square_wave(playbackBuffer,
 8000584:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000588:	4837      	ldr	r0, [pc, #220]	@ (8000668 <audio_init+0xf4>)
 800058a:	f000 f883 	bl	8000694 <fill_buffer_with_square_wave>
                                 MY_BUFFER_SIZE_SAMPLES);

    ConvertSampleBufferToDMABuffer(playbackBuffer,
 800058e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000592:	4a36      	ldr	r2, [pc, #216]	@ (800066c <audio_init+0xf8>)
 8000594:	4934      	ldr	r1, [pc, #208]	@ (8000668 <audio_init+0xf4>)
 8000596:	4834      	ldr	r0, [pc, #208]	@ (8000668 <audio_init+0xf4>)
 8000598:	f000 f8b4 	bl	8000704 <ConvertSampleBufferToDMABuffer>
                                   playbackBuffer,
                                   saiDMATransmitBuffer,
                                   MY_BUFFER_SIZE_SAMPLES);

    My_SAI_ClockConfig(frequency);
 800059c:	4b34      	ldr	r3, [pc, #208]	@ (8000670 <audio_init+0xfc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f925 	bl	80007f0 <My_SAI_ClockConfig>

    My_AUDIO_OUT_MspInit();
 80005a6:	f000 f965 	bl	8000874 <My_AUDIO_OUT_MspInit>
    My_SAI_Out_Init(frequency);
 80005aa:	4b31      	ldr	r3, [pc, #196]	@ (8000670 <audio_init+0xfc>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f9fc 	bl	80009ac <My_SAI_Out_Init>

    My_AUDIO_IN_MspInit();
 80005b4:	f000 fa62 	bl	8000a7c <My_AUDIO_IN_MspInit>
    My_SAI_In_Init(frequency);
 80005b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000670 <audio_init+0xfc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fae3 	bl	8000b88 <My_SAI_In_Init>

    wm8994_Init(AUDIO_I2C_ADDRESS,
 80005c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000674 <audio_init+0x100>)
 80005c4:	781a      	ldrb	r2, [r3, #0]
 80005c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <audio_init+0xfc>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f240 3102 	movw	r1, #770	@ 0x302
 80005ce:	2034      	movs	r0, #52	@ 0x34
 80005d0:	f000 fc24 	bl	8000e1c <wm8994_Init>
                INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_HEADPHONE,
                volume, frequency);
    
    HAL_SAI_Transmit_DMA(&haudio_out_sai,
 80005d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005d8:	4924      	ldr	r1, [pc, #144]	@ (800066c <audio_init+0xf8>)
 80005da:	481f      	ldr	r0, [pc, #124]	@ (8000658 <audio_init+0xe4>)
 80005dc:	f005 fab0 	bl	8005b40 <HAL_SAI_Transmit_DMA>
                         (uint8_t*) saiDMATransmitBuffer,
                         MY_DMA_BUFFER_SIZE_MSIZES);
    HAL_SAI_Receive_DMA(&haudio_in_sai,
 80005e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005e4:	4924      	ldr	r1, [pc, #144]	@ (8000678 <audio_init+0x104>)
 80005e6:	481e      	ldr	r0, [pc, #120]	@ (8000660 <audio_init+0xec>)
 80005e8:	f005 fb38 	bl	8005c5c <HAL_SAI_Receive_DMA>
                        (uint8_t*) saiDMAReceiveBuffer,
                        MY_DMA_BUFFER_SIZE_MSIZES);
    
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80005ec:	4b23      	ldr	r3, [pc, #140]	@ (800067c <audio_init+0x108>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]

    while (1)
    {
        if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 80005f2:	4b22      	ldr	r3, [pc, #136]	@ (800067c <audio_init+0x108>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0fb      	beq.n	80005f2 <audio_init+0x7e>
        {
            if (audio_rec_buffer_state == BUFFER_OFFSET_HALF)
 80005fa:	4b20      	ldr	r3, [pc, #128]	@ (800067c <audio_init+0x108>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d113      	bne.n	800062a <audio_init+0xb6>
            {
                ExtractSamplesFromDMABuffer(
 8000602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000606:	491e      	ldr	r1, [pc, #120]	@ (8000680 <audio_init+0x10c>)
 8000608:	481b      	ldr	r0, [pc, #108]	@ (8000678 <audio_init+0x104>)
 800060a:	f000 f8a9 	bl	8000760 <ExtractSamplesFromDMABuffer>
                    &saiDMAReceiveBuffer[0],
                    &recordBuffer[0],
                    MY_BUFFER_SIZE_SAMPLES/2);

                CopySampleBuffer(
 800060e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000612:	491b      	ldr	r1, [pc, #108]	@ (8000680 <audio_init+0x10c>)
 8000614:	4814      	ldr	r0, [pc, #80]	@ (8000668 <audio_init+0xf4>)
 8000616:	f000 f8c7 	bl	80007a8 <CopySampleBuffer>
                    &playbackBuffer[0],
                    &recordBuffer[0],
                    MY_BUFFER_SIZE_SAMPLES / 2);

                ConvertSampleBufferToDMABuffer(
 800061a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800061e:	4a13      	ldr	r2, [pc, #76]	@ (800066c <audio_init+0xf8>)
 8000620:	4911      	ldr	r1, [pc, #68]	@ (8000668 <audio_init+0xf4>)
 8000622:	4817      	ldr	r0, [pc, #92]	@ (8000680 <audio_init+0x10c>)
 8000624:	f000 f86e 	bl	8000704 <ConvertSampleBufferToDMABuffer>
 8000628:	e012      	b.n	8000650 <audio_init+0xdc>
                    &saiDMATransmitBuffer[0],
                    MY_BUFFER_SIZE_SAMPLES / 2);
            }
            else
            {
                ExtractSamplesFromDMABuffer(
 800062a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800062e:	4915      	ldr	r1, [pc, #84]	@ (8000684 <audio_init+0x110>)
 8000630:	4815      	ldr	r0, [pc, #84]	@ (8000688 <audio_init+0x114>)
 8000632:	f000 f895 	bl	8000760 <ExtractSamplesFromDMABuffer>
                    &saiDMAReceiveBuffer[MY_DMA_BUFFER_SIZE_BYTES / 2],
                    &recordBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    MY_BUFFER_SIZE_SAMPLES/2);

                CopySampleBuffer(
 8000636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800063a:	4912      	ldr	r1, [pc, #72]	@ (8000684 <audio_init+0x110>)
 800063c:	4813      	ldr	r0, [pc, #76]	@ (800068c <audio_init+0x118>)
 800063e:	f000 f8b3 	bl	80007a8 <CopySampleBuffer>
                    &playbackBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    &recordBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    MY_BUFFER_SIZE_SAMPLES / 2);

                ConvertSampleBufferToDMABuffer(
 8000642:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000646:	4a12      	ldr	r2, [pc, #72]	@ (8000690 <audio_init+0x11c>)
 8000648:	4910      	ldr	r1, [pc, #64]	@ (800068c <audio_init+0x118>)
 800064a:	480e      	ldr	r0, [pc, #56]	@ (8000684 <audio_init+0x110>)
 800064c:	f000 f85a 	bl	8000704 <ConvertSampleBufferToDMABuffer>
                    &playbackBuffer[MY_BUFFER_SIZE_SAMPLES / 2],
                    &saiDMATransmitBuffer[MY_DMA_BUFFER_SIZE_BYTES / 2],
                    MY_BUFFER_SIZE_SAMPLES / 2);

            }
            audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <audio_init+0x108>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
        if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 8000656:	e7cc      	b.n	80005f2 <audio_init+0x7e>
 8000658:	2000514c 	.word	0x2000514c
 800065c:	40015804 	.word	0x40015804
 8000660:	200050c8 	.word	0x200050c8
 8000664:	40015824 	.word	0x40015824
 8000668:	200040c8 	.word	0x200040c8
 800066c:	200000c8 	.word	0x200000c8
 8000670:	20000060 	.word	0x20000060
 8000674:	20000064 	.word	0x20000064
 8000678:	200020c8 	.word	0x200020c8
 800067c:	200051d0 	.word	0x200051d0
 8000680:	200048c8 	.word	0x200048c8
 8000684:	20004cc8 	.word	0x20004cc8
 8000688:	200030c8 	.word	0x200030c8
 800068c:	200044c8 	.word	0x200044c8
 8000690:	200010c8 	.word	0x200010c8

08000694 <fill_buffer_with_square_wave>:



static void fill_buffer_with_square_wave(int16_t *buf,
                                         uint32_t num_samples)
{
 8000694:	b480      	push	{r7}
 8000696:	b089      	sub	sp, #36	@ 0x24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
    // Fill up a 100hz square wave
    // 48khz sample rate --> 480 samples in 100 hz --> toggle every 240 samples

    int toggle_period = 240;
 800069e:	23f0      	movs	r3, #240	@ 0xf0
 80006a0:	613b      	str	r3, [r7, #16]
    int count = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    int wave_state = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
    int magnitude = 30000;
 80006aa:	f247 5330 	movw	r3, #30000	@ 0x7530
 80006ae:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < num_samples; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	e01b      	b.n	80006ee <fill_buffer_with_square_wave+0x5a>
    {
        buf[i] = magnitude*wave_state;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	69bb      	ldr	r3, [r7, #24]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	fb12 f303 	smulbb	r3, r2, r3
 80006c2:	b299      	uxth	r1, r3
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	b20a      	sxth	r2, r1
 80006ce:	801a      	strh	r2, [r3, #0]
        count++;
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	3301      	adds	r3, #1
 80006d4:	61fb      	str	r3, [r7, #28]

        if (count >= toggle_period)
 80006d6:	69fa      	ldr	r2, [r7, #28]
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	429a      	cmp	r2, r3
 80006dc:	db04      	blt.n	80006e8 <fill_buffer_with_square_wave+0x54>
        {
            count = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
            wave_state = wave_state*(-1); // toggle here
 80006e2:	69bb      	ldr	r3, [r7, #24]
 80006e4:	425b      	negs	r3, r3
 80006e6:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < num_samples; i++)
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	3301      	adds	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d8df      	bhi.n	80006b6 <fill_buffer_with_square_wave+0x22>
        }
        
    }
}
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	3724      	adds	r7, #36	@ 0x24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <ConvertSampleBufferToDMABuffer>:
*/
static void ConvertSampleBufferToDMABuffer(int16_t *sampleInBuffer,
                                           int16_t *processOutBuffer,
                                           uint8_t *dmaBuffer,
                                           uint32_t num_samples)
{
 8000704:	b480      	push	{r7}
 8000706:	b087      	sub	sp, #28
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	e018      	b.n	800074a <ConvertSampleBufferToDMABuffer+0x46>
    {
        // samples are spaced 8 bytes apart
        int16_t *p = (int16_t *) &dmaBuffer[i*8];
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	613b      	str	r3, [r7, #16]
        *p = processOutBuffer[i]; // left channel
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	4413      	add	r3, r2
 800072a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	801a      	strh	r2, [r3, #0]

        /* right channel stuff */
#ifdef PASSTHROUGH_RIGHT
        *(p+2) = sampleInBuffer[i]; 
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	441a      	add	r2, r3
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	3304      	adds	r3, #4
 800073e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000742:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	3301      	adds	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	697a      	ldr	r2, [r7, #20]
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	429a      	cmp	r2, r3
 8000750:	d3e2      	bcc.n	8000718 <ConvertSampleBufferToDMABuffer+0x14>
#else
        *(p+2) = processOutBuffer[i];
#endif
    }
}
 8000752:	bf00      	nop
 8000754:	bf00      	nop
 8000756:	371c      	adds	r7, #28
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <ExtractSamplesFromDMABuffer>:
   for now just take 1 channel
*/
static void ExtractSamplesFromDMABuffer(uint8_t *dmaBuffer,
                                        int16_t *sampleBuffer,
                                        uint32_t num_samples)
{
 8000760:	b480      	push	{r7}
 8000762:	b087      	sub	sp, #28
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < num_samples; ++i)
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	e00f      	b.n	8000792 <ExtractSamplesFromDMABuffer+0x32>
    {
        int16_t * samplePointer = (int16_t *) &dmaBuffer[i*8];
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	4413      	add	r3, r2
 800077a:	613b      	str	r3, [r7, #16]
        sampleBuffer[i] = *samplePointer;
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	4413      	add	r3, r2
 8000784:	693a      	ldr	r2, [r7, #16]
 8000786:	f9b2 2000 	ldrsh.w	r2, [r2]
 800078a:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < num_samples; ++i)
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	3301      	adds	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	429a      	cmp	r2, r3
 8000798:	d3eb      	bcc.n	8000772 <ExtractSamplesFromDMABuffer+0x12>
    }
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	371c      	adds	r7, #28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <CopySampleBuffer>:

static void CopySampleBuffer(int16_t *dst, int16_t *src,
                             uint32_t num_samples)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b087      	sub	sp, #28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < num_samples; i++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	e011      	b.n	80007de <CopySampleBuffer+0x36>
          the process_sample() function is defined in ece5210.c

          the default is for a straight passthrough, but you can 
          modify it to do some signal processing
        */
        dst[i] = process_sample(src[i]);
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	4413      	add	r3, r2
 80007c2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	18d4      	adds	r4, r2, r3
 80007ce:	4608      	mov	r0, r1
 80007d0:	f7ff fddc 	bl	800038c <process_sample>
 80007d4:	4603      	mov	r3, r0
 80007d6:	8023      	strh	r3, [r4, #0]
    for (uint32_t i = 0; i < num_samples; i++)
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3301      	adds	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d3e9      	bcc.n	80007ba <CopySampleBuffer+0x12>
    }
}
 80007e6:	bf00      	nop
 80007e8:	bf00      	nop
 80007ea:	371c      	adds	r7, #28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}

080007f0 <My_SAI_ClockConfig>:


///////////////////////////////////////////////////////////

static void My_SAI_ClockConfig(uint32_t AudioFreq)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0a6      	sub	sp, #152	@ 0x98
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
    RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

    HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 fd19 	bl	8005234 <HAL_RCCEx_GetPeriphCLKConfig>

    /* Set the PLL configuration according to the audio frequency */
    if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8000808:	4293      	cmp	r3, r2
 800080a:	d009      	beq.n	8000820 <My_SAI_ClockConfig+0x30>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8000812:	4293      	cmp	r3, r2
 8000814:	d004      	beq.n	8000820 <My_SAI_ClockConfig+0x30>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800081c:	4293      	cmp	r3, r2
 800081e:	d112      	bne.n	8000846 <My_SAI_ClockConfig+0x56>
    {
        /* Configure PLLSAI prescalers */
        /* PLLSAI_VCO: VCO_429M
           SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
           SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz */
        rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000820:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000824:	60bb      	str	r3, [r7, #8]
        rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8000826:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800082a:	647b      	str	r3, [r7, #68]	@ 0x44
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 800082c:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8000830:	60fb      	str	r3, [r7, #12]
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8000832:	2302      	movs	r3, #2
 8000834:	617b      	str	r3, [r7, #20]
        rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8000836:	2313      	movs	r3, #19
 8000838:	62fb      	str	r3, [r7, #44]	@ 0x2c

        HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	4618      	mov	r0, r3
 8000840:	f003 fc38 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 8000844:	e012      	b.n	800086c <My_SAI_ClockConfig+0x7c>
    {
        /* SAI clock config
           PLLSAI_VCO: VCO_344M
           SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
           SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 49.142/1 = 49.142 Mhz */
        rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000846:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800084a:	60bb      	str	r3, [r7, #8]
        rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 800084c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000850:	647b      	str	r3, [r7, #68]	@ 0x44
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8000852:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8000856:	60fb      	str	r3, [r7, #12]
        rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8000858:	2307      	movs	r3, #7
 800085a:	617b      	str	r3, [r7, #20]
        rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 800085c:	2301      	movs	r3, #1
 800085e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fc25 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
    }
}
 800086a:	bf00      	nop
 800086c:	bf00      	nop
 800086e:	3798      	adds	r7, #152	@ 0x98
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <My_AUDIO_OUT_MspInit>:

static void My_AUDIO_OUT_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0
    static DMA_HandleTypeDef hdma_sai_tx;
    GPIO_InitTypeDef  gpio_init_structure;

    /* Enable SAI clock */
    AUDIO_OUT_SAIx_CLK_ENABLE();
 800087a:	4b46      	ldr	r3, [pc, #280]	@ (8000994 <My_AUDIO_OUT_MspInit+0x120>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	4a45      	ldr	r2, [pc, #276]	@ (8000994 <My_AUDIO_OUT_MspInit+0x120>)
 8000880:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000884:	6453      	str	r3, [r2, #68]	@ 0x44
 8000886:	4b43      	ldr	r3, [pc, #268]	@ (8000994 <My_AUDIO_OUT_MspInit+0x120>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

    /* Enable GPIO clock */
    AUDIO_OUT_SAIx_MCLK_ENABLE();
 8000892:	4b40      	ldr	r3, [pc, #256]	@ (8000994 <My_AUDIO_OUT_MspInit+0x120>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a3f      	ldr	r2, [pc, #252]	@ (8000994 <My_AUDIO_OUT_MspInit+0x120>)
 8000898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b3d      	ldr	r3, [pc, #244]	@ (8000994 <My_AUDIO_OUT_MspInit+0x120>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 80008aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000994 <My_AUDIO_OUT_MspInit+0x120>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a39      	ldr	r2, [pc, #228]	@ (8000994 <My_AUDIO_OUT_MspInit+0x120>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b37      	ldr	r3, [pc, #220]	@ (8000994 <My_AUDIO_OUT_MspInit+0x120>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0310 	and.w	r3, r3, #16
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 80008c2:	2370      	movs	r3, #112	@ 0x70
 80008c4:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 80008d2:	2306      	movs	r3, #6
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	482e      	ldr	r0, [pc, #184]	@ (8000998 <My_AUDIO_OUT_MspInit+0x124>)
 80008de:	f002 f9c1 	bl	8002c64 <HAL_GPIO_Init>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80008e2:	2380      	movs	r3, #128	@ 0x80
 80008e4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	482b      	ldr	r0, [pc, #172]	@ (800099c <My_AUDIO_OUT_MspInit+0x128>)
 80008ee:	f002 f9b9 	bl	8002c64 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80008f2:	4b28      	ldr	r3, [pc, #160]	@ (8000994 <My_AUDIO_OUT_MspInit+0x120>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a27      	ldr	r2, [pc, #156]	@ (8000994 <My_AUDIO_OUT_MspInit+0x120>)
 80008f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b25      	ldr	r3, [pc, #148]	@ (8000994 <My_AUDIO_OUT_MspInit+0x120>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800090a:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 8000912:	2240      	movs	r2, #64	@ 0x40
 8000914:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000916:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800091c:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 800091e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000922:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8000924:	4b1e      	ldr	r3, [pc, #120]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 8000926:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800092a:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 800092c:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 800092e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000932:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8000934:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 8000936:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800093a:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 800093e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000942:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8000944:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 8000946:	2204      	movs	r2, #4
 8000948:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 800094c:	2203      	movs	r2, #3
 800094e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000950:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 8000952:	2200      	movs	r2, #0
 8000954:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8000956:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 8000958:	2200      	movs	r2, #0
 800095a:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800095c:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 800095e:	4a11      	ldr	r2, [pc, #68]	@ (80009a4 <My_AUDIO_OUT_MspInit+0x130>)
 8000960:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_out_sai, hdmatx, hdma_sai_tx);
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <My_AUDIO_OUT_MspInit+0x134>)
 8000964:	4a0e      	ldr	r2, [pc, #56]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 8000966:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000968:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 800096a:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <My_AUDIO_OUT_MspInit+0x134>)
 800096c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 800096e:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 8000970:	f001 fe5e 	bl	8002630 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
 8000974:	480a      	ldr	r0, [pc, #40]	@ (80009a0 <My_AUDIO_OUT_MspInit+0x12c>)
 8000976:	f001 fdad 	bl	80024d4 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	210e      	movs	r1, #14
 800097e:	2039      	movs	r0, #57	@ 0x39
 8000980:	f001 fd47 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8000984:	2039      	movs	r0, #57	@ 0x39
 8000986:	f001 fd60 	bl	800244a <HAL_NVIC_EnableIRQ>
}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	@ 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40021000 	.word	0x40021000
 800099c:	40021800 	.word	0x40021800
 80009a0:	200051d4 	.word	0x200051d4
 80009a4:	40026428 	.word	0x40026428
 80009a8:	2000514c 	.word	0x2000514c

080009ac <My_SAI_Out_Init>:

static void My_SAI_Out_Init(uint32_t AudioFreq)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&haudio_out_sai);
 80009b4:	4b30      	ldr	r3, [pc, #192]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80009c2:	601a      	str	r2, [r3, #0]

    /* Configure SAI_Block_x
       LSBFirst: Disabled
       DataSize: 16 */
    haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 80009c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	@ 0x24
    haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80009ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	61d3      	str	r3, [r2, #28]
    haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 80009d0:	4b29      	ldr	r3, [pc, #164]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
    haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80009d6:	4b28      	ldr	r3, [pc, #160]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
    haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80009dc:	4b26      	ldr	r3, [pc, #152]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	631a      	str	r2, [r3, #48]	@ 0x30
    haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80009e2:	4b25      	ldr	r3, [pc, #148]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 80009e4:	2280      	movs	r2, #128	@ 0x80
 80009e6:	635a      	str	r2, [r3, #52]	@ 0x34
    haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80009e8:	4b23      	ldr	r3, [pc, #140]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	639a      	str	r2, [r3, #56]	@ 0x38
    haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80009ee:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80009f4:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
    haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 80009fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a00:	611a      	str	r2, [r3, #16]
    haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	619a      	str	r2, [r3, #24]
    haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
    haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	@ 0x28
    haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	62da      	str	r2, [r3, #44]	@ 0x2c
    haudio_out_sai.Init.Mckdiv         = 0;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
       Frame Length: 64
       Frame active Length: 32
       FS Definition: Start frame + Channel Side identification
       FS Polarity: FS active Low
       FS Offset: FS asserted one bit before the first bit of slot 0 */
    haudio_out_sai.FrameInit.FrameLength = 64;
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a22:	2240      	movs	r2, #64	@ 0x40
 8000a24:	641a      	str	r2, [r3, #64]	@ 0x40
    haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a28:	2220      	movs	r2, #32
 8000a2a:	645a      	str	r2, [r3, #68]	@ 0x44
    haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a2e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a32:	649a      	str	r2, [r3, #72]	@ 0x48
    haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000a34:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	64da      	str	r2, [r3, #76]	@ 0x4c
    haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a3c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a40:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Configure SAI Block_x Slot
       Slot First Bit Offset: 0
       Slot Size  : 16
       Slot Number: 4
       Slot Active: All slot actives */
    haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	655a      	str	r2, [r3, #84]	@ 0x54
    haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	659a      	str	r2, [r3, #88]	@ 0x58
    haudio_out_sai.SlotInit.SlotNumber = 4;
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a50:	2204      	movs	r2, #4
 8000a52:	65da      	str	r2, [r3, #92]	@ 0x5c
    haudio_out_sai.SlotInit.SlotActive = 0xF;
 8000a54:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a56:	220f      	movs	r2, #15
 8000a58:	661a      	str	r2, [r3, #96]	@ 0x60

    HAL_SAI_Init(&haudio_out_sai);
 8000a5a:	4807      	ldr	r0, [pc, #28]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a5c:	f004 fef0 	bl	8005840 <HAL_SAI_Init>

    /* Enable SAI peripheral to generate MCLK */
    __HAL_SAI_ENABLE(&haudio_out_sai);
 8000a60:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <My_SAI_Out_Init+0xcc>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000a6e:	601a      	str	r2, [r3, #0]

}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000514c 	.word	0x2000514c

08000a7c <My_AUDIO_IN_MspInit>:

static void My_AUDIO_IN_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
    static DMA_HandleTypeDef hdma_sai_rx;
    GPIO_InitTypeDef  gpio_init_structure;

    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 8000a82:	4b3c      	ldr	r3, [pc, #240]	@ (8000b74 <My_AUDIO_IN_MspInit+0xf8>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	4a3b      	ldr	r2, [pc, #236]	@ (8000b74 <My_AUDIO_IN_MspInit+0xf8>)
 8000a88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8e:	4b39      	ldr	r3, [pc, #228]	@ (8000b74 <My_AUDIO_IN_MspInit+0xf8>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 8000a9a:	4b36      	ldr	r3, [pc, #216]	@ (8000b74 <My_AUDIO_IN_MspInit+0xf8>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a35      	ldr	r2, [pc, #212]	@ (8000b74 <My_AUDIO_IN_MspInit+0xf8>)
 8000aa0:	f043 0310 	orr.w	r3, r3, #16
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b33      	ldr	r3, [pc, #204]	@ (8000b74 <My_AUDIO_IN_MspInit+0xf8>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0310 	and.w	r3, r3, #16
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4619      	mov	r1, r3
 8000acc:	482a      	ldr	r0, [pc, #168]	@ (8000b78 <My_AUDIO_IN_MspInit+0xfc>)
 8000ace:	f002 f8c9 	bl	8002c64 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8000ad2:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <My_AUDIO_IN_MspInit+0xf8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a27      	ldr	r2, [pc, #156]	@ (8000b74 <My_AUDIO_IN_MspInit+0xf8>)
 8000ad8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <My_AUDIO_IN_MspInit+0xf8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8000aea:	4b24      	ldr	r3, [pc, #144]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000aec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000af0:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000af2:	4b22      	ldr	r3, [pc, #136]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000af8:	4b20      	ldr	r3, [pc, #128]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000b00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b04:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8000b06:	4b1d      	ldr	r3, [pc, #116]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000b08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b0c:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000b10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b14:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8000b16:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000b18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b1c:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000b20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b24:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000b2e:	2203      	movs	r2, #3
 8000b30:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000b32:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8000b38:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000b40:	4a0f      	ldr	r2, [pc, #60]	@ (8000b80 <My_AUDIO_IN_MspInit+0x104>)
 8000b42:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_in_sai, hdmarx, hdma_sai_rx);
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <My_AUDIO_IN_MspInit+0x108>)
 8000b46:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000b48:	671a      	str	r2, [r3, #112]	@ 0x70
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b84 <My_AUDIO_IN_MspInit+0x108>)
 8000b4e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8000b50:	480a      	ldr	r0, [pc, #40]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000b52:	f001 fd6d 	bl	8002630 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8000b56:	4809      	ldr	r0, [pc, #36]	@ (8000b7c <My_AUDIO_IN_MspInit+0x100>)
 8000b58:	f001 fcbc 	bl	80024d4 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	210f      	movs	r1, #15
 8000b60:	203c      	movs	r0, #60	@ 0x3c
 8000b62:	f001 fc56 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8000b66:	203c      	movs	r0, #60	@ 0x3c
 8000b68:	f001 fc6f 	bl	800244a <HAL_NVIC_EnableIRQ>
}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	20005234 	.word	0x20005234
 8000b80:	40026470 	.word	0x40026470
 8000b84:	200050c8 	.word	0x200050c8

08000b88 <My_SAI_In_Init>:

static void My_SAI_In_Init(uint32_t AudioFreq)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    /* Initialize SAI1 block B in SLAVE RX synchronous from SAI1 block A */
    /* Initialize the haudio_in_sai Instance parameter */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8000b90:	4b31      	ldr	r3, [pc, #196]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000b92:	4a32      	ldr	r2, [pc, #200]	@ (8000c5c <My_SAI_In_Init+0xd4>)
 8000b94:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral to allow access to SAI internal registers */
    __HAL_SAI_DISABLE(&haudio_in_sai);
 8000b96:	4b30      	ldr	r3, [pc, #192]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000ba4:	601a      	str	r2, [r3, #0]

    /* Configure SAI_Block_x */
    haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	625a      	str	r2, [r3, #36]	@ 0x24
    haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8000bac:	4a2a      	ldr	r2, [pc, #168]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	61d3      	str	r3, [r2, #28]
    haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 8000bb2:	4b29      	ldr	r3, [pc, #164]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	605a      	str	r2, [r3, #4]
    haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8000bb8:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
    haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8000bbe:	4b26      	ldr	r3, [pc, #152]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	631a      	str	r2, [r3, #48]	@ 0x30
    haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 8000bc4:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000bc6:	2280      	movs	r2, #128	@ 0x80
 8000bc8:	635a      	str	r2, [r3, #52]	@ 0x34
    haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8000bca:	4b23      	ldr	r3, [pc, #140]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	639a      	str	r2, [r3, #56]	@ 0x38
    haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000bd0:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	63da      	str	r2, [r3, #60]	@ 0x3c
    haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 8000bd6:	4b20      	ldr	r3, [pc, #128]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	609a      	str	r2, [r3, #8]
    haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
    haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8000be2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	619a      	str	r2, [r3, #24]
    haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
    haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
    haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000bf6:	2210      	movs	r2, #16
 8000bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
    haudio_in_sai.Init.Mckdiv         = 0;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]

    /* Configure SAI_Block_x Frame */
    haudio_in_sai.FrameInit.FrameLength       = 64;
 8000c00:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000c02:	2240      	movs	r2, #64	@ 0x40
 8000c04:	641a      	str	r2, [r3, #64]	@ 0x40
    haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8000c06:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000c08:	2220      	movs	r2, #32
 8000c0a:	645a      	str	r2, [r3, #68]	@ 0x44
    haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000c0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c12:	649a      	str	r2, [r3, #72]	@ 0x48
    haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8000c14:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	64da      	str	r2, [r3, #76]	@ 0x4c
    haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000c1c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c20:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Configure SAI Block_x Slot */
    haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	655a      	str	r2, [r3, #84]	@ 0x54
    haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	659a      	str	r2, [r3, #88]	@ 0x58
    haudio_in_sai.SlotInit.SlotNumber     = 4;
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000c30:	2204      	movs	r2, #4
 8000c32:	65da      	str	r2, [r3, #92]	@ 0x5c
    haudio_in_sai.SlotInit.SlotActive     = 0xF;
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000c36:	220f      	movs	r2, #15
 8000c38:	661a      	str	r2, [r3, #96]	@ 0x60

    HAL_SAI_Init(&haudio_in_sai);
 8000c3a:	4807      	ldr	r0, [pc, #28]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000c3c:	f004 fe00 	bl	8005840 <HAL_SAI_Init>

    /* Enable SAI peripheral */
    __HAL_SAI_ENABLE(&haudio_in_sai);
 8000c40:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4b04      	ldr	r3, [pc, #16]	@ (8000c58 <My_SAI_In_Init+0xd0>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200050c8 	.word	0x200050c8
 8000c5c:	40015824 	.word	0x40015824

08000c60 <BSP_AUDIO_IN_TransferComplete_CallBack>:

void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
    audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8000c64:	4b03      	ldr	r3, [pc, #12]	@ (8000c74 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 8000c66:	2202      	movs	r2, #2
 8000c68:	601a      	str	r2, [r3, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	200051d0 	.word	0x200051d0

08000c78 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
    audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	@ (8000c8c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	200051d0 	.word	0x200051d0

08000c90 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32769i_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8000c98:	f7ff ffee 	bl	8000c78 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8000cac:	f7ff ffd8 	bl	8000c60 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <DMA2_Stream4_IRQHandler+0x14>)
 8000cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 fd61 	bl	8002788 <HAL_DMA_IRQHandler>
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200050c8 	.word	0x200050c8

08000cd0 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <DMA2_Stream1_IRQHandler+0x14>)
 8000cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 fd55 	bl	8002788 <HAL_DMA_IRQHandler>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000514c 	.word	0x2000514c

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f001 fb85 	bl	80023fc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f06f 000b 	mvn.w	r0, #11
 8000cfa:	f001 fb8a 	bl	8002412 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	f06f 000a 	mvn.w	r0, #10
 8000d06:	f001 fb84 	bl	8002412 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f06f 0009 	mvn.w	r0, #9
 8000d12:	f001 fb7e 	bl	8002412 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f06f 0004 	mvn.w	r0, #4
 8000d1e:	f001 fb78 	bl	8002412 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	f06f 0003 	mvn.w	r0, #3
 8000d2a:	f001 fb72 	bl	8002412 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	f06f 0001 	mvn.w	r0, #1
 8000d36:	f001 fb6c 	bl	8002412 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d42:	f001 fb66 	bl	8002412 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4e:	f001 fa57 	bl	8002200 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000d52:	f001 fbb1 	bl	80024b8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <SystemInit+0x5c>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d66:	4a14      	ldr	r2, [pc, #80]	@ (8000db8 <SystemInit+0x5c>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <SystemInit+0x60>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a11      	ldr	r2, [pc, #68]	@ (8000dbc <SystemInit+0x60>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <SystemInit+0x60>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <SystemInit+0x60>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	490d      	ldr	r1, [pc, #52]	@ (8000dbc <SystemInit+0x60>)
 8000d88:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <SystemInit+0x64>)
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <SystemInit+0x60>)
 8000d90:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc4 <SystemInit+0x68>)
 8000d92:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <SystemInit+0x60>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a08      	ldr	r2, [pc, #32]	@ (8000dbc <SystemInit+0x60>)
 8000d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <SystemInit+0x60>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000da6:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <SystemInit+0x5c>)
 8000da8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000dac:	609a      	str	r2, [r3, #8]
#endif
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	fef6ffff 	.word	0xfef6ffff
 8000dc4:	24003010 	.word	0x24003010

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dcc:	480d      	ldr	r0, [pc, #52]	@ (8000e04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dce:	490e      	ldr	r1, [pc, #56]	@ (8000e08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	@ (8000e0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0b      	ldr	r2, [pc, #44]	@ (8000e10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de4:	4c0b      	ldr	r4, [pc, #44]	@ (8000e14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000df2:	f7ff ffb3 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f005 f8fd 	bl	8005ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff faf1 	bl	80003e0 <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e00:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e0c:	08006088 	.word	0x08006088
  ldr r2, =_sbss
 8000e10:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e14:	200052ec 	.word	0x200052ec

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>
	...

08000e1c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	4603      	mov	r3, r0
 8000e26:	81fb      	strh	r3, [r7, #14]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	81bb      	strh	r3, [r7, #12]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000e34:	89bb      	ldrh	r3, [r7, #12]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000e3a:	89bb      	ldrh	r3, [r7, #12]
 8000e3c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000e40:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8000e46:	f001 f973 	bl	8002130 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000e4a:	89fb      	ldrh	r3, [r7, #14]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2203      	movs	r2, #3
 8000e50:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 ffb7 	bl	8001dc8 <CODEC_IO_Write>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	4413      	add	r3, r2
 8000e62:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f640 0117 	movw	r1, #2071	@ 0x817
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 ffaa 	bl	8001dc8 <CODEC_IO_Write>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8000e7e:	89fb      	ldrh	r3, [r7, #14]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 ff9d 	bl	8001dc8 <CODEC_IO_Write>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	4413      	add	r3, r2
 8000e96:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8000e98:	89fb      	ldrh	r3, [r7, #14]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	226c      	movs	r2, #108	@ 0x6c
 8000e9e:	2139      	movs	r1, #57	@ 0x39
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 ff91 	bl	8001dc8 <CODEC_IO_Write>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	4413      	add	r3, r2
 8000eae:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8000eb0:	8afb      	ldrh	r3, [r7, #22]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00c      	beq.n	8000ed0 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8000eb6:	89fb      	ldrh	r3, [r7, #14]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2213      	movs	r2, #19
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 ff82 	bl	8001dc8 <CODEC_IO_Write>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	4413      	add	r3, r2
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	e00b      	b.n	8000ee8 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8000ed0:	89fb      	ldrh	r3, [r7, #14]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 ff75 	bl	8001dc8 <CODEC_IO_Write>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8000ee8:	2032      	movs	r0, #50	@ 0x32
 8000eea:	f001 f955 	bl	8002198 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8000eee:	8b3b      	ldrh	r3, [r7, #24]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 815f 	beq.w	80011b4 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8000ef6:	4bae      	ldr	r3, [pc, #696]	@ (80011b0 <wm8994_Init+0x394>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8000efc:	8b3b      	ldrh	r3, [r7, #24]
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	f000 808c 	beq.w	800101c <wm8994_Init+0x200>
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	f300 8111 	bgt.w	800112c <wm8994_Init+0x310>
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d002      	beq.n	8000f14 <wm8994_Init+0xf8>
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d042      	beq.n	8000f98 <wm8994_Init+0x17c>
 8000f12:	e10b      	b.n	800112c <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000f14:	89fb      	ldrh	r3, [r7, #14]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8000f1c:	2105      	movs	r1, #5
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 ff52 	bl	8001dc8 <CODEC_IO_Write>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000f2e:	89fb      	ldrh	r3, [r7, #14]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2200      	movs	r2, #0
 8000f34:	f240 6101 	movw	r1, #1537	@ 0x601
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 ff45 	bl	8001dc8 <CODEC_IO_Write>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	4413      	add	r3, r2
 8000f46:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000f48:	89fb      	ldrh	r3, [r7, #14]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f240 6102 	movw	r1, #1538	@ 0x602
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 ff38 	bl	8001dc8 <CODEC_IO_Write>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	4413      	add	r3, r2
 8000f60:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000f62:	89fb      	ldrh	r3, [r7, #14]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2202      	movs	r2, #2
 8000f68:	f240 6104 	movw	r1, #1540	@ 0x604
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 ff2b 	bl	8001dc8 <CODEC_IO_Write>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	4413      	add	r3, r2
 8000f7a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000f7c:	89fb      	ldrh	r3, [r7, #14]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2202      	movs	r2, #2
 8000f82:	f240 6105 	movw	r1, #1541	@ 0x605
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 ff1e 	bl	8001dc8 <CODEC_IO_Write>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	4413      	add	r3, r2
 8000f94:	61fb      	str	r3, [r7, #28]
      break;
 8000f96:	e110      	b.n	80011ba <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000f98:	89fb      	ldrh	r3, [r7, #14]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	f240 3203 	movw	r2, #771	@ 0x303
 8000fa0:	2105      	movs	r1, #5
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 ff10 	bl	8001dc8 <CODEC_IO_Write>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	4413      	add	r3, r2
 8000fb0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000fb2:	89fb      	ldrh	r3, [r7, #14]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f240 6101 	movw	r1, #1537	@ 0x601
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 ff03 	bl	8001dc8 <CODEC_IO_Write>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	4413      	add	r3, r2
 8000fca:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000fcc:	89fb      	ldrh	r3, [r7, #14]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f240 6102 	movw	r1, #1538	@ 0x602
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fef6 	bl	8001dc8 <CODEC_IO_Write>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2200      	movs	r2, #0
 8000fec:	f240 6104 	movw	r1, #1540	@ 0x604
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fee9 	bl	8001dc8 <CODEC_IO_Write>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2200      	movs	r2, #0
 8001006:	f240 6105 	movw	r1, #1541	@ 0x605
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fedc 	bl	8001dc8 <CODEC_IO_Write>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	4413      	add	r3, r2
 8001018:	61fb      	str	r3, [r7, #28]
      break;
 800101a:	e0ce      	b.n	80011ba <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800101c:	8afb      	ldrh	r3, [r7, #22]
 800101e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001022:	d141      	bne.n	80010a8 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001024:	89fb      	ldrh	r3, [r7, #14]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800102c:	2105      	movs	r1, #5
 800102e:	4618      	mov	r0, r3
 8001030:	f000 feca 	bl	8001dc8 <CODEC_IO_Write>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	4413      	add	r3, r2
 800103c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2203      	movs	r2, #3
 8001044:	f240 6101 	movw	r1, #1537	@ 0x601
 8001048:	4618      	mov	r0, r3
 800104a:	f000 febd 	bl	8001dc8 <CODEC_IO_Write>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	4413      	add	r3, r2
 8001056:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8001058:	89fb      	ldrh	r3, [r7, #14]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2203      	movs	r2, #3
 800105e:	f240 6102 	movw	r1, #1538	@ 0x602
 8001062:	4618      	mov	r0, r3
 8001064:	f000 feb0 	bl	8001dc8 <CODEC_IO_Write>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	4413      	add	r3, r2
 8001070:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2203      	movs	r2, #3
 8001078:	f240 6104 	movw	r1, #1540	@ 0x604
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fea3 	bl	8001dc8 <CODEC_IO_Write>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	4413      	add	r3, r2
 800108a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 800108c:	89fb      	ldrh	r3, [r7, #14]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2203      	movs	r2, #3
 8001092:	f240 6105 	movw	r1, #1541	@ 0x605
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fe96 	bl	8001dc8 <CODEC_IO_Write>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	4413      	add	r3, r2
 80010a4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80010a6:	e088      	b.n	80011ba <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80010a8:	89fb      	ldrh	r3, [r7, #14]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80010b0:	2105      	movs	r1, #5
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fe88 	bl	8001dc8 <CODEC_IO_Write>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	4413      	add	r3, r2
 80010c0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2201      	movs	r2, #1
 80010c8:	f240 6101 	movw	r1, #1537	@ 0x601
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fe7b 	bl	8001dc8 <CODEC_IO_Write>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	4413      	add	r3, r2
 80010da:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80010dc:	89fb      	ldrh	r3, [r7, #14]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2201      	movs	r2, #1
 80010e2:	f240 6102 	movw	r1, #1538	@ 0x602
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fe6e 	bl	8001dc8 <CODEC_IO_Write>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	4413      	add	r3, r2
 80010f4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80010f6:	89fb      	ldrh	r3, [r7, #14]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2202      	movs	r2, #2
 80010fc:	f240 6104 	movw	r1, #1540	@ 0x604
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fe61 	bl	8001dc8 <CODEC_IO_Write>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	4413      	add	r3, r2
 800110e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8001110:	89fb      	ldrh	r3, [r7, #14]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2202      	movs	r2, #2
 8001116:	f240 6105 	movw	r1, #1541	@ 0x605
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fe54 	bl	8001dc8 <CODEC_IO_Write>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	4413      	add	r3, r2
 8001128:	61fb      	str	r3, [r7, #28]
      break;
 800112a:	e046      	b.n	80011ba <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800112c:	89fb      	ldrh	r3, [r7, #14]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f240 3203 	movw	r2, #771	@ 0x303
 8001134:	2105      	movs	r1, #5
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fe46 	bl	8001dc8 <CODEC_IO_Write>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	4413      	add	r3, r2
 8001144:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001146:	89fb      	ldrh	r3, [r7, #14]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2201      	movs	r2, #1
 800114c:	f240 6101 	movw	r1, #1537	@ 0x601
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fe39 	bl	8001dc8 <CODEC_IO_Write>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	4413      	add	r3, r2
 800115e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001160:	89fb      	ldrh	r3, [r7, #14]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2201      	movs	r2, #1
 8001166:	f240 6102 	movw	r1, #1538	@ 0x602
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fe2c 	bl	8001dc8 <CODEC_IO_Write>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	4413      	add	r3, r2
 8001178:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2200      	movs	r2, #0
 8001180:	f240 6104 	movw	r1, #1540	@ 0x604
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fe1f 	bl	8001dc8 <CODEC_IO_Write>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	4413      	add	r3, r2
 8001192:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001194:	89fb      	ldrh	r3, [r7, #14]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2200      	movs	r2, #0
 800119a:	f240 6105 	movw	r1, #1541	@ 0x605
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fe12 	bl	8001dc8 <CODEC_IO_Write>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	4413      	add	r3, r2
 80011ac:	61fb      	str	r3, [r7, #28]
      break;
 80011ae:	e004      	b.n	80011ba <wm8994_Init+0x39e>
 80011b0:	20005294 	.word	0x20005294
    }
  }
  else
  {
    outputEnabled = 0;
 80011b4:	4b99      	ldr	r3, [pc, #612]	@ (800141c <wm8994_Init+0x600>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80011ba:	8afb      	ldrh	r3, [r7, #22]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 81ab 	beq.w	8001518 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 80011c2:	4b97      	ldr	r3, [pc, #604]	@ (8001420 <wm8994_Init+0x604>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80011c8:	8afb      	ldrh	r3, [r7, #22]
 80011ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011ce:	f000 8129 	beq.w	8001424 <wm8994_Init+0x608>
 80011d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011d6:	f300 819b 	bgt.w	8001510 <wm8994_Init+0x6f4>
 80011da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80011de:	d05a      	beq.n	8001296 <wm8994_Init+0x47a>
 80011e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80011e4:	f300 8194 	bgt.w	8001510 <wm8994_Init+0x6f4>
 80011e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011ec:	f000 80c6 	beq.w	800137c <wm8994_Init+0x560>
 80011f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011f4:	f040 818c 	bne.w	8001510 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80011f8:	89fb      	ldrh	r3, [r7, #14]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8001200:	2104      	movs	r1, #4
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fde0 	bl	8001dc8 <CODEC_IO_Write>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	4413      	add	r3, r2
 8001210:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	22db      	movs	r2, #219	@ 0xdb
 8001218:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800121c:	4618      	mov	r0, r3
 800121e:	f000 fdd3 	bl	8001dc8 <CODEC_IO_Write>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	4413      	add	r3, r2
 800122a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 800122c:	89fb      	ldrh	r3, [r7, #14]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8001234:	2102      	movs	r1, #2
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fdc6 	bl	8001dc8 <CODEC_IO_Write>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	4413      	add	r3, r2
 8001244:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2202      	movs	r2, #2
 800124c:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fdb9 	bl	8001dc8 <CODEC_IO_Write>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	4413      	add	r3, r2
 800125e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8001260:	89fb      	ldrh	r3, [r7, #14]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2202      	movs	r2, #2
 8001266:	f240 6109 	movw	r1, #1545	@ 0x609
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fdac 	bl	8001dc8 <CODEC_IO_Write>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	4413      	add	r3, r2
 8001278:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	220e      	movs	r2, #14
 8001280:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fd9f 	bl	8001dc8 <CODEC_IO_Write>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	4413      	add	r3, r2
 8001292:	61fb      	str	r3, [r7, #28]
      break;
 8001294:	e143      	b.n	800151e <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2211      	movs	r2, #17
 800129c:	2128      	movs	r1, #40	@ 0x28
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fd92 	bl	8001dc8 <CODEC_IO_Write>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	4413      	add	r3, r2
 80012ac:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      //counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);

      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 80012ae:	89fb      	ldrh	r3, [r7, #14]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2220      	movs	r2, #32
 80012b4:	2129      	movs	r1, #41	@ 0x29
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fd86 	bl	8001dc8 <CODEC_IO_Write>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	4413      	add	r3, r2
 80012c4:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);

      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2220      	movs	r2, #32
 80012cc:	212a      	movs	r1, #42	@ 0x2a
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fd7a 	bl	8001dc8 <CODEC_IO_Write>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	4413      	add	r3, r2
 80012dc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80012de:	89fb      	ldrh	r3, [r7, #14]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	f240 3203 	movw	r2, #771	@ 0x303
 80012e6:	2104      	movs	r1, #4
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fd6d 	bl	8001dc8 <CODEC_IO_Write>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	4413      	add	r3, r2
 80012f6:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	22db      	movs	r2, #219	@ 0xdb
 80012fe:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fd60 	bl	8001dc8 <CODEC_IO_Write>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	4413      	add	r3, r2
 8001310:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8001312:	89fb      	ldrh	r3, [r7, #14]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f246 3250 	movw	r2, #25424	@ 0x6350
 800131a:	2102      	movs	r1, #2
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fd53 	bl	8001dc8 <CODEC_IO_Write>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	4413      	add	r3, r2
 800132a:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800132c:	89fb      	ldrh	r3, [r7, #14]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2202      	movs	r2, #2
 8001332:	f240 6106 	movw	r1, #1542	@ 0x606
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fd46 	bl	8001dc8 <CODEC_IO_Write>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	4413      	add	r3, r2
 8001344:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2202      	movs	r2, #2
 800134c:	f240 6107 	movw	r1, #1543	@ 0x607
 8001350:	4618      	mov	r0, r3
 8001352:	f000 fd39 	bl	8001dc8 <CODEC_IO_Write>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	4413      	add	r3, r2
 800135e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001360:	89fb      	ldrh	r3, [r7, #14]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	220d      	movs	r2, #13
 8001366:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fd2c 	bl	8001dc8 <CODEC_IO_Write>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	4413      	add	r3, r2
 8001378:	61fb      	str	r3, [r7, #28]
      break;
 800137a:	e0d0      	b.n	800151e <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 800137c:	89fb      	ldrh	r3, [r7, #14]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8001384:	2104      	movs	r1, #4
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fd1e 	bl	8001dc8 <CODEC_IO_Write>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	4413      	add	r3, r2
 8001394:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	22db      	movs	r2, #219	@ 0xdb
 800139c:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fd11 	bl	8001dc8 <CODEC_IO_Write>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	4413      	add	r3, r2
 80013ae:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	f246 3250 	movw	r2, #25424	@ 0x6350
 80013b8:	2102      	movs	r1, #2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fd04 	bl	8001dc8 <CODEC_IO_Write>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	4413      	add	r3, r2
 80013c8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2202      	movs	r2, #2
 80013d0:	f240 6106 	movw	r1, #1542	@ 0x606
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fcf7 	bl	8001dc8 <CODEC_IO_Write>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	4413      	add	r3, r2
 80013e2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80013e4:	89fb      	ldrh	r3, [r7, #14]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2202      	movs	r2, #2
 80013ea:	f240 6107 	movw	r1, #1543	@ 0x607
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fcea 	bl	8001dc8 <CODEC_IO_Write>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	4413      	add	r3, r2
 80013fc:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	220d      	movs	r2, #13
 8001404:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fcdd 	bl	8001dc8 <CODEC_IO_Write>
 800140e:	4603      	mov	r3, r0
 8001410:	461a      	mov	r2, r3
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	4413      	add	r3, r2
 8001416:	61fb      	str	r3, [r7, #28]
      break; 
 8001418:	e081      	b.n	800151e <wm8994_Init+0x702>
 800141a:	bf00      	nop
 800141c:	20005294 	.word	0x20005294
 8001420:	20005298 	.word	0x20005298
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8001424:	89fb      	ldrh	r3, [r7, #14]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f640 723c 	movw	r2, #3900	@ 0xf3c
 800142c:	2104      	movs	r1, #4
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fcca 	bl	8001dc8 <CODEC_IO_Write>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	4413      	add	r3, r2
 800143c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800143e:	89fb      	ldrh	r3, [r7, #14]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	22db      	movs	r2, #219	@ 0xdb
 8001444:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8001448:	4618      	mov	r0, r3
 800144a:	f000 fcbd 	bl	8001dc8 <CODEC_IO_Write>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	4413      	add	r3, r2
 8001456:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001458:	89fb      	ldrh	r3, [r7, #14]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	22db      	movs	r2, #219	@ 0xdb
 800145e:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fcb0 	bl	8001dc8 <CODEC_IO_Write>
 8001468:	4603      	mov	r3, r0
 800146a:	461a      	mov	r2, r3
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	4413      	add	r3, r2
 8001470:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8001472:	89fb      	ldrh	r3, [r7, #14]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 800147a:	2102      	movs	r1, #2
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fca3 	bl	8001dc8 <CODEC_IO_Write>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	4413      	add	r3, r2
 800148a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2202      	movs	r2, #2
 8001492:	f240 6106 	movw	r1, #1542	@ 0x606
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fc96 	bl	8001dc8 <CODEC_IO_Write>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	4413      	add	r3, r2
 80014a4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2202      	movs	r2, #2
 80014ac:	f240 6107 	movw	r1, #1543	@ 0x607
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fc89 	bl	8001dc8 <CODEC_IO_Write>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	4413      	add	r3, r2
 80014be:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80014c0:	89fb      	ldrh	r3, [r7, #14]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2202      	movs	r2, #2
 80014c6:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fc7c 	bl	8001dc8 <CODEC_IO_Write>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	4413      	add	r3, r2
 80014d8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2202      	movs	r2, #2
 80014e0:	f240 6109 	movw	r1, #1545	@ 0x609
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fc6f 	bl	8001dc8 <CODEC_IO_Write>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4413      	add	r3, r2
 80014f2:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	220d      	movs	r2, #13
 80014fa:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fc62 	bl	8001dc8 <CODEC_IO_Write>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	4413      	add	r3, r2
 800150c:	61fb      	str	r3, [r7, #28]
      break;    
 800150e:	e006      	b.n	800151e <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	3301      	adds	r3, #1
 8001514:	61fb      	str	r3, [r7, #28]
      break;
 8001516:	e002      	b.n	800151e <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8001518:	4bb1      	ldr	r3, [pc, #708]	@ (80017e0 <wm8994_Init+0x9c4>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4ab0      	ldr	r2, [pc, #704]	@ (80017e4 <wm8994_Init+0x9c8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d079      	beq.n	800161a <wm8994_Init+0x7fe>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4aae      	ldr	r2, [pc, #696]	@ (80017e4 <wm8994_Init+0x9c8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	f200 80ad 	bhi.w	800168a <wm8994_Init+0x86e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001536:	4293      	cmp	r3, r2
 8001538:	d061      	beq.n	80015fe <wm8994_Init+0x7e2>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001540:	4293      	cmp	r3, r2
 8001542:	f200 80a2 	bhi.w	800168a <wm8994_Init+0x86e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800154c:	4293      	cmp	r3, r2
 800154e:	f000 808e 	beq.w	800166e <wm8994_Init+0x852>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001558:	4293      	cmp	r3, r2
 800155a:	f200 8096 	bhi.w	800168a <wm8994_Init+0x86e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001564:	d03d      	beq.n	80015e2 <wm8994_Init+0x7c6>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800156c:	f200 808d 	bhi.w	800168a <wm8994_Init+0x86e>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001576:	4293      	cmp	r3, r2
 8001578:	d06b      	beq.n	8001652 <wm8994_Init+0x836>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001580:	4293      	cmp	r3, r2
 8001582:	f200 8082 	bhi.w	800168a <wm8994_Init+0x86e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800158c:	d01b      	beq.n	80015c6 <wm8994_Init+0x7aa>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001594:	d879      	bhi.n	800168a <wm8994_Init+0x86e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800159c:	d005      	beq.n	80015aa <wm8994_Init+0x78e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d046      	beq.n	8001636 <wm8994_Init+0x81a>
 80015a8:	e06f      	b.n	800168a <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80015aa:	89fb      	ldrh	r3, [r7, #14]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2203      	movs	r2, #3
 80015b0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 fc07 	bl	8001dc8 <CODEC_IO_Write>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	4413      	add	r3, r2
 80015c2:	61fb      	str	r3, [r7, #28]
    break;
 80015c4:	e06f      	b.n	80016a6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80015c6:	89fb      	ldrh	r3, [r7, #14]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2233      	movs	r2, #51	@ 0x33
 80015cc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fbf9 	bl	8001dc8 <CODEC_IO_Write>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	4413      	add	r3, r2
 80015de:	61fb      	str	r3, [r7, #28]
    break;
 80015e0:	e061      	b.n	80016a6 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80015e2:	89fb      	ldrh	r3, [r7, #14]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2263      	movs	r2, #99	@ 0x63
 80015e8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fbeb 	bl	8001dc8 <CODEC_IO_Write>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	4413      	add	r3, r2
 80015fa:	61fb      	str	r3, [r7, #28]
    break;
 80015fc:	e053      	b.n	80016a6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80015fe:	89fb      	ldrh	r3, [r7, #14]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2283      	movs	r2, #131	@ 0x83
 8001604:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fbdd 	bl	8001dc8 <CODEC_IO_Write>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	4413      	add	r3, r2
 8001616:	61fb      	str	r3, [r7, #28]
    break;
 8001618:	e045      	b.n	80016a6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800161a:	89fb      	ldrh	r3, [r7, #14]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	22a3      	movs	r2, #163	@ 0xa3
 8001620:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fbcf 	bl	8001dc8 <CODEC_IO_Write>
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	4413      	add	r3, r2
 8001632:	61fb      	str	r3, [r7, #28]
    break;
 8001634:	e037      	b.n	80016a6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8001636:	89fb      	ldrh	r3, [r7, #14]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2213      	movs	r2, #19
 800163c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fbc1 	bl	8001dc8 <CODEC_IO_Write>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	4413      	add	r3, r2
 800164e:	61fb      	str	r3, [r7, #28]
    break;
 8001650:	e029      	b.n	80016a6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8001652:	89fb      	ldrh	r3, [r7, #14]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2243      	movs	r2, #67	@ 0x43
 8001658:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fbb3 	bl	8001dc8 <CODEC_IO_Write>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	4413      	add	r3, r2
 800166a:	61fb      	str	r3, [r7, #28]
    break;
 800166c:	e01b      	b.n	80016a6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800166e:	89fb      	ldrh	r3, [r7, #14]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2273      	movs	r2, #115	@ 0x73
 8001674:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001678:	4618      	mov	r0, r3
 800167a:	f000 fba5 	bl	8001dc8 <CODEC_IO_Write>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4413      	add	r3, r2
 8001686:	61fb      	str	r3, [r7, #28]
    break; 
 8001688:	e00d      	b.n	80016a6 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800168a:	89fb      	ldrh	r3, [r7, #14]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2283      	movs	r2, #131	@ 0x83
 8001690:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001694:	4618      	mov	r0, r3
 8001696:	f000 fb97 	bl	8001dc8 <CODEC_IO_Write>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	4413      	add	r3, r2
 80016a2:	61fb      	str	r3, [r7, #28]
    break; 
 80016a4:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80016a6:	8afb      	ldrh	r3, [r7, #22]
 80016a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016ac:	d10e      	bne.n	80016cc <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80016ae:	89fb      	ldrh	r3, [r7, #14]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f244 0218 	movw	r2, #16408	@ 0x4018
 80016b6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fb84 	bl	8001dc8 <CODEC_IO_Write>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	4413      	add	r3, r2
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	e00d      	b.n	80016e8 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80016cc:	89fb      	ldrh	r3, [r7, #14]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f244 0210 	movw	r2, #16400	@ 0x4010
 80016d4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fb75 	bl	8001dc8 <CODEC_IO_Write>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	4413      	add	r3, r2
 80016e6:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80016e8:	89fb      	ldrh	r3, [r7, #14]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2200      	movs	r2, #0
 80016ee:	f240 3102 	movw	r1, #770	@ 0x302
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fb68 	bl	8001dc8 <CODEC_IO_Write>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	4413      	add	r3, r2
 8001700:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8001702:	89fb      	ldrh	r3, [r7, #14]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	220a      	movs	r2, #10
 8001708:	f44f 7102 	mov.w	r1, #520	@ 0x208
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fb5b 	bl	8001dc8 <CODEC_IO_Write>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	4413      	add	r3, r2
 800171a:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 800171c:	89fb      	ldrh	r3, [r7, #14]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2201      	movs	r2, #1
 8001722:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fb4e 	bl	8001dc8 <CODEC_IO_Write>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	4413      	add	r3, r2
 8001734:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8001736:	8b3b      	ldrh	r3, [r7, #24]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 8123 	beq.w	8001984 <wm8994_Init+0xb68>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001746:	2103      	movs	r1, #3
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fb3d 	bl	8001dc8 <CODEC_IO_Write>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	4413      	add	r3, r2
 8001756:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8001758:	89fb      	ldrh	r3, [r7, #14]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2200      	movs	r2, #0
 800175e:	2122      	movs	r1, #34	@ 0x22
 8001760:	4618      	mov	r0, r3
 8001762:	f000 fb31 	bl	8001dc8 <CODEC_IO_Write>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	4413      	add	r3, r2
 800176e:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8001770:	89fb      	ldrh	r3, [r7, #14]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2200      	movs	r2, #0
 8001776:	2123      	movs	r1, #35	@ 0x23
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fb25 	bl	8001dc8 <CODEC_IO_Write>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	4413      	add	r3, r2
 8001786:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8001788:	89fb      	ldrh	r3, [r7, #14]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001790:	2136      	movs	r1, #54	@ 0x36
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fb18 	bl	8001dc8 <CODEC_IO_Write>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80017a2:	89fb      	ldrh	r3, [r7, #14]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f243 0203 	movw	r2, #12291	@ 0x3003
 80017aa:	2101      	movs	r1, #1
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fb0b 	bl	8001dc8 <CODEC_IO_Write>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	4413      	add	r3, r2
 80017ba:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80017bc:	8afb      	ldrh	r3, [r7, #22]
 80017be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017c2:	d111      	bne.n	80017e8 <wm8994_Init+0x9cc>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80017c4:	89fb      	ldrh	r3, [r7, #14]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f240 2205 	movw	r2, #517	@ 0x205
 80017cc:	2151      	movs	r1, #81	@ 0x51
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fafa 	bl	8001dc8 <CODEC_IO_Write>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	4413      	add	r3, r2
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	e00f      	b.n	8001800 <wm8994_Init+0x9e4>
 80017e0:	20005298 	.word	0x20005298
 80017e4:	00017700 	.word	0x00017700
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80017e8:	89fb      	ldrh	r3, [r7, #14]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2205      	movs	r2, #5
 80017ee:	2151      	movs	r1, #81	@ 0x51
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fae9 	bl	8001dc8 <CODEC_IO_Write>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8001800:	8b7b      	ldrh	r3, [r7, #26]
 8001802:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8001806:	f043 0303 	orr.w	r3, r3, #3
 800180a:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	8b7a      	ldrh	r2, [r7, #26]
 8001812:	2101      	movs	r1, #1
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fad7 	bl	8001dc8 <CODEC_IO_Write>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	4413      	add	r3, r2
 8001822:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8001824:	89fb      	ldrh	r3, [r7, #14]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2222      	movs	r2, #34	@ 0x22
 800182a:	2160      	movs	r1, #96	@ 0x60
 800182c:	4618      	mov	r0, r3
 800182e:	f000 facb 	bl	8001dc8 <CODEC_IO_Write>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 800183c:	89fb      	ldrh	r3, [r7, #14]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8001844:	214c      	movs	r1, #76	@ 0x4c
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fabe 	bl	8001dc8 <CODEC_IO_Write>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	4413      	add	r3, r2
 8001854:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8001856:	200f      	movs	r0, #15
 8001858:	f000 fc9e 	bl	8002198 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2201      	movs	r2, #1
 8001862:	212d      	movs	r1, #45	@ 0x2d
 8001864:	4618      	mov	r0, r3
 8001866:	f000 faaf 	bl	8001dc8 <CODEC_IO_Write>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	4413      	add	r3, r2
 8001872:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8001874:	89fb      	ldrh	r3, [r7, #14]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2201      	movs	r2, #1
 800187a:	212e      	movs	r1, #46	@ 0x2e
 800187c:	4618      	mov	r0, r3
 800187e:	f000 faa3 	bl	8001dc8 <CODEC_IO_Write>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	4413      	add	r3, r2
 800188a:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 800188c:	89fb      	ldrh	r3, [r7, #14]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8001894:	2103      	movs	r1, #3
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fa96 	bl	8001dc8 <CODEC_IO_Write>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	4413      	add	r3, r2
 80018a4:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 80018a6:	89fb      	ldrh	r3, [r7, #14]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2233      	movs	r2, #51	@ 0x33
 80018ac:	2154      	movs	r1, #84	@ 0x54
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fa8a 	bl	8001dc8 <CODEC_IO_Write>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	4413      	add	r3, r2
 80018bc:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(250);
 80018be:	20fa      	movs	r0, #250	@ 0xfa
 80018c0:	f000 fc6a 	bl	8002198 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80018c4:	89fb      	ldrh	r3, [r7, #14]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	22ee      	movs	r2, #238	@ 0xee
 80018ca:	2160      	movs	r1, #96	@ 0x60
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fa7b 	bl	8001dc8 <CODEC_IO_Write>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80018dc:	89fb      	ldrh	r3, [r7, #14]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	22c0      	movs	r2, #192	@ 0xc0
 80018e2:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fa6e 	bl	8001dc8 <CODEC_IO_Write>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	4413      	add	r3, r2
 80018f4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80018f6:	89fb      	ldrh	r3, [r7, #14]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	22c0      	movs	r2, #192	@ 0xc0
 80018fc:	f240 6111 	movw	r1, #1553	@ 0x611
 8001900:	4618      	mov	r0, r3
 8001902:	f000 fa61 	bl	8001dc8 <CODEC_IO_Write>
 8001906:	4603      	mov	r3, r0
 8001908:	461a      	mov	r2, r3
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	4413      	add	r3, r2
 800190e:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2200      	movs	r2, #0
 8001916:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800191a:	4618      	mov	r0, r3
 800191c:	f000 fa54 	bl	8001dc8 <CODEC_IO_Write>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4413      	add	r3, r2
 8001928:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 800192a:	89fb      	ldrh	r3, [r7, #14]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	22c0      	movs	r2, #192	@ 0xc0
 8001930:	f240 6112 	movw	r1, #1554	@ 0x612
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fa47 	bl	8001dc8 <CODEC_IO_Write>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8001944:	89fb      	ldrh	r3, [r7, #14]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	22c0      	movs	r2, #192	@ 0xc0
 800194a:	f240 6113 	movw	r1, #1555	@ 0x613
 800194e:	4618      	mov	r0, r3
 8001950:	f000 fa3a 	bl	8001dc8 <CODEC_IO_Write>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	4413      	add	r3, r2
 800195c:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 800195e:	89fb      	ldrh	r3, [r7, #14]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2200      	movs	r2, #0
 8001964:	f240 4122 	movw	r1, #1058	@ 0x422
 8001968:	4618      	mov	r0, r3
 800196a:	f000 fa2d 	bl	8001dc8 <CODEC_IO_Write>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	4413      	add	r3, r2
 8001976:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001978:	7afa      	ldrb	r2, [r7, #11]
 800197a:	89fb      	ldrh	r3, [r7, #14]
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f8b0 	bl	8001ae4 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8001984:	8afb      	ldrh	r3, [r7, #22]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80a6 	beq.w	8001ad8 <wm8994_Init+0xcbc>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 800198c:	8afb      	ldrh	r3, [r7, #22]
 800198e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001992:	d003      	beq.n	800199c <wm8994_Init+0xb80>
 8001994:	8afb      	ldrh	r3, [r7, #22]
 8001996:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800199a:	d12b      	bne.n	80019f4 <wm8994_Init+0xbd8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 800199c:	8b7b      	ldrh	r3, [r7, #26]
 800199e:	f043 0313 	orr.w	r3, r3, #19
 80019a2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80019a4:	89fb      	ldrh	r3, [r7, #14]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	8b7a      	ldrh	r2, [r7, #26]
 80019aa:	2101      	movs	r1, #1
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fa0b 	bl	8001dc8 <CODEC_IO_Write>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	4413      	add	r3, r2
 80019ba:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80019bc:	89fb      	ldrh	r3, [r7, #14]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2202      	movs	r2, #2
 80019c2:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f9fe 	bl	8001dc8 <CODEC_IO_Write>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	4413      	add	r3, r2
 80019d4:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80019d6:	89fb      	ldrh	r3, [r7, #14]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80019de:	f240 4111 	movw	r1, #1041	@ 0x411
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f9f0 	bl	8001dc8 <CODEC_IO_Write>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	4413      	add	r3, r2
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e06b      	b.n	8001acc <wm8994_Init+0xcb0>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80019f4:	8afb      	ldrh	r3, [r7, #22]
 80019f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80019fa:	d139      	bne.n	8001a70 <wm8994_Init+0xc54>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80019fc:	8b7b      	ldrh	r3, [r7, #26]
 80019fe:	f043 0313 	orr.w	r3, r3, #19
 8001a02:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001a04:	89fb      	ldrh	r3, [r7, #14]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	8b7a      	ldrh	r2, [r7, #26]
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 f9db 	bl	8001dc8 <CODEC_IO_Write>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	4413      	add	r3, r2
 8001a1a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001a1c:	89fb      	ldrh	r3, [r7, #14]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2202      	movs	r2, #2
 8001a22:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f9ce 	bl	8001dc8 <CODEC_IO_Write>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	4413      	add	r3, r2
 8001a34:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001a36:	89fb      	ldrh	r3, [r7, #14]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001a3e:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f9c0 	bl	8001dc8 <CODEC_IO_Write>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	4413      	add	r3, r2
 8001a50:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8001a52:	89fb      	ldrh	r3, [r7, #14]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001a5a:	f240 4111 	movw	r1, #1041	@ 0x411
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f9b2 	bl	8001dc8 <CODEC_IO_Write>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	e02d      	b.n	8001acc <wm8994_Init+0xcb0>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8001a70:	8afb      	ldrh	r3, [r7, #22]
 8001a72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001a76:	d003      	beq.n	8001a80 <wm8994_Init+0xc64>
 8001a78:	8afb      	ldrh	r3, [r7, #22]
 8001a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a7e:	d125      	bne.n	8001acc <wm8994_Init+0xcb0>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8001a80:	89fb      	ldrh	r3, [r7, #14]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	220b      	movs	r2, #11
 8001a86:	2118      	movs	r1, #24
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f99d 	bl	8001dc8 <CODEC_IO_Write>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	4413      	add	r3, r2
 8001a96:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8001a98:	89fb      	ldrh	r3, [r7, #14]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	220b      	movs	r2, #11
 8001a9e:	211a      	movs	r1, #26
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f991 	bl	8001dc8 <CODEC_IO_Write>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	4413      	add	r3, r2
 8001aae:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001ab0:	89fb      	ldrh	r3, [r7, #14]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001ab8:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 f983 	bl	8001dc8 <CODEC_IO_Write>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	4413      	add	r3, r2
 8001aca:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001acc:	7afa      	ldrb	r2, [r7, #11]
 8001ace:	89fb      	ldrh	r3, [r7, #14]
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f806 	bl	8001ae4 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8001ad8:	69fb      	ldr	r3, [r7, #28]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3720      	adds	r7, #32
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop

08001ae4 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	460a      	mov	r2, r1
 8001aee:	80fb      	strh	r3, [r7, #6]
 8001af0:	4613      	mov	r3, r2
 8001af2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001af8:	797b      	ldrb	r3, [r7, #5]
 8001afa:	2b64      	cmp	r3, #100	@ 0x64
 8001afc:	d80b      	bhi.n	8001b16 <wm8994_SetVolume+0x32>
 8001afe:	797a      	ldrb	r2, [r7, #5]
 8001b00:	4613      	mov	r3, r2
 8001b02:	019b      	lsls	r3, r3, #6
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	4a86      	ldr	r2, [pc, #536]	@ (8001d20 <wm8994_SetVolume+0x23c>)
 8001b08:	fb82 1203 	smull	r1, r2, r2, r3
 8001b0c:	1152      	asrs	r2, r2, #5
 8001b0e:	17db      	asrs	r3, r3, #31
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	e000      	b.n	8001b18 <wm8994_SetVolume+0x34>
 8001b16:	2364      	movs	r3, #100	@ 0x64
 8001b18:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8001b1a:	4b82      	ldr	r3, [pc, #520]	@ (8001d24 <wm8994_SetVolume+0x240>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 809b 	beq.w	8001c5a <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8001b24:	7afb      	ldrb	r3, [r7, #11]
 8001b26:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b28:	d93d      	bls.n	8001ba6 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f8fc 	bl	8001d2c <wm8994_SetMute>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4413      	add	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f240 127f 	movw	r2, #383	@ 0x17f
 8001b44:	211c      	movs	r1, #28
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f93e 	bl	8001dc8 <CODEC_IO_Write>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f240 127f 	movw	r2, #383	@ 0x17f
 8001b5e:	211d      	movs	r1, #29
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 f931 	bl	8001dc8 <CODEC_IO_Write>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f240 127f 	movw	r2, #383	@ 0x17f
 8001b78:	2126      	movs	r1, #38	@ 0x26
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f924 	bl	8001dc8 <CODEC_IO_Write>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f240 127f 	movw	r2, #383	@ 0x17f
 8001b92:	2127      	movs	r1, #39	@ 0x27
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 f917 	bl	8001dc8 <CODEC_IO_Write>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	e059      	b.n	8001c5a <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8001ba6:	797b      	ldrb	r3, [r7, #5]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	2101      	movs	r1, #1
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 f8bb 	bl	8001d2c <wm8994_SetMute>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	e04c      	b.n	8001c5a <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 f8b1 	bl	8001d2c <wm8994_SetMute>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	b2d8      	uxtb	r0, r3
 8001bd6:	7afb      	ldrb	r3, [r7, #11]
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	211c      	movs	r1, #28
 8001be6:	f000 f8ef 	bl	8001dc8 <CODEC_IO_Write>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	b2d8      	uxtb	r0, r3
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	211d      	movs	r1, #29
 8001c08:	f000 f8de 	bl	8001dc8 <CODEC_IO_Write>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	b2d8      	uxtb	r0, r3
 8001c1a:	7afb      	ldrb	r3, [r7, #11]
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	2126      	movs	r1, #38	@ 0x26
 8001c2a:	f000 f8cd 	bl	8001dc8 <CODEC_IO_Write>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	461a      	mov	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4413      	add	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	b2d8      	uxtb	r0, r3
 8001c3c:	7afb      	ldrb	r3, [r7, #11]
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2127      	movs	r1, #39	@ 0x27
 8001c4c:	f000 f8bc 	bl	8001dc8 <CODEC_IO_Write>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8001c5a:	4b33      	ldr	r3, [pc, #204]	@ (8001d28 <wm8994_SetVolume+0x244>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d059      	beq.n	8001d16 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8001c62:	797b      	ldrb	r3, [r7, #5]
 8001c64:	2b63      	cmp	r3, #99	@ 0x63
 8001c66:	d80c      	bhi.n	8001c82 <wm8994_SetVolume+0x19e>
 8001c68:	797a      	ldrb	r2, [r7, #5]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	4a2b      	ldr	r2, [pc, #172]	@ (8001d20 <wm8994_SetVolume+0x23c>)
 8001c74:	fb82 1203 	smull	r1, r2, r2, r3
 8001c78:	1152      	asrs	r2, r2, #5
 8001c7a:	17db      	asrs	r3, r3, #31
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	e000      	b.n	8001c84 <wm8994_SetVolume+0x1a0>
 8001c82:	23ef      	movs	r3, #239	@ 0xef
 8001c84:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	b2d8      	uxtb	r0, r3
 8001c8a:	7afb      	ldrb	r3, [r7, #11]
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c9c:	f000 f894 	bl	8001dc8 <CODEC_IO_Write>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	b2d8      	uxtb	r0, r3
 8001cae:	7afb      	ldrb	r3, [r7, #11]
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	f240 4101 	movw	r1, #1025	@ 0x401
 8001cc0:	f000 f882 	bl	8001dc8 <CODEC_IO_Write>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	b2d8      	uxtb	r0, r3
 8001cd2:	7afb      	ldrb	r3, [r7, #11]
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f240 4104 	movw	r1, #1028	@ 0x404
 8001ce4:	f000 f870 	bl	8001dc8 <CODEC_IO_Write>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	b2d8      	uxtb	r0, r3
 8001cf6:	7afb      	ldrb	r3, [r7, #11]
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	f240 4105 	movw	r1, #1029	@ 0x405
 8001d08:	f000 f85e 	bl	8001dc8 <CODEC_IO_Write>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	51eb851f 	.word	0x51eb851f
 8001d24:	20005294 	.word	0x20005294
 8001d28:	20005298 	.word	0x20005298

08001d2c <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8001d3c:	4b21      	ldr	r3, [pc, #132]	@ (8001dc4 <wm8994_SetMute+0x98>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d039      	beq.n	8001db8 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d11c      	bne.n	8001d84 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d52:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f836 	bl	8001dc8 <CODEC_IO_Write>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d6e:	f240 4122 	movw	r1, #1058	@ 0x422
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f828 	bl	8001dc8 <CODEC_IO_Write>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	e019      	b.n	8001db8 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f81a 	bl	8001dc8 <CODEC_IO_Write>
 8001d94:	4603      	mov	r3, r0
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2200      	movs	r2, #0
 8001da4:	f240 4122 	movw	r1, #1058	@ 0x422
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f80d 	bl	8001dc8 <CODEC_IO_Write>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4413      	add	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8001db8:	68fb      	ldr	r3, [r7, #12]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20005294 	.word	0x20005294

08001dc8 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	80bb      	strh	r3, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	88b9      	ldrh	r1, [r7, #4]
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 f9ad 	bl	8002144 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	b2db      	uxtb	r3, r3
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <BSP_LED_Init+0x54>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a11      	ldr	r2, [pc, #68]	@ (8001e4c <BSP_LED_Init+0x54>)
 8001e08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <BSP_LED_Init+0x54>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e50 <BSP_LED_Init+0x58>)
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	4a08      	ldr	r2, [pc, #32]	@ (8001e54 <BSP_LED_Init+0x5c>)
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	f107 020c 	add.w	r2, r7, #12
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 ff10 	bl	8002c64 <HAL_GPIO_Init>

}
 8001e44:	bf00      	nop
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	2000006c 	.word	0x2000006c
 8001e54:	20000074 	.word	0x20000074

08001e58 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	4a07      	ldr	r2, [pc, #28]	@ (8001e84 <BSP_LED_On+0x2c>)
 8001e66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	4a06      	ldr	r2, [pc, #24]	@ (8001e88 <BSP_LED_On+0x30>)
 8001e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2201      	movs	r2, #1
 8001e76:	4619      	mov	r1, r3
 8001e78:	f001 f8a0 	bl	8002fbc <HAL_GPIO_WritePin>
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000074 	.word	0x20000074
 8001e88:	2000006c 	.word	0x2000006c

08001e8c <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	4a07      	ldr	r2, [pc, #28]	@ (8001eb8 <BSP_LED_Off+0x2c>)
 8001e9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	4a06      	ldr	r2, [pc, #24]	@ (8001ebc <BSP_LED_Off+0x30>)
 8001ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f001 f886 	bl	8002fbc <HAL_GPIO_WritePin>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000074 	.word	0x20000074
 8001ebc:	2000006c 	.word	0x2000006c

08001ec0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08c      	sub	sp, #48	@ 0x30
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a58      	ldr	r2, [pc, #352]	@ (800202c <I2Cx_MspInit+0x16c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d15b      	bne.n	8001f88 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8001ed0:	4b57      	ldr	r3, [pc, #348]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed4:	4a56      	ldr	r2, [pc, #344]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001ed6:	f043 0308 	orr.w	r3, r3, #8
 8001eda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001edc:	4b54      	ldr	r3, [pc, #336]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8001ee8:	4b51      	ldr	r3, [pc, #324]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eec:	4a50      	ldr	r2, [pc, #320]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001eee:	f043 0302 	orr.w	r3, r3, #2
 8001ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef4:	4b4e      	ldr	r3, [pc, #312]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f04:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001f06:	2312      	movs	r3, #18
 8001f08:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8001f12:	2304      	movs	r3, #4
 8001f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4845      	ldr	r0, [pc, #276]	@ (8002034 <I2Cx_MspInit+0x174>)
 8001f1e:	f000 fea1 	bl	8002c64 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8001f26:	230b      	movs	r3, #11
 8001f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8001f2a:	f107 031c 	add.w	r3, r7, #28
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4841      	ldr	r0, [pc, #260]	@ (8002038 <I2Cx_MspInit+0x178>)
 8001f32:	f000 fe97 	bl	8002c64 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001f36:	4b3e      	ldr	r3, [pc, #248]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001f3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f42:	4b3b      	ldr	r3, [pc, #236]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001f4e:	4b38      	ldr	r3, [pc, #224]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4a37      	ldr	r2, [pc, #220]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001f54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f58:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001f5a:	4b35      	ldr	r3, [pc, #212]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a34      	ldr	r2, [pc, #208]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001f60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f64:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	210f      	movs	r1, #15
 8001f6a:	205f      	movs	r0, #95	@ 0x5f
 8001f6c:	f000 fa51 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001f70:	205f      	movs	r0, #95	@ 0x5f
 8001f72:	f000 fa6a 	bl	800244a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	210f      	movs	r1, #15
 8001f7a:	2060      	movs	r0, #96	@ 0x60
 8001f7c:	f000 fa49 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8001f80:	2060      	movs	r0, #96	@ 0x60
 8001f82:	f000 fa62 	bl	800244a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001f86:	e04d      	b.n	8002024 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001f88:	4b29      	ldr	r3, [pc, #164]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8c:	4a28      	ldr	r2, [pc, #160]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001f8e:	f043 0302 	orr.w	r3, r3, #2
 8001f92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f94:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001fa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fa4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001fa6:	2312      	movs	r3, #18
 8001fa8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	4619      	mov	r1, r3
 8001fbc:	481e      	ldr	r0, [pc, #120]	@ (8002038 <I2Cx_MspInit+0x178>)
 8001fbe:	f000 fe51 	bl	8002c64 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001fc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	4619      	mov	r1, r3
 8001fce:	481a      	ldr	r0, [pc, #104]	@ (8002038 <I2Cx_MspInit+0x178>)
 8001fd0:	f000 fe48 	bl	8002c64 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001fd4:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	4a15      	ldr	r2, [pc, #84]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001fda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fde:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe0:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001fec:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001ff2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ff6:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8002030 <I2Cx_MspInit+0x170>)
 8001ffe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002002:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	210f      	movs	r1, #15
 8002008:	201f      	movs	r0, #31
 800200a:	f000 fa02 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800200e:	201f      	movs	r0, #31
 8002010:	f000 fa1b 	bl	800244a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	210f      	movs	r1, #15
 8002018:	2020      	movs	r0, #32
 800201a:	f000 f9fa 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800201e:	2020      	movs	r0, #32
 8002020:	f000 fa13 	bl	800244a <HAL_NVIC_EnableIRQ>
}
 8002024:	bf00      	nop
 8002026:	3730      	adds	r7, #48	@ 0x30
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	2000529c 	.word	0x2000529c
 8002030:	40023800 	.word	0x40023800
 8002034:	40020c00 	.word	0x40020c00
 8002038:	40020400 	.word	0x40020400

0800203c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f001 f9cd 	bl	80033e4 <HAL_I2C_GetState>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d125      	bne.n	800209c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a14      	ldr	r2, [pc, #80]	@ (80020a4 <I2Cx_Init+0x68>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d103      	bne.n	8002060 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a13      	ldr	r2, [pc, #76]	@ (80020a8 <I2Cx_Init+0x6c>)
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e002      	b.n	8002066 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a12      	ldr	r2, [pc, #72]	@ (80020ac <I2Cx_Init+0x70>)
 8002064:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a11      	ldr	r2, [pc, #68]	@ (80020b0 <I2Cx_Init+0x74>)
 800206a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff15 	bl	8001ec0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 ffaa 	bl	8002ff0 <HAL_I2C_Init>
  }
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	2000529c 	.word	0x2000529c
 80020a8:	40006000 	.word	0x40006000
 80020ac:	40005400 	.word	0x40005400
 80020b0:	40912732 	.word	0x40912732

080020b4 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	@ 0x28
 80020b8:	af04      	add	r7, sp, #16
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	72fb      	strb	r3, [r7, #11]
 80020c6:	460b      	mov	r3, r1
 80020c8:	813b      	strh	r3, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80020d2:	7afb      	ldrb	r3, [r7, #11]
 80020d4:	b299      	uxth	r1, r3
 80020d6:	88f8      	ldrh	r0, [r7, #6]
 80020d8:	893a      	ldrh	r2, [r7, #8]
 80020da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020de:	9302      	str	r3, [sp, #8]
 80020e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	4603      	mov	r3, r0
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f001 f854 	bl	8003198 <HAL_I2C_Mem_Write>
 80020f0:	4603      	mov	r3, r0
 80020f2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d004      	beq.n	8002104 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80020fa:	7afb      	ldrb	r3, [r7, #11]
 80020fc:	4619      	mov	r1, r3
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f805 	bl	800210e <I2Cx_Error>
  }
  return status;
 8002104:	7dfb      	ldrb	r3, [r7, #23]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fff8 	bl	8003110 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff8b 	bl	800203c <I2Cx_Init>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002134:	4802      	ldr	r0, [pc, #8]	@ (8002140 <AUDIO_IO_Init+0x10>)
 8002136:	f7ff ff81 	bl	800203c <I2Cx_Init>
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000529c 	.word	0x2000529c

08002144 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af02      	add	r7, sp, #8
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
 800214e:	460b      	mov	r3, r1
 8002150:	80bb      	strh	r3, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8002156:	887b      	ldrh	r3, [r7, #2]
 8002158:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800215a:	89fb      	ldrh	r3, [r7, #14]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	b29b      	uxth	r3, r3
 8002160:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8002162:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	b21a      	sxth	r2, r3
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	b21b      	sxth	r3, r3
 800216e:	4313      	orrs	r3, r2
 8002170:	b21b      	sxth	r3, r3
 8002172:	b29b      	uxth	r3, r3
 8002174:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8002176:	88ba      	ldrh	r2, [r7, #4]
 8002178:	79f9      	ldrb	r1, [r7, #7]
 800217a:	2302      	movs	r3, #2
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	1cbb      	adds	r3, r7, #2
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2302      	movs	r3, #2
 8002184:	4803      	ldr	r0, [pc, #12]	@ (8002194 <AUDIO_IO_Write+0x50>)
 8002186:	f7ff ff95 	bl	80020b4 <I2Cx_WriteMultiple>
}
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	2000529c 	.word	0x2000529c

08002198 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f847 	bl	8002234 <HAL_Delay>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	af00      	add	r7, sp, #0
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b2:	2003      	movs	r0, #3
 80021b4:	f000 f922 	bl	80023fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021b8:	2000      	movs	r0, #0
 80021ba:	f000 f805 	bl	80021c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80021be:	f7fe fd93 	bl	8000ce8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80021d0:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <HAL_InitTick+0x30>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a09      	ldr	r2, [pc, #36]	@ (80021fc <HAL_InitTick+0x34>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	099b      	lsrs	r3, r3, #6
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 f942 	bl	8002466 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021ea:	f000 f912 	bl	8002412 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000068 	.word	0x20000068
 80021fc:	10624dd3 	.word	0x10624dd3

08002200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  uwTick++;
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <HAL_IncTick+0x18>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	4a03      	ldr	r2, [pc, #12]	@ (8002218 <HAL_IncTick+0x18>)
 800220c:	6013      	str	r3, [r2, #0]
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	200052e8 	.word	0x200052e8

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	@ (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	200052e8 	.word	0x200052e8

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8002240:	f7ff ffec 	bl	800221c <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8002246:	bf00      	nop
 8002248:	f7ff ffe8 	bl	800221c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad2      	subs	r2, r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	d3f7      	bcc.n	8002248 <HAL_Delay+0x14>
  {
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002274:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <NVIC_SetPriorityGrouping+0x40>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002280:	4013      	ands	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800228c:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <NVIC_SetPriorityGrouping+0x44>)
 800228e:	4313      	orrs	r3, r2
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <NVIC_SetPriorityGrouping+0x40>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00
 80022a8:	05fa0000 	.word	0x05fa0000

080022ac <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b0:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <NVIC_GetPriorityGrouping+0x18>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 0307 	and.w	r3, r3, #7
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	4907      	ldr	r1, [pc, #28]	@ (80022f8 <NVIC_EnableIRQ+0x30>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	2001      	movs	r0, #1
 80022e2:	fa00 f202 	lsl.w	r2, r0, r2
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100

080022fc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	da0b      	bge.n	8002328 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	@ (8002348 <NVIC_SetPriority+0x4c>)
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	3b04      	subs	r3, #4
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002326:	e009      	b.n	800233c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4907      	ldr	r1, [pc, #28]	@ (800234c <NVIC_SetPriority+0x50>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00
 800234c:	e000e100 	.word	0xe000e100

08002350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	@ 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002398:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	4313      	orrs	r3, r2
         );
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	@ 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023c8:	d301      	bcc.n	80023ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00f      	b.n	80023ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ce:	4a0a      	ldr	r2, [pc, #40]	@ (80023f8 <SysTick_Config+0x40>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d6:	210f      	movs	r1, #15
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023dc:	f7ff ff8e 	bl	80022fc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <SysTick_Config+0x40>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e6:	4b04      	ldr	r3, [pc, #16]	@ (80023f8 <SysTick_Config+0x40>)
 80023e8:	2207      	movs	r2, #7
 80023ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	e000e010 	.word	0xe000e010

080023fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff2d 	bl	8002264 <NVIC_SetPriorityGrouping>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002424:	f7ff ff42 	bl	80022ac <NVIC_GetPriorityGrouping>
 8002428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7ff ff8e 	bl	8002350 <NVIC_EncodePriority>
 8002434:	4602      	mov	r2, r0
 8002436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff5d 	bl	80022fc <NVIC_SetPriority>
}
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff35 	bl	80022c8 <NVIC_EnableIRQ>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ffa2 	bl	80023b8 <SysTick_Config>
 8002474:	4603      	mov	r3, r0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b04      	cmp	r3, #4
 800248c:	d106      	bne.n	800249c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002494:	f043 0304 	orr.w	r3, r3, #4
 8002498:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800249a:	e005      	b.n	80024a8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a04      	ldr	r2, [pc, #16]	@ (80024b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024a2:	f023 0304 	bic.w	r3, r3, #4
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80024bc:	f000 f802 	bl	80024c4 <HAL_SYSTICK_Callback>
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024e0:	f7ff fe9c 	bl	800221c <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e099      	b.n	8002624 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002510:	e00f      	b.n	8002532 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002512:	f7ff fe83 	bl	800221c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b05      	cmp	r3, #5
 800251e:	d908      	bls.n	8002532 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2203      	movs	r2, #3
 800252a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e078      	b.n	8002624 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e8      	bne.n	8002512 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	4b38      	ldr	r3, [pc, #224]	@ (800262c <HAL_DMA_Init+0x158>)
 800254c:	4013      	ands	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800255e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002576:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	2b04      	cmp	r3, #4
 800258a:	d107      	bne.n	800259c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002594:	4313      	orrs	r3, r2
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f023 0307 	bic.w	r3, r3, #7
 80025b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d117      	bne.n	80025f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00e      	beq.n	80025f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fac7 	bl	8002b6c <DMA_CheckFifoParam>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2240      	movs	r2, #64	@ 0x40
 80025e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80025f2:	2301      	movs	r3, #1
 80025f4:	e016      	b.n	8002624 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fa7e 	bl	8002b00 <DMA_CalcBaseAndBitshift>
 8002604:	4603      	mov	r3, r0
 8002606:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260c:	223f      	movs	r2, #63	@ 0x3f
 800260e:	409a      	lsls	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	e010803f 	.word	0xe010803f

08002630 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e03e      	b.n	80026c0 <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d101      	bne.n	8002652 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800264e:	2302      	movs	r3, #2
 8002650:	e036      	b.n	80026c0 <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2200      	movs	r2, #0
 8002680:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2221      	movs	r2, #33	@ 0x21
 8002690:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa34 	bl	8002b00 <DMA_CalcBaseAndBitshift>
 8002698:	4603      	mov	r3, r0
 800269a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a0:	223f      	movs	r2, #63	@ 0x3f
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_DMA_Start_IT+0x26>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e048      	b.n	8002780 <HAL_DMA_Start_IT+0xb8>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d137      	bne.n	8002772 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2202      	movs	r2, #2
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f9c4 	bl	8002aa4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002720:	223f      	movs	r2, #63	@ 0x3f
 8002722:	409a      	lsls	r2, r3
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0216 	orr.w	r2, r2, #22
 8002736:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002746:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0208 	orr.w	r2, r2, #8
 800275e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e005      	b.n	800277e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800277a:	2302      	movs	r3, #2
 800277c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800277e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002794:	4b8e      	ldr	r3, [pc, #568]	@ (80029d0 <HAL_DMA_IRQHandler+0x248>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a8e      	ldr	r2, [pc, #568]	@ (80029d4 <HAL_DMA_IRQHandler+0x24c>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0a9b      	lsrs	r3, r3, #10
 80027a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	2208      	movs	r2, #8
 80027b4:	409a      	lsls	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01a      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0204 	bic.w	r2, r2, #4
 80027da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e0:	2208      	movs	r2, #8
 80027e2:	409a      	lsls	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ec:	f043 0201 	orr.w	r2, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f8:	4a77      	ldr	r2, [pc, #476]	@ (80029d8 <HAL_DMA_IRQHandler+0x250>)
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d012      	beq.n	800282a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002816:	4a70      	ldr	r2, [pc, #448]	@ (80029d8 <HAL_DMA_IRQHandler+0x250>)
 8002818:	409a      	lsls	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002822:	f043 0202 	orr.w	r2, r3, #2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282e:	4a6b      	ldr	r2, [pc, #428]	@ (80029dc <HAL_DMA_IRQHandler+0x254>)
 8002830:	409a      	lsls	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d012      	beq.n	8002860 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00b      	beq.n	8002860 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284c:	4a63      	ldr	r2, [pc, #396]	@ (80029dc <HAL_DMA_IRQHandler+0x254>)
 800284e:	409a      	lsls	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002858:	f043 0204 	orr.w	r2, r3, #4
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002864:	2210      	movs	r2, #16
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d043      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d03c      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002882:	2210      	movs	r2, #16
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d018      	beq.n	80028ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d108      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d024      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
 80028b6:	e01f      	b.n	80028f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01b      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4798      	blx	r3
 80028c8:	e016      	b.n	80028f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d107      	bne.n	80028e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0208 	bic.w	r2, r2, #8
 80028e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fc:	2220      	movs	r2, #32
 80028fe:	409a      	lsls	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 8093 	beq.w	8002a30 <HAL_DMA_IRQHandler+0x2a8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 808b 	beq.w	8002a30 <HAL_DMA_IRQHandler+0x2a8>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291e:	2220      	movs	r2, #32
 8002920:	409a      	lsls	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b05      	cmp	r3, #5
 8002930:	d137      	bne.n	80029a2 <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0216 	bic.w	r2, r2, #22
 8002940:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002950:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d103      	bne.n	8002962 <HAL_DMA_IRQHandler+0x1da>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0208 	bic.w	r2, r2, #8
 8002970:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002976:	223f      	movs	r2, #63	@ 0x3f
 8002978:	409a      	lsls	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8082 	beq.w	8002a9c <HAL_DMA_IRQHandler+0x314>
        {
          hdma->XferAbortCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
        }
        return;
 80029a0:	e07c      	b.n	8002a9c <HAL_DMA_IRQHandler+0x314>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d020      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x26a>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d110      	bne.n	80029e0 <HAL_DMA_IRQHandler+0x258>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d034      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	4798      	blx	r3
 80029ce:	e02f      	b.n	8002a30 <HAL_DMA_IRQHandler+0x2a8>
 80029d0:	20000068 	.word	0x20000068
 80029d4:	1b4e81b5 	.word	0x1b4e81b5
 80029d8:	00800001 	.word	0x00800001
 80029dc:	00800004 	.word	0x00800004
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d023      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
 80029f0:	e01e      	b.n	8002a30 <HAL_DMA_IRQHandler+0x2a8>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10f      	bne.n	8002a20 <HAL_DMA_IRQHandler+0x298>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0210 	bic.w	r2, r2, #16
 8002a0e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x2a8>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d032      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x316>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d022      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x302>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2205      	movs	r2, #5
 8002a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d307      	bcc.n	8002a78 <HAL_DMA_IRQHandler+0x2f0>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f2      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x2d4>
 8002a76:	e000      	b.n	8002a7a <HAL_DMA_IRQHandler+0x2f2>
          break;
 8002a78:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x316>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4798      	blx	r3
 8002a9a:	e000      	b.n	8002a9e <HAL_DMA_IRQHandler+0x316>
        return;
 8002a9c:	bf00      	nop
    }
  }
}
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ac0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b40      	cmp	r3, #64	@ 0x40
 8002ad0:	d108      	bne.n	8002ae4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ae2:	e007      	b.n	8002af4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	60da      	str	r2, [r3, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	3b10      	subs	r3, #16
 8002b10:	4a13      	ldr	r2, [pc, #76]	@ (8002b60 <DMA_CalcBaseAndBitshift+0x60>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b1a:	4a12      	ldr	r2, [pc, #72]	@ (8002b64 <DMA_CalcBaseAndBitshift+0x64>)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d908      	bls.n	8002b40 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <DMA_CalcBaseAndBitshift+0x68>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	1d1a      	adds	r2, r3, #4
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b3e:	e006      	b.n	8002b4e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <DMA_CalcBaseAndBitshift+0x68>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	aaaaaaab 	.word	0xaaaaaaab
 8002b64:	08006078 	.word	0x08006078
 8002b68:	fffffc00 	.word	0xfffffc00

08002b6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d11f      	bne.n	8002bc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d856      	bhi.n	8002c3a <DMA_CheckFifoParam+0xce>
 8002b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b94 <DMA_CheckFifoParam+0x28>)
 8002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b92:	bf00      	nop
 8002b94:	08002ba5 	.word	0x08002ba5
 8002b98:	08002bb7 	.word	0x08002bb7
 8002b9c:	08002ba5 	.word	0x08002ba5
 8002ba0:	08002c3b 	.word	0x08002c3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d046      	beq.n	8002c3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb4:	e043      	b.n	8002c3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bbe:	d140      	bne.n	8002c42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc4:	e03d      	b.n	8002c42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bce:	d121      	bne.n	8002c14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d837      	bhi.n	8002c46 <DMA_CheckFifoParam+0xda>
 8002bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bdc <DMA_CheckFifoParam+0x70>)
 8002bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bdc:	08002bed 	.word	0x08002bed
 8002be0:	08002bf3 	.word	0x08002bf3
 8002be4:	08002bed 	.word	0x08002bed
 8002be8:	08002c05 	.word	0x08002c05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf0:	e030      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d025      	beq.n	8002c4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c02:	e022      	b.n	8002c4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c0c:	d11f      	bne.n	8002c4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c12:	e01c      	b.n	8002c4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d903      	bls.n	8002c22 <DMA_CheckFifoParam+0xb6>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d003      	beq.n	8002c28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c20:	e018      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
      break;
 8002c26:	e015      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00e      	beq.n	8002c52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      break;
 8002c38:	e00b      	b.n	8002c52 <DMA_CheckFifoParam+0xe6>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e00a      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e008      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
 8002c44:	e006      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c46:	bf00      	nop
 8002c48:	e004      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e002      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c4e:	bf00      	nop
 8002c50:	e000      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c52:	bf00      	nop
    }
  } 
  
  return status; 
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b089      	sub	sp, #36	@ 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	e175      	b.n	8002f70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c84:	2201      	movs	r2, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f040 8164 	bne.w	8002f6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0x4e>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b12      	cmp	r3, #18
 8002cb0:	d123      	bne.n	8002cfa <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	08da      	lsrs	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3208      	adds	r2, #8
 8002cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	220f      	movs	r2, #15
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	08da      	lsrs	r2, r3, #3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3208      	adds	r2, #8
 8002cf4:	69b9      	ldr	r1, [r7, #24]
 8002cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	2203      	movs	r2, #3
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0203 	and.w	r2, r3, #3
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d00b      	beq.n	8002d4e <HAL_GPIO_Init+0xea>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d007      	beq.n	8002d4e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d42:	2b11      	cmp	r3, #17
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b12      	cmp	r3, #18
 8002d4c:	d130      	bne.n	8002db0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	2203      	movs	r2, #3
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 0201 	and.w	r2, r3, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	2203      	movs	r2, #3
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80be 	beq.w	8002f6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dee:	4b66      	ldr	r3, [pc, #408]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	4a65      	ldr	r2, [pc, #404]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dfa:	4b63      	ldr	r3, [pc, #396]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e06:	4a61      	ldr	r2, [pc, #388]	@ (8002f8c <HAL_GPIO_Init+0x328>)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a58      	ldr	r2, [pc, #352]	@ (8002f90 <HAL_GPIO_Init+0x32c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d037      	beq.n	8002ea2 <HAL_GPIO_Init+0x23e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a57      	ldr	r2, [pc, #348]	@ (8002f94 <HAL_GPIO_Init+0x330>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d031      	beq.n	8002e9e <HAL_GPIO_Init+0x23a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a56      	ldr	r2, [pc, #344]	@ (8002f98 <HAL_GPIO_Init+0x334>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d02b      	beq.n	8002e9a <HAL_GPIO_Init+0x236>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a55      	ldr	r2, [pc, #340]	@ (8002f9c <HAL_GPIO_Init+0x338>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d025      	beq.n	8002e96 <HAL_GPIO_Init+0x232>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a54      	ldr	r2, [pc, #336]	@ (8002fa0 <HAL_GPIO_Init+0x33c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d01f      	beq.n	8002e92 <HAL_GPIO_Init+0x22e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a53      	ldr	r2, [pc, #332]	@ (8002fa4 <HAL_GPIO_Init+0x340>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d019      	beq.n	8002e8e <HAL_GPIO_Init+0x22a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a52      	ldr	r2, [pc, #328]	@ (8002fa8 <HAL_GPIO_Init+0x344>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d013      	beq.n	8002e8a <HAL_GPIO_Init+0x226>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a51      	ldr	r2, [pc, #324]	@ (8002fac <HAL_GPIO_Init+0x348>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00d      	beq.n	8002e86 <HAL_GPIO_Init+0x222>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a50      	ldr	r2, [pc, #320]	@ (8002fb0 <HAL_GPIO_Init+0x34c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <HAL_GPIO_Init+0x21e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a4f      	ldr	r2, [pc, #316]	@ (8002fb4 <HAL_GPIO_Init+0x350>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d101      	bne.n	8002e7e <HAL_GPIO_Init+0x21a>
 8002e7a:	2309      	movs	r3, #9
 8002e7c:	e012      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e7e:	230a      	movs	r3, #10
 8002e80:	e010      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e82:	2308      	movs	r3, #8
 8002e84:	e00e      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e86:	2307      	movs	r3, #7
 8002e88:	e00c      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e8a:	2306      	movs	r3, #6
 8002e8c:	e00a      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e8e:	2305      	movs	r3, #5
 8002e90:	e008      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e92:	2304      	movs	r3, #4
 8002e94:	e006      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e96:	2303      	movs	r3, #3
 8002e98:	e004      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e002      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	f002 0203 	and.w	r2, r2, #3
 8002eaa:	0092      	lsls	r2, r2, #2
 8002eac:	4093      	lsls	r3, r2
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002eb4:	4935      	ldr	r1, [pc, #212]	@ (8002f8c <HAL_GPIO_Init+0x328>)
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	3302      	adds	r3, #2
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ee6:	4a34      	ldr	r2, [pc, #208]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eec:	4b32      	ldr	r3, [pc, #200]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f10:	4a29      	ldr	r2, [pc, #164]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f16:	4b28      	ldr	r3, [pc, #160]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f40:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f64:	4a14      	ldr	r2, [pc, #80]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	2b0f      	cmp	r3, #15
 8002f74:	f67f ae86 	bls.w	8002c84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
 8002f7c:	3724      	adds	r7, #36	@ 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40013800 	.word	0x40013800
 8002f90:	40020000 	.word	0x40020000
 8002f94:	40020400 	.word	0x40020400
 8002f98:	40020800 	.word	0x40020800
 8002f9c:	40020c00 	.word	0x40020c00
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40021400 	.word	0x40021400
 8002fa8:	40021800 	.word	0x40021800
 8002fac:	40021c00 	.word	0x40021c00
 8002fb0:	40022000 	.word	0x40022000
 8002fb4:	40022400 	.word	0x40022400
 8002fb8:	40013c00 	.word	0x40013c00

08002fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fcc:	787b      	ldrb	r3, [r7, #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fd8:	e003      	b.n	8002fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	041a      	lsls	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	619a      	str	r2, [r3, #24]
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e07f      	b.n	8003102 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f8a9 	bl	800316e <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2224      	movs	r2, #36	@ 0x24
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003040:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003050:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d107      	bne.n	800306a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	e006      	b.n	8003078 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003076:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d104      	bne.n	800308a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003088:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b1d      	ldr	r3, [pc, #116]	@ (800310c <HAL_I2C_Init+0x11c>)
 8003096:	430b      	orrs	r3, r1
 8003098:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	ea42 0103 	orr.w	r1, r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	021a      	lsls	r2, r3, #8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69d9      	ldr	r1, [r3, #28]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1a      	ldr	r2, [r3, #32]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	02008000 	.word	0x02008000

08003110 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e021      	b.n	8003166 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2224      	movs	r2, #36	@ 0x24
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0201 	bic.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f821 	bl	8003182 <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	4608      	mov	r0, r1
 80031a2:	4611      	mov	r1, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	4603      	mov	r3, r0
 80031a8:	817b      	strh	r3, [r7, #10]
 80031aa:	460b      	mov	r3, r1
 80031ac:	813b      	strh	r3, [r7, #8]
 80031ae:	4613      	mov	r3, r2
 80031b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b20      	cmp	r3, #32
 80031c0:	f040 8109 	bne.w	80033d6 <HAL_I2C_Mem_Write+0x23e>
  {
    if((pData == NULL) || (Size == 0U))
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_I2C_Mem_Write+0x38>
 80031ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e101      	b.n	80033d8 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_I2C_Mem_Write+0x4a>
 80031de:	2302      	movs	r3, #2
 80031e0:	e0fa      	b.n	80033d8 <HAL_I2C_Mem_Write+0x240>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031ea:	f7ff f817 	bl	800221c <HAL_GetTick>
 80031ee:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2319      	movs	r3, #25
 80031f6:	2201      	movs	r2, #1
 80031f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f982 	bl	8003506 <I2C_WaitOnFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e0e5      	b.n	80033d8 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2221      	movs	r2, #33	@ 0x21
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2240      	movs	r2, #64	@ 0x40
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a3a      	ldr	r2, [r7, #32]
 8003226:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800322c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003234:	88f8      	ldrh	r0, [r7, #6]
 8003236:	893a      	ldrh	r2, [r7, #8]
 8003238:	8979      	ldrh	r1, [r7, #10]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	9301      	str	r3, [sp, #4]
 800323e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	4603      	mov	r3, r0
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f8db 	bl	8003400 <I2C_RequestMemoryWrite>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00f      	beq.n	8003270 <HAL_I2C_Mem_Write+0xd8>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003254:	2b04      	cmp	r3, #4
 8003256:	d105      	bne.n	8003264 <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0b9      	b.n	80033d8 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e0b3      	b.n	80033d8 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	2bff      	cmp	r3, #255	@ 0xff
 8003278:	d90e      	bls.n	8003298 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	22ff      	movs	r2, #255	@ 0xff
 800327e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003284:	b2da      	uxtb	r2, r3
 8003286:	8979      	ldrh	r1, [r7, #10]
 8003288:	2300      	movs	r3, #0
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fa4d 	bl	8003730 <I2C_TransferConfig>
 8003296:	e00f      	b.n	80032b8 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	8979      	ldrh	r1, [r7, #10]
 80032aa:	2300      	movs	r3, #0
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fa3c 	bl	8003730 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f95c 	bl	800357a <I2C_WaitOnTXISFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <HAL_I2C_Mem_Write+0x140>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d101      	bne.n	80032d4 <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e081      	b.n	80033d8 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e07f      	b.n	80033d8 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	1c59      	adds	r1, r3, #1
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	6251      	str	r1, [r2, #36]	@ 0x24
 80032e2:	781a      	ldrb	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	@ 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003308:	2b00      	cmp	r3, #0
 800330a:	d135      	bne.n	8003378 <HAL_I2C_Mem_Write+0x1e0>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d030      	beq.n	8003378 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331c:	2200      	movs	r2, #0
 800331e:	2180      	movs	r1, #128	@ 0x80
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 f8f0 	bl	8003506 <I2C_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e053      	b.n	80033d8 <HAL_I2C_Mem_Write+0x240>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	2bff      	cmp	r3, #255	@ 0xff
 8003338:	d90e      	bls.n	8003358 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	22ff      	movs	r2, #255	@ 0xff
 800333e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003344:	b2da      	uxtb	r2, r3
 8003346:	8979      	ldrh	r1, [r7, #10]
 8003348:	2300      	movs	r3, #0
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f9ed 	bl	8003730 <I2C_TransferConfig>
 8003356:	e00f      	b.n	8003378 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003366:	b2da      	uxtb	r2, r3
 8003368:	8979      	ldrh	r1, [r7, #10]
 800336a:	2300      	movs	r3, #0
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f9dc 	bl	8003730 <I2C_TransferConfig>
        }
      }

    }while(hi2c->XferCount > 0U);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d19a      	bne.n	80032b8 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f937 	bl	80035fa <I2C_WaitOnSTOPFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d007      	beq.n	80033a2 <HAL_I2C_Mem_Write+0x20a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	2b04      	cmp	r3, #4
 8003398:	d101      	bne.n	800339e <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e01c      	b.n	80033d8 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e01a      	b.n	80033d8 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2220      	movs	r2, #32
 80033a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b0a      	ldr	r3, [pc, #40]	@ (80033e0 <HAL_I2C_Mem_Write+0x248>)
 80033b6:	400b      	ands	r3, r1
 80033b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e000      	b.n	80033d8 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
  }
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	fe00e800 	.word	0xfe00e800

080033e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f2:	b2db      	uxtb	r3, r3
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af02      	add	r7, sp, #8
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	4608      	mov	r0, r1
 800340a:	4611      	mov	r1, r2
 800340c:	461a      	mov	r2, r3
 800340e:	4603      	mov	r3, r0
 8003410:	817b      	strh	r3, [r7, #10]
 8003412:	460b      	mov	r3, r1
 8003414:	813b      	strh	r3, [r7, #8]
 8003416:	4613      	mov	r3, r2
 8003418:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	8979      	ldrh	r1, [r7, #10]
 8003420:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 f980 	bl	8003730 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	69b9      	ldr	r1, [r7, #24]
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f8a0 	bl	800357a <I2C_WaitOnTXISFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <I2C_RequestMemoryWrite+0x50>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003444:	2b04      	cmp	r3, #4
 8003446:	d101      	bne.n	800344c <I2C_RequestMemoryWrite+0x4c>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e034      	b.n	80034b6 <I2C_RequestMemoryWrite+0xb6>
    }
    else
    {
      return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e032      	b.n	80034b6 <I2C_RequestMemoryWrite+0xb6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <I2C_RequestMemoryWrite+0x62>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003456:	893b      	ldrh	r3, [r7, #8]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003460:	e01b      	b.n	800349a <I2C_RequestMemoryWrite+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003462:	893b      	ldrh	r3, [r7, #8]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	b29b      	uxth	r3, r3
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	69b9      	ldr	r1, [r7, #24]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f880 	bl	800357a <I2C_WaitOnTXISFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <I2C_RequestMemoryWrite+0x90>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003484:	2b04      	cmp	r3, #4
 8003486:	d101      	bne.n	800348c <I2C_RequestMemoryWrite+0x8c>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e014      	b.n	80034b6 <I2C_RequestMemoryWrite+0xb6>
      }
      else
      {
        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e012      	b.n	80034b6 <I2C_RequestMemoryWrite+0xb6>
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003490:	893b      	ldrh	r3, [r7, #8]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2200      	movs	r2, #0
 80034a2:	2180      	movs	r1, #128	@ 0x80
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f82e 	bl	8003506 <I2C_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <I2C_RequestMemoryWrite+0xb4>
  {
    return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e000      	b.n	80034b6 <I2C_RequestMemoryWrite+0xb6>
  }

return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d103      	bne.n	80034dc <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2200      	movs	r2, #0
 80034da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d007      	beq.n	80034fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699a      	ldr	r2, [r3, #24]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	619a      	str	r2, [r3, #24]
  }
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	4613      	mov	r3, r2
 8003514:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003516:	e01c      	b.n	8003552 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800351e:	d018      	beq.n	8003552 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003526:	f7fe fe79 	bl	800221c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d20d      	bcs.n	8003552 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e00f      	b.n	8003572 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4013      	ands	r3, r2
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	bf0c      	ite	eq
 8003562:	2301      	moveq	r3, #1
 8003564:	2300      	movne	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	429a      	cmp	r2, r3
 800356e:	d0d3      	beq.n	8003518 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003586:	e02c      	b.n	80035e2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f871 	bl	8003674 <I2C_IsAcknowledgeFailed>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e02a      	b.n	80035f2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035a2:	d01e      	beq.n	80035e2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035aa:	f7fe fe37 	bl	800221c <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d213      	bcs.n	80035e2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	f043 0220 	orr.w	r2, r3, #32
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e007      	b.n	80035f2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d1cb      	bne.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003606:	e028      	b.n	800365a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f831 	bl	8003674 <I2C_IsAcknowledgeFailed>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e026      	b.n	800366a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003622:	f7fe fdfb 	bl	800221c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	429a      	cmp	r2, r3
 8003630:	d213      	bcs.n	800365a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003636:	f043 0220 	orr.w	r2, r3, #32
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e007      	b.n	800366a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b20      	cmp	r3, #32
 8003666:	d1cf      	bne.n	8003608 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b10      	cmp	r3, #16
 800368c:	d148      	bne.n	8003720 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800368e:	e01c      	b.n	80036ca <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003696:	d018      	beq.n	80036ca <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <I2C_IsAcknowledgeFailed+0x3a>
 800369e:	f7fe fdbd 	bl	800221c <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d20d      	bcs.n	80036ca <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e02b      	b.n	8003722 <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d1db      	bne.n	8003690 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2210      	movs	r2, #16
 80036de:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2220      	movs	r2, #32
 80036e6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f7ff fee8 	bl	80034be <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <I2C_IsAcknowledgeFailed+0xb8>)
 80036fa:	400b      	ands	r3, r1
 80036fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2204      	movs	r2, #4
 8003702:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	fe00e800 	.word	0xfe00e800

08003730 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	817b      	strh	r3, [r7, #10]
 800373e:	4613      	mov	r3, r2
 8003740:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4b0d      	ldr	r3, [pc, #52]	@ (8003788 <I2C_TransferConfig+0x58>)
 8003752:	4013      	ands	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8003756:	897b      	ldrh	r3, [r7, #10]
 8003758:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800375c:	7a7b      	ldrb	r3, [r7, #9]
 800375e:	041b      	lsls	r3, r3, #16
 8003760:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	431a      	orrs	r2, r3
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	4313      	orrs	r3, r2
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	605a      	str	r2, [r3, #4]
}
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	fc009800 	.word	0xfc009800

0800378c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003796:	4b23      	ldr	r3, [pc, #140]	@ (8003824 <HAL_PWREx_EnableOverDrive+0x98>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	4a22      	ldr	r2, [pc, #136]	@ (8003824 <HAL_PWREx_EnableOverDrive+0x98>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037a2:	4b20      	ldr	r3, [pc, #128]	@ (8003824 <HAL_PWREx_EnableOverDrive+0x98>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037ba:	f7fe fd2f 	bl	800221c <HAL_GetTick>
 80037be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037c0:	e009      	b.n	80037d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037c2:	f7fe fd2b 	bl	800221c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037d0:	d901      	bls.n	80037d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e022      	b.n	800381c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037d6:	4b14      	ldr	r3, [pc, #80]	@ (8003828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e2:	d1ee      	bne.n	80037c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037e4:	4b10      	ldr	r3, [pc, #64]	@ (8003828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037f0:	f7fe fd14 	bl	800221c <HAL_GetTick>
 80037f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037f6:	e009      	b.n	800380c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037f8:	f7fe fd10 	bl	800221c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003806:	d901      	bls.n	800380c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e007      	b.n	800381c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <HAL_PWREx_EnableOverDrive+0x9c>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003814:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003818:	d1ee      	bne.n	80037f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000

0800382c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b092      	sub	sp, #72	@ 0x48
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	643b      	str	r3, [r7, #64]	@ 0x40
  FlagStatus pwrclkchanged = RESET;
 8003838:	2300      	movs	r3, #0
 800383a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 8087 	beq.w	800395a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800384c:	4b97      	ldr	r3, [pc, #604]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b04      	cmp	r3, #4
 8003856:	d00c      	beq.n	8003872 <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003858:	4b94      	ldr	r3, [pc, #592]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 030c 	and.w	r3, r3, #12
 8003860:	2b08      	cmp	r3, #8
 8003862:	d112      	bne.n	800388a <HAL_RCC_OscConfig+0x5e>
 8003864:	4b91      	ldr	r3, [pc, #580]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800386c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003870:	d10b      	bne.n	800388a <HAL_RCC_OscConfig+0x5e>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003872:	4b8e      	ldr	r3, [pc, #568]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d06c      	beq.n	8003958 <HAL_RCC_OscConfig+0x12c>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d168      	bne.n	8003958 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e281      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x76>
 8003894:	4b85      	ldr	r3, [pc, #532]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a84      	ldr	r2, [pc, #528]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 800389a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	e02e      	b.n	8003900 <HAL_RCC_OscConfig+0xd4>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x98>
 80038aa:	4b80      	ldr	r3, [pc, #512]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a7f      	ldr	r2, [pc, #508]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80038b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b7d      	ldr	r3, [pc, #500]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a7c      	ldr	r2, [pc, #496]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80038bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e01d      	b.n	8003900 <HAL_RCC_OscConfig+0xd4>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0xbc>
 80038ce:	4b77      	ldr	r3, [pc, #476]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a76      	ldr	r2, [pc, #472]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80038d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	4b74      	ldr	r3, [pc, #464]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a73      	ldr	r2, [pc, #460]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e00b      	b.n	8003900 <HAL_RCC_OscConfig+0xd4>
 80038e8:	4b70      	ldr	r3, [pc, #448]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a6f      	ldr	r2, [pc, #444]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80038ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	4b6d      	ldr	r3, [pc, #436]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a6c      	ldr	r2, [pc, #432]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80038fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038fe:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d013      	beq.n	8003930 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fe fc88 	bl	800221c <HAL_GetTick>
 800390c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003910:	f7fe fc84 	bl	800221c <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	@ 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e235      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	4b62      	ldr	r3, [pc, #392]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0xe4>
 800392e:	e014      	b.n	800395a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fe fc74 	bl	800221c <HAL_GetTick>
 8003934:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x11e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003938:	f7fe fc70 	bl	800221c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	@ 0x64
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e221      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394a:	4b58      	ldr	r3, [pc, #352]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x10c>
 8003956:	e000      	b.n	800395a <HAL_RCC_OscConfig+0x12e>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d07d      	beq.n	8003a62 <HAL_RCC_OscConfig+0x236>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003966:	4b51      	ldr	r3, [pc, #324]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00b      	beq.n	800398a <HAL_RCC_OscConfig+0x15e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003972:	4b4e      	ldr	r3, [pc, #312]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b08      	cmp	r3, #8
 800397c:	d126      	bne.n	80039cc <HAL_RCC_OscConfig+0x1a0>
 800397e:	4b4b      	ldr	r3, [pc, #300]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d120      	bne.n	80039cc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398a:	4b48      	ldr	r3, [pc, #288]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <HAL_RCC_OscConfig+0x176>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d001      	beq.n	80039a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e1f5      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a2:	4b42      	ldr	r3, [pc, #264]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6919      	ldr	r1, [r3, #16]
 80039ae:	23f8      	movs	r3, #248	@ 0xf8
 80039b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b4:	fa93 f3a3 	rbit	r3, r3
 80039b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80039ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039bc:	fab3 f383 	clz	r3, r3
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	4939      	ldr	r1, [pc, #228]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ca:	e04a      	b.n	8003a62 <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d02d      	beq.n	8003a30 <HAL_RCC_OscConfig+0x204>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d4:	4b35      	ldr	r3, [pc, #212]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a34      	ldr	r2, [pc, #208]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fe fc1c 	bl	800221c <HAL_GetTick>
 80039e4:	6438      	str	r0, [r7, #64]	@ 0x40

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x1ce>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e8:	f7fe fc18 	bl	800221c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e1c9      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fa:	4b2c      	ldr	r3, [pc, #176]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x1bc>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b29      	ldr	r3, [pc, #164]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6919      	ldr	r1, [r3, #16]
 8003a12:	23f8      	movs	r3, #248	@ 0xf8
 8003a14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	4920      	ldr	r1, [pc, #128]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
 8003a2e:	e018      	b.n	8003a62 <HAL_RCC_OscConfig+0x236>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a30:	4b1e      	ldr	r3, [pc, #120]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1d      	ldr	r2, [pc, #116]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a36:	f023 0301 	bic.w	r3, r3, #1
 8003a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fe fbee 	bl	800221c <HAL_GetTick>
 8003a40:	6438      	str	r0, [r7, #64]	@ 0x40
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a44:	f7fe fbea 	bl	800221c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e19b      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a56:	4b15      	ldr	r3, [pc, #84]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x218>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d039      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d01c      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x284>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a76:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6753      	str	r3, [r2, #116]	@ 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a82:	f7fe fbcb 	bl	800221c <HAL_GetTick>
 8003a86:	6438      	str	r0, [r7, #64]	@ 0x40
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a8a:	f7fe fbc7 	bl	800221c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e178      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9c:	4b03      	ldr	r3, [pc, #12]	@ (8003aac <HAL_RCC_OscConfig+0x280>)
 8003a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x25e>
 8003aa8:	e01b      	b.n	8003ae2 <HAL_RCC_OscConfig+0x2b6>
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab0:	4b9e      	ldr	r3, [pc, #632]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab4:	4a9d      	ldr	r2, [pc, #628]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	6753      	str	r3, [r2, #116]	@ 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fe fbae 	bl	800221c <HAL_GetTick>
 8003ac0:	6438      	str	r0, [r7, #64]	@ 0x40
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x2aa>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7fe fbaa 	bl	800221c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x2aa>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e15b      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad6:	4b95      	ldr	r3, [pc, #596]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x298>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80a6 	beq.w	8003c3c <HAL_RCC_OscConfig+0x410>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af0:	4b8e      	ldr	r3, [pc, #568]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10e      	bne.n	8003b1a <HAL_RCC_OscConfig+0x2ee>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afc:	4b8b      	ldr	r3, [pc, #556]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	4a8a      	ldr	r2, [pc, #552]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b08:	4b88      	ldr	r3, [pc, #544]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1a:	4b85      	ldr	r3, [pc, #532]	@ (8003d30 <HAL_RCC_OscConfig+0x504>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d118      	bne.n	8003b58 <HAL_RCC_OscConfig+0x32c>
    {    
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b26:	4b82      	ldr	r3, [pc, #520]	@ (8003d30 <HAL_RCC_OscConfig+0x504>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a81      	ldr	r2, [pc, #516]	@ (8003d30 <HAL_RCC_OscConfig+0x504>)
 8003b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b32:	f7fe fb73 	bl	800221c <HAL_GetTick>
 8003b36:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x320>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b3a:	f7fe fb6f 	bl	800221c <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b64      	cmp	r3, #100	@ 0x64
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x320>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e120      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b4c:	4b78      	ldr	r3, [pc, #480]	@ (8003d30 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x30e>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d106      	bne.n	8003b6e <HAL_RCC_OscConfig+0x342>
 8003b60:	4b72      	ldr	r3, [pc, #456]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b64:	4a71      	ldr	r2, [pc, #452]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b6c:	e02d      	b.n	8003bca <HAL_RCC_OscConfig+0x39e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x364>
 8003b76:	4b6d      	ldr	r3, [pc, #436]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7a:	4a6c      	ldr	r2, [pc, #432]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b82:	4b6a      	ldr	r3, [pc, #424]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b86:	4a69      	ldr	r2, [pc, #420]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003b88:	f023 0304 	bic.w	r3, r3, #4
 8003b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b8e:	e01c      	b.n	8003bca <HAL_RCC_OscConfig+0x39e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d10c      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x386>
 8003b98:	4b64      	ldr	r3, [pc, #400]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9c:	4a63      	ldr	r2, [pc, #396]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003b9e:	f043 0304 	orr.w	r3, r3, #4
 8003ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba4:	4b61      	ldr	r3, [pc, #388]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba8:	4a60      	ldr	r2, [pc, #384]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb0:	e00b      	b.n	8003bca <HAL_RCC_OscConfig+0x39e>
 8003bb2:	4b5e      	ldr	r3, [pc, #376]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	4a5d      	ldr	r2, [pc, #372]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc2:	4a5a      	ldr	r2, [pc, #360]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003bc4:	f023 0304 	bic.w	r3, r3, #4
 8003bc8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d015      	beq.n	8003bfe <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd2:	f7fe fb23 	bl	800221c <HAL_GetTick>
 8003bd6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fe fb1f 	bl	800221c <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e0ce      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf0:	4b4e      	ldr	r3, [pc, #312]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ee      	beq.n	8003bda <HAL_RCC_OscConfig+0x3ae>
 8003bfc:	e014      	b.n	8003c28 <HAL_RCC_OscConfig+0x3fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfe:	f7fe fb0d 	bl	800221c <HAL_GetTick>
 8003c02:	6438      	str	r0, [r7, #64]	@ 0x40
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fe fb09 	bl	800221c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e0b8      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1c:	4b43      	ldr	r3, [pc, #268]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ee      	bne.n	8003c06 <HAL_RCC_OscConfig+0x3da>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c28:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d105      	bne.n	8003c3c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c30:	4b3e      	ldr	r3, [pc, #248]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c34:	4a3d      	ldr	r2, [pc, #244]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a3 	beq.w	8003d8c <HAL_RCC_OscConfig+0x560>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c46:	4b39      	ldr	r3, [pc, #228]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	f000 809a 	beq.w	8003d88 <HAL_RCC_OscConfig+0x55c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d17b      	bne.n	8003d54 <HAL_RCC_OscConfig+0x528>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5c:	4b33      	ldr	r3, [pc, #204]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a32      	ldr	r2, [pc, #200]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003c62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fe fad8 	bl	800221c <HAL_GetTick>
 8003c6c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c70:	f7fe fad4 	bl	800221c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e085      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	4b2a      	ldr	r3, [pc, #168]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x444>
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003c9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	fa93 f3a3 	rbit	r3, r3
 8003ca8:	613b      	str	r3, [r7, #16]
  return(result);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	fab3 f383 	clz	r3, r3
 8003cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	085b      	lsrs	r3, r3, #1
 8003cbc:	1e59      	subs	r1, r3, #1
 8003cbe:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003cc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	fab3 f383 	clz	r3, r3
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cdc:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	fa93 f3a3 	rbit	r3, r3
 8003ce8:	623b      	str	r3, [r7, #32]
  return(result);
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	fab3 f383 	clz	r3, r3
 8003cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003cfa:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8003cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d02:	fa93 f3a3 	rbit	r3, r3
 8003d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0a:	fab3 f383 	clz	r3, r3
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	4906      	ldr	r1, [pc, #24]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d18:	4b04      	ldr	r3, [pc, #16]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a03      	ldr	r2, [pc, #12]	@ (8003d2c <HAL_RCC_OscConfig+0x500>)
 8003d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7fe fa7a 	bl	800221c <HAL_GetTick>
 8003d28:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2a:	e00c      	b.n	8003d46 <HAL_RCC_OscConfig+0x51a>
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fe fa72 	bl	800221c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x51a>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e023      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d46:	4b14      	ldr	r3, [pc, #80]	@ (8003d98 <HAL_RCC_OscConfig+0x56c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x508>
 8003d52:	e01b      	b.n	8003d8c <HAL_RCC_OscConfig+0x560>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d54:	4b10      	ldr	r3, [pc, #64]	@ (8003d98 <HAL_RCC_OscConfig+0x56c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a0f      	ldr	r2, [pc, #60]	@ (8003d98 <HAL_RCC_OscConfig+0x56c>)
 8003d5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d5e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7fe fa5c 	bl	800221c <HAL_GetTick>
 8003d64:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x54e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fe fa58 	bl	800221c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x54e>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e009      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7a:	4b07      	ldr	r3, [pc, #28]	@ (8003d98 <HAL_RCC_OscConfig+0x56c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x53c>
 8003d86:	e001      	b.n	8003d8c <HAL_RCC_OscConfig+0x560>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x562>
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3748      	adds	r7, #72	@ 0x48
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800

08003d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003daa:	4b77      	ldr	r3, [pc, #476]	@ (8003f88 <HAL_RCC_ClockConfig+0x1ec>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d910      	bls.n	8003dda <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db8:	4b73      	ldr	r3, [pc, #460]	@ (8003f88 <HAL_RCC_ClockConfig+0x1ec>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 020f 	bic.w	r2, r3, #15
 8003dc0:	4971      	ldr	r1, [pc, #452]	@ (8003f88 <HAL_RCC_ClockConfig+0x1ec>)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f88 <HAL_RCC_ClockConfig+0x1ec>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d001      	beq.n	8003dda <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0d2      	b.n	8003f80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de6:	4b69      	ldr	r3, [pc, #420]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	4966      	ldr	r1, [pc, #408]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d06a      	beq.n	8003eda <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0c:	4b5f      	ldr	r3, [pc, #380]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d115      	bne.n	8003e44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0b1      	b.n	8003f80 <HAL_RCC_ClockConfig+0x1e4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e24:	4b59      	ldr	r3, [pc, #356]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0a5      	b.n	8003f80 <HAL_RCC_ClockConfig+0x1e4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e34:	4b55      	ldr	r3, [pc, #340]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e09d      	b.n	8003f80 <HAL_RCC_ClockConfig+0x1e4>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e44:	4b51      	ldr	r3, [pc, #324]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f023 0203 	bic.w	r2, r3, #3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	494e      	ldr	r1, [pc, #312]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e56:	f7fe f9e1 	bl	800221c <HAL_GetTick>
 8003e5a:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d112      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e64:	e00a      	b.n	8003e7c <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e66:	f7fe f9d9 	bl	800221c <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e081      	b.n	8003f80 <HAL_RCC_ClockConfig+0x1e4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e7c:	4b43      	ldr	r3, [pc, #268]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d1ee      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xca>
 8003e88:	e027      	b.n	8003eda <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d11d      	bne.n	8003ece <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e94:	f7fe f9c2 	bl	800221c <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e06a      	b.n	8003f80 <HAL_RCC_ClockConfig+0x1e4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eaa:	4b38      	ldr	r3, [pc, #224]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d1ee      	bne.n	8003e94 <HAL_RCC_ClockConfig+0xf8>
 8003eb6:	e010      	b.n	8003eda <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb8:	f7fe f9b0 	bl	800221c <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e058      	b.n	8003f80 <HAL_RCC_ClockConfig+0x1e4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ece:	4b2f      	ldr	r3, [pc, #188]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1ee      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x11c>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003eda:	4b2b      	ldr	r3, [pc, #172]	@ (8003f88 <HAL_RCC_ClockConfig+0x1ec>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d210      	bcs.n	8003f0a <HAL_RCC_ClockConfig+0x16e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee8:	4b27      	ldr	r3, [pc, #156]	@ (8003f88 <HAL_RCC_ClockConfig+0x1ec>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f023 020f 	bic.w	r2, r3, #15
 8003ef0:	4925      	ldr	r1, [pc, #148]	@ (8003f88 <HAL_RCC_ClockConfig+0x1ec>)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ef8:	4b23      	ldr	r3, [pc, #140]	@ (8003f88 <HAL_RCC_ClockConfig+0x1ec>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d001      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e03a      	b.n	8003f80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f16:	4b1d      	ldr	r3, [pc, #116]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	491a      	ldr	r1, [pc, #104]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d009      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f34:	4b15      	ldr	r3, [pc, #84]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	4912      	ldr	r1, [pc, #72]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003f48:	f000 f826 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 8003f4c:	4601      	mov	r1, r0
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f8c <HAL_RCC_ClockConfig+0x1f0>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f56:	23f0      	movs	r3, #240	@ 0xf0
 8003f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	fa93 f3a3 	rbit	r3, r3
 8003f60:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6c:	4a08      	ldr	r2, [pc, #32]	@ (8003f90 <HAL_RCC_ClockConfig+0x1f4>)
 8003f6e:	5cd3      	ldrb	r3, [r2, r3]
 8003f70:	fa21 f303 	lsr.w	r3, r1, r3
 8003f74:	4a07      	ldr	r2, [pc, #28]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f8>)
 8003f76:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f78:	2000      	movs	r0, #0
 8003f7a:	f7fe f925 	bl	80021c8 <HAL_InitTick>
  
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40023c00 	.word	0x40023c00
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	08006068 	.word	0x08006068
 8003f94:	20000068 	.word	0x20000068

08003f98 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b08b      	sub	sp, #44	@ 0x2c
 8003f9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fae:	4b38      	ldr	r3, [pc, #224]	@ (8004090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d00c      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x3c>
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d85d      	bhi.n	800407a <HAL_RCC_GetSysClockFreq+0xe2>
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x30>
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d003      	beq.n	8003fce <HAL_RCC_GetSysClockFreq+0x36>
 8003fc6:	e058      	b.n	800407a <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fc8:	4b32      	ldr	r3, [pc, #200]	@ (8004094 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003fca:	623b      	str	r3, [r7, #32]
       break;
 8003fcc:	e058      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fce:	4b32      	ldr	r3, [pc, #200]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x100>)
 8003fd0:	623b      	str	r3, [r7, #32]
      break;
 8003fd2:	e055      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8004090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fdc:	61fb      	str	r3, [r7, #28]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003fde:	4b2c      	ldr	r3, [pc, #176]	@ (8004090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d017      	beq.n	800401a <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8003fea:	4a2b      	ldr	r2, [pc, #172]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x100>)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ff2:	4b27      	ldr	r3, [pc, #156]	@ (8004090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ffa:	400b      	ands	r3, r1
 8003ffc:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 8004000:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004002:	6979      	ldr	r1, [r7, #20]
 8004004:	fa91 f1a1 	rbit	r1, r1
 8004008:	6139      	str	r1, [r7, #16]
  return(result);
 800400a:	6939      	ldr	r1, [r7, #16]
 800400c:	fab1 f181 	clz	r1, r1
 8004010:	40cb      	lsrs	r3, r1
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
 8004018:	e016      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800401a:	4a1e      	ldr	r2, [pc, #120]	@ (8004094 <HAL_RCC_GetSysClockFreq+0xfc>)
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004022:	4b1b      	ldr	r3, [pc, #108]	@ (8004090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004024:	6859      	ldr	r1, [r3, #4]
 8004026:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800402a:	400b      	ands	r3, r1
 800402c:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 8004030:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	fa91 f1a1 	rbit	r1, r1
 8004038:	60b9      	str	r1, [r7, #8]
  return(result);
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	fab1 f181 	clz	r1, r1
 8004040:	40cb      	lsrs	r3, r1
 8004042:	fb02 f303 	mul.w	r3, r2, r3
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8004048:	4b11      	ldr	r3, [pc, #68]	@ (8004090 <HAL_RCC_GetSysClockFreq+0xf8>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004050:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004054:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	fa93 f3a3 	rbit	r3, r3
 800405c:	603b      	str	r3, [r7, #0]
  return(result);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	fab3 f383 	clz	r3, r3
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
 8004068:	3301      	adds	r3, #1
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 800406e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	623b      	str	r3, [r7, #32]
      break;
 8004078:	e002      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800407a:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <HAL_RCC_GetSysClockFreq+0xfc>)
 800407c:	623b      	str	r3, [r7, #32]
      break;
 800407e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004080:	6a3b      	ldr	r3, [r7, #32]
}
 8004082:	4618      	mov	r0, r3
 8004084:	372c      	adds	r7, #44	@ 0x2c
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40023800 	.word	0x40023800
 8004094:	00f42400 	.word	0x00f42400
 8004098:	017d7840 	.word	0x017d7840

0800409c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect. 
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a0:	4b03      	ldr	r3, [pc, #12]	@ (80040b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040a2:	681b      	ldr	r3, [r3, #0]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000068 	.word	0x20000068

080040b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b0d8      	sub	sp, #352	@ 0x160
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80040be:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80040c2:	6018      	str	r0, [r3, #0]
  uint32_t tickstart = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  uint32_t tmpreg0 = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
  uint32_t tmpreg1 = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint32_t plli2sused = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  uint32_t pllsaiused = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040e2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80040e6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01b      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040f6:	4b94      	ldr	r3, [pc, #592]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	4a93      	ldr	r2, [pc, #588]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80040fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004100:	6093      	str	r3, [r2, #8]
 8004102:	4b91      	ldr	r3, [pc, #580]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800410a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004112:	498d      	ldr	r1, [pc, #564]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004114:	4313      	orrs	r3, r2
 8004116:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004118:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800411c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004124:	2b00      	cmp	r3, #0
 8004126:	d102      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1; 
 8004128:	2301      	movs	r3, #1
 800412a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800412e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004132:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d025      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004142:	4b81      	ldr	r3, [pc, #516]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004144:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004148:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800414c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004150:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004158:	497b      	ldr	r1, [pc, #492]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004160:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004164:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004170:	d102      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      plli2sused = 1; 
 8004172:	2301      	movs	r3, #1
 8004174:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004178:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800417c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xda>
    {
      pllsaiused = 1; 
 8004188:	2301      	movs	r3, #1
 800418a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800418e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004192:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d025      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041a2:	4b69      	ldr	r3, [pc, #420]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80041a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041ac:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80041b0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	4963      	ldr	r1, [pc, #396]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041c0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80041c4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041d0:	d102      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      plli2sused = 1; 
 80041d2:	2301      	movs	r3, #1
 80041d4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041d8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80041dc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      pllsaiused = 1; 
 80041e8:	2301      	movs	r3, #1
 80041ea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041ee:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80041f2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {    
      plli2sused = 1; 
 8004202:	2301      	movs	r3, #1
 8004204:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004208:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800420c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80ae 	beq.w	800437a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800421e:	4b4a      	ldr	r3, [pc, #296]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	4a49      	ldr	r2, [pc, #292]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004228:	6413      	str	r3, [r2, #64]	@ 0x40
 800422a:	4b47      	ldr	r3, [pc, #284]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004232:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004236:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004240:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004244:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004246:	4b41      	ldr	r3, [pc, #260]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a40      	ldr	r2, [pc, #256]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800424c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004250:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004252:	f7fd ffe3 	bl	800221c <HAL_GetTick>
 8004256:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800425a:	e00a      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425c:	f7fd ffde 	bl	800221c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b64      	cmp	r3, #100	@ 0x64
 800426a:	d902      	bls.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      {
        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	f000 bfd9 	b.w	8005224 <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004272:	4b36      	ldr	r3, [pc, #216]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0ee      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800427e:	4b32      	ldr	r3, [pc, #200]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004286:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800428a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800428e:	2b00      	cmp	r3, #0
 8004290:	d03f      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004292:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004296:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a2:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d033      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042aa:	4b27      	ldr	r3, [pc, #156]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042b2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042b6:	4b24      	ldr	r3, [pc, #144]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ba:	4a23      	ldr	r2, [pc, #140]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042c2:	4b21      	ldr	r3, [pc, #132]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c6:	4a20      	ldr	r2, [pc, #128]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80042c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80042d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80042d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d017      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e2:	f7fd ff9b 	bl	800221c <HAL_GetTick>
 80042e6:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ea:	e00c      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x252>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ec:	f7fd ff96 	bl	800221c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d902      	bls.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x252>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	f000 bf8f 	b.w	8005224 <HAL_RCCEx_PeriphCLKConfig+0x1170>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004306:	4b10      	ldr	r3, [pc, #64]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ec      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x238>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004312:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004316:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004322:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004326:	d115      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8004328:	4b07      	ldr	r3, [pc, #28]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004330:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004334:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800433c:	4b04      	ldr	r3, [pc, #16]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800433e:	400b      	ands	r3, r1
 8004340:	4901      	ldr	r1, [pc, #4]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
 8004346:	e00b      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004348:	40023800 	.word	0x40023800
 800434c:	40007000 	.word	0x40007000
 8004350:	0ffffcff 	.word	0x0ffffcff
 8004354:	4bbb      	ldr	r3, [pc, #748]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	4aba      	ldr	r2, [pc, #744]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800435a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800435e:	6093      	str	r3, [r2, #8]
 8004360:	4bb8      	ldr	r3, [pc, #736]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004362:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004364:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004368:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004374:	49b3      	ldr	r1, [pc, #716]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004376:	4313      	orrs	r3, r2
 8004378:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800437a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800437e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	d014      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800438e:	4bad      	ldr	r3, [pc, #692]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004390:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004394:	4aab      	ldr	r2, [pc, #684]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004396:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800439a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800439e:	4ba9      	ldr	r3, [pc, #676]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80043a4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80043a8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b0:	49a4      	ldr	r1, [pc, #656]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043b8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80043bc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00e      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043cc:	4b9d      	ldr	r3, [pc, #628]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043d6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80043da:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043e2:	4998      	ldr	r1, [pc, #608]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043ea:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80043ee:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00e      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043fe:	4b91      	ldr	r3, [pc, #580]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004404:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004408:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800440c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004414:	498b      	ldr	r1, [pc, #556]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800441c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004420:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00e      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004430:	4b84      	ldr	r3, [pc, #528]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004436:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800443a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800443e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004446:	497f      	ldr	r1, [pc, #508]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800444e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004452:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00e      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004462:	4b78      	ldr	r3, [pc, #480]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004468:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800446c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004470:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004478:	4972      	ldr	r1, [pc, #456]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004480:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004484:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00e      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004494:	4b6b      	ldr	r3, [pc, #428]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80044a2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	4966      	ldr	r1, [pc, #408]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044b2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80044b6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00e      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044cc:	f023 020c 	bic.w	r2, r3, #12
 80044d0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80044d4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044dc:	4959      	ldr	r1, [pc, #356]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044e4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80044e8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00e      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044f8:	4b52      	ldr	r3, [pc, #328]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044fe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004502:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004506:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450e:	494d      	ldr	r1, [pc, #308]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004516:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800451a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00e      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800452a:	4b46      	ldr	r3, [pc, #280]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800452c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004530:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004534:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004538:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004540:	4940      	ldr	r1, [pc, #256]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004548:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800454c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00e      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800455c:	4b39      	ldr	r3, [pc, #228]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004562:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004566:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800456a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004572:	4934      	ldr	r1, [pc, #208]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800457a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800457e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00e      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800458e:	4b2d      	ldr	r3, [pc, #180]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004594:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004598:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800459c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a4:	4927      	ldr	r1, [pc, #156]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045ac:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80045b0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00e      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045c0:	4b20      	ldr	r3, [pc, #128]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045ca:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80045ce:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d6:	491b      	ldr	r1, [pc, #108]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045de:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80045e2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00e      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045f2:	4b14      	ldr	r3, [pc, #80]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045fc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004600:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004608:	490e      	ldr	r1, [pc, #56]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004610:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004614:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d011      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004624:	4b07      	ldr	r3, [pc, #28]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800462e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004632:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800463a:	4902      	ldr	r1, [pc, #8]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004642:	e001      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004644:	40023800 	.word	0x40023800
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004648:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800464c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x5de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800465c:	4b66      	ldr	r3, [pc, #408]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004662:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004666:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800466a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004672:	4961      	ldr	r1, [pc, #388]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800467a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800467e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004686:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800468a:	d102      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x5de>
    {
      pllsaiused = 1; 
 800468c:	2301      	movs	r3, #1
 800468e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004692:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004696:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    pllsaiused = 1; 
 80046a6:	2301      	movs	r3, #1
 80046a8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046ac:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80046b0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00e      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046c0:	4b4d      	ldr	r3, [pc, #308]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046ca:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80046ce:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d6:	4948      	ldr	r1, [pc, #288]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046de:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80046e2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00f      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x65e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046f2:	4b41      	ldr	r3, [pc, #260]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80046f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80046fc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004700:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800470a:	493b      	ldr	r1, [pc, #236]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004712:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004716:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00f      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004726:	4b34      	ldr	r3, [pc, #208]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004730:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004734:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800473e:	492e      	ldr	r1, [pc, #184]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004746:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800474a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00f      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800475a:	4b27      	ldr	r3, [pc, #156]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800475c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004760:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004764:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004768:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004772:	4921      	ldr	r1, [pc, #132]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800477a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800477e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00f      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800478e:	4b1a      	ldr	r3, [pc, #104]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004790:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004794:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004798:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800479c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047a6:	4914      	ldr	r1, [pc, #80]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80047ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d009      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x716>
 80047b6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80047ba:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047c6:	f040 8284 	bne.w	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 80047ca:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a0a      	ldr	r2, [pc, #40]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80047d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047d4:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d6:	f7fd fd21 	bl	800221c <HAL_GetTick>
 80047da:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047de:	e00d      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047e0:	f7fd fd1c 	bl	800221c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b64      	cmp	r3, #100	@ 0x64
 80047ee:	d905      	bls.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x748>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	f000 bd17 	b.w	8005224 <HAL_RCCEx_PeriphCLKConfig+0x1170>
 80047f6:	bf00      	nop
 80047f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047fc:	4be4      	ldr	r3, [pc, #912]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1eb      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004808:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800480c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 808c 	beq.w	8004936 <HAL_RCCEx_PeriphCLKConfig+0x882>
 800481e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004822:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482a:	2b00      	cmp	r3, #0
 800482c:	f040 8083 	bne.w	8004936 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8004830:	4bd7      	ldr	r3, [pc, #860]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004836:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800483a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800483e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004842:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004846:	fa93 f3a3 	rbit	r3, r3
 800484a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  return(result);
 800484e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004852:	fab3 f383 	clz	r3, r3
 8004856:	fa22 f303 	lsr.w	r3, r2, r3
 800485a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800485e:	4bcc      	ldr	r3, [pc, #816]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004864:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004868:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 800486c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004870:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004874:	fa93 f3a3 	rbit	r3, r3
 8004878:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  return(result);
 800487c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004880:	fab3 f383 	clz	r3, r3
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800488c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004890:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800489c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80048a4:	fa93 f3a3 	rbit	r3, r3
 80048a8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return(result);
 80048ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80048b0:	fab3 f383 	clz	r3, r3
 80048b4:	409a      	lsls	r2, r3
 80048b6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80048ba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048be:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80048c2:	fa93 f3a3 	rbit	r3, r3
 80048c6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return(result);
 80048ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80048ce:	fab3 f383 	clz	r3, r3
 80048d2:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80048d6:	fa01 f303 	lsl.w	r3, r1, r3
 80048da:	431a      	orrs	r2, r3
 80048dc:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 80048e0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80048e8:	fa93 f3a3 	rbit	r3, r3
 80048ec:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  return(result);
 80048f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80048f4:	fab3 f383 	clz	r3, r3
 80048f8:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	431a      	orrs	r2, r3
 8004902:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004906:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6899      	ldr	r1, [r3, #8]
 800490e:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004912:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  return(result);
 8004922:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004926:	fab3 f383 	clz	r3, r3
 800492a:	fa01 f303 	lsl.w	r3, r1, r3
 800492e:	4998      	ldr	r1, [pc, #608]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004936:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800493a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800494a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800494e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004956:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800495a:	d014      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 800495c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004960:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 809d 	beq.w	8004aac <HAL_RCCEx_PeriphCLKConfig+0x9f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8004972:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004976:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004982:	f040 8093 	bne.w	8004aac <HAL_RCCEx_PeriphCLKConfig+0x9f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8004986:	4b82      	ldr	r3, [pc, #520]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800498c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004990:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004994:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004998:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800499c:	fa93 f3a3 	rbit	r3, r3
 80049a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  return(result);
 80049a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80049a8:	fab3 f383 	clz	r3, r3
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
 80049b0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80049b4:	4b76      	ldr	r3, [pc, #472]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 80049b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80049be:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80049c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049ca:	fa93 f3a3 	rbit	r3, r3
 80049ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  return(result);
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d6:	fab3 f383 	clz	r3, r3
 80049da:	fa22 f303 	lsr.w	r3, r2, r3
 80049de:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049e2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80049e6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  return(result);
 8004a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a06:	fab3 f383 	clz	r3, r3
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004a10:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a14:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004a18:	fa93 f3a3 	rbit	r3, r3
 8004a1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  return(result);
 8004a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a24:	fab3 f383 	clz	r3, r3
 8004a28:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8004a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a30:	431a      	orrs	r2, r3
 8004a32:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004a36:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68d9      	ldr	r1, [r3, #12]
 8004a3e:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8004a42:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a46:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004a4a:	fa93 f3a3 	rbit	r3, r3
 8004a4e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return(result);
 8004a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a56:	fab3 f383 	clz	r3, r3
 8004a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004a64:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a68:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004a6c:	fa93 f3a3 	rbit	r3, r3
 8004a70:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  return(result);
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a78:	fab3 f383 	clz	r3, r3
 8004a7c:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8004a80:	fa01 f303 	lsl.w	r3, r1, r3
 8004a84:	4942      	ldr	r1, [pc, #264]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8004a8c:	4b40      	ldr	r3, [pc, #256]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a92:	f023 021f 	bic.w	r2, r3, #31
 8004a96:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004a9a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	493a      	ldr	r1, [pc, #232]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004aac:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004ab0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8086 	beq.w	8004bce <HAL_RCCEx_PeriphCLKConfig+0xb1a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8004ac2:	4b33      	ldr	r3, [pc, #204]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ac8:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004acc:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8004ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ad8:	fa93 f3a3 	rbit	r3, r3
 8004adc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  return(result);
 8004ae0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004ae4:	fab3 f383 	clz	r3, r3
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aec:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8004af0:	4b27      	ldr	r3, [pc, #156]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 8004af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004af6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004afa:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004afe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b06:	fa93 f3a3 	rbit	r3, r3
 8004b0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  return(result);
 8004b0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b1e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004b22:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b36:	fa93 f3a3 	rbit	r3, r3
 8004b3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return(result);
 8004b3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b42:	fab3 f383 	clz	r3, r3
 8004b46:	409a      	lsls	r2, r3
 8004b48:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004b4c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6919      	ldr	r1, [r3, #16]
 8004b54:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004b58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b60:	fa93 f3a3 	rbit	r3, r3
 8004b64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  return(result);
 8004b68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b6c:	fab3 f383 	clz	r3, r3
 8004b70:	fa01 f303 	lsl.w	r3, r1, r3
 8004b74:	431a      	orrs	r2, r3
 8004b76:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8004b7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b82:	fa93 f3a3 	rbit	r3, r3
 8004b86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  return(result);
 8004b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b8e:	e001      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004b90:	40023800 	.word	0x40023800
 8004b94:	fab3 f383 	clz	r3, r3
 8004b98:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8004b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004bae:	fa93 f3a3 	rbit	r3, r3
 8004bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  return(result);
 8004bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bba:	fab3 f383 	clz	r3, r3
 8004bbe:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8004bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc6:	4950      	ldr	r1, [pc, #320]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bce:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004bd2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d05c      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xbe8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004be2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004be6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004bfa:	fa93 f3a3 	rbit	r3, r3
 8004bfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return(result);
 8004c02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c06:	fab3 f383 	clz	r3, r3
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004c10:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6919      	ldr	r1, [r3, #16]
 8004c18:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c24:	fa93 f3a3 	rbit	r3, r3
 8004c28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  return(result);
 8004c2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c30:	fab3 f383 	clz	r3, r3
 8004c34:	fa01 f303 	lsl.w	r3, r1, r3
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004c3e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68d9      	ldr	r1, [r3, #12]
 8004c46:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8004c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004c52:	fa93 f3a3 	rbit	r3, r3
 8004c56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return(result);
 8004c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c5e:	fab3 f383 	clz	r3, r3
 8004c62:	fa01 f303 	lsl.w	r3, r1, r3
 8004c66:	431a      	orrs	r2, r3
 8004c68:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004c6c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6899      	ldr	r1, [r3, #8]
 8004c74:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004c78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return(result);
 8004c88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c8c:	fab3 f383 	clz	r3, r3
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	491c      	ldr	r1, [pc, #112]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a19      	ldr	r2, [pc, #100]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004ca2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ca6:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca8:	f7fd fab8 	bl	800221c <HAL_GetTick>
 8004cac:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb0:	e009      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cb2:	f7fd fab3 	bl	800221c <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	@ 0x64
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xc12>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e2ae      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cc6:	4b10      	ldr	r3, [pc, #64]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0ef      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004cd2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	f040 82a3 	bne.w	8005222 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8004cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a09      	ldr	r2, [pc, #36]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004ce2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ce6:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce8:	f7fd fa98 	bl	800221c <HAL_GetTick>
 8004cec:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cf0:	e00c      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xc58>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cf2:	f7fd fa93 	bl	800221c <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	@ 0x64
 8004d00:	d904      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xc58>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e28e      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x1170>
 8004d06:	bf00      	nop
 8004d08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d0c:	4bd4      	ldr	r3, [pc, #848]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d18:	d0eb      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xc3e>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d1a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004d1e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 8004d2e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004d32:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d013      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d3e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004d42:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8093 	beq.w	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d54:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004d58:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f040 808a 	bne.w	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8004d66:	4bbe      	ldr	r3, [pc, #760]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d70:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004d74:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d78:	fa93 f3a3 	rbit	r3, r3
 8004d7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return(result);
 8004d7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d80:	fab3 f383 	clz	r3, r3
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
 8004d88:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8004d8c:	4bb4      	ldr	r3, [pc, #720]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d92:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004d96:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d9e:	fa93 f3a3 	rbit	r3, r3
 8004da2:	677b      	str	r3, [r7, #116]	@ 0x74
  return(result);
 8004da4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004da6:	fab3 f383 	clz	r3, r3
 8004daa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dae:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004db2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004db6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004dc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004dca:	fa93 f3a3 	rbit	r3, r3
 8004dce:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return(result);
 8004dd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004ddc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004de4:	fa93 f3a3 	rbit	r3, r3
 8004de8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8004dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004df0:	fab3 f383 	clz	r3, r3
 8004df4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8004df8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004e02:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6999      	ldr	r1, [r3, #24]
 8004e0a:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8004e0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e16:	fa93 f3a3 	rbit	r3, r3
 8004e1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  return(result);
 8004e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e22:	fab3 f383 	clz	r3, r3
 8004e26:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004e30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e38:	fa93 f3a3 	rbit	r3, r3
 8004e3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return(result);
 8004e40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e44:	fab3 f383 	clz	r3, r3
 8004e48:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8004e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e50:	4983      	ldr	r1, [pc, #524]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e58:	4b81      	ldr	r3, [pc, #516]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e5e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004e62:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004e66:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	497b      	ldr	r1, [pc, #492]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e7a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004e7e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80c5 	beq.w	800501a <HAL_RCCEx_PeriphCLKConfig+0xf66>
 8004e90:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004e94:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ea0:	f040 80bb 	bne.w	800501a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8004ea4:	4b6e      	ldr	r3, [pc, #440]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004eae:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004eb2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004eb6:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 8004eba:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004ec0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	fa93 f1a3 	rbit	r1, r3
 8004eca:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004ece:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004ed2:	6019      	str	r1, [r3, #0]
  return(result);
 8004ed4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004ed8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	fab3 f383 	clz	r3, r3
 8004ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8004eea:	4b5d      	ldr	r3, [pc, #372]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8004eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef0:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004ef4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004ef8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004efc:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8004f00:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f06:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	fa93 f1a3 	rbit	r1, r3
 8004f10:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f14:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004f18:	6019      	str	r1, [r3, #0]
  return(result);
 8004f1a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f1e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	fab3 f383 	clz	r3, r3
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f30:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f34:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695a      	ldr	r2, [r3, #20]
 8004f3c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004f44:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 8004f48:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f4e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	fa93 f1a3 	rbit	r1, r3
 8004f58:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f5c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004f60:	6019      	str	r1, [r3, #0]
  return(result);
 8004f62:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	fab3 f383 	clz	r3, r3
 8004f70:	409a      	lsls	r2, r3
 8004f72:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f76:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6a19      	ldr	r1, [r3, #32]
 8004f7e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f86:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8004f8a:	6018      	str	r0, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	fa93 f0a3 	rbit	r0, r3
 8004f9a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004f9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004fa2:	6018      	str	r0, [r3, #0]
  return(result);
 8004fa4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004fa8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	fab3 f383 	clz	r3, r3
 8004fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004fbc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004fc0:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 8004fc4:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004fca:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	fa93 f1a3 	rbit	r1, r3
 8004fd4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004fd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fdc:	6019      	str	r1, [r3, #0]
  return(result);
 8004fde:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	fab3 f383 	clz	r3, r3
 8004fec:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8004ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004ffa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ffe:	fa93 f3a3 	rbit	r3, r3
 8005002:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8005004:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005006:	fab3 f383 	clz	r3, r3
 800500a:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 800500e:	fa01 f303 	lsl.w	r3, r1, r3
 8005012:	4913      	ldr	r1, [pc, #76]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800501a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800501e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 80dd 	beq.w	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005030:	4b0b      	ldr	r3, [pc, #44]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005036:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800503a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800503e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005042:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 8005046:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005048:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800504c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	fa93 f1a3 	rbit	r1, r3
 8005056:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800505a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800505e:	e001      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
 8005060:	40023800 	.word	0x40023800
 8005064:	6019      	str	r1, [r3, #0]
  return(result);
 8005066:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800506a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	fab3 f383 	clz	r3, r3
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
 8005078:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800507c:	4b6c      	ldr	r3, [pc, #432]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005082:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005086:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800508a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800508e:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8005092:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005094:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005098:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	fa93 f1a3 	rbit	r1, r3
 80050a2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80050a6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80050aa:	6019      	str	r1, [r3, #0]
  return(result);
 80050ac:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80050b0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	fab3 f383 	clz	r3, r3
 80050ba:	fa22 f303 	lsr.w	r3, r2, r3
 80050be:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80050c2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80050c6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695a      	ldr	r2, [r3, #20]
 80050ce:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80050d2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80050d6:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 80050da:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050dc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80050e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	fa93 f1a3 	rbit	r1, r3
 80050ea:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80050ee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80050f2:	6019      	str	r1, [r3, #0]
  return(result);
 80050f4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80050f8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	fab3 f383 	clz	r3, r3
 8005102:	409a      	lsls	r2, r3
 8005104:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005108:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800510c:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8005110:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005112:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005116:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	fa93 f1a3 	rbit	r1, r3
 8005120:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005124:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005128:	6019      	str	r1, [r3, #0]
  return(result);
 800512a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800512e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	fab3 f383 	clz	r3, r3
 8005138:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 800513c:	fa01 f303 	lsl.w	r3, r1, r3
 8005140:	431a      	orrs	r2, r3
 8005142:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005146:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800514a:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 800514e:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005150:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005154:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	fa93 f1a3 	rbit	r1, r3
 800515e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005162:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005166:	6019      	str	r1, [r3, #0]
  return(result);
 8005168:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800516c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	fab3 f383 	clz	r3, r3
 8005176:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800517a:	fa01 f303 	lsl.w	r3, r1, r3
 800517e:	431a      	orrs	r2, r3
 8005180:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005184:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69d9      	ldr	r1, [r3, #28]
 800518c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8005190:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005194:	f04f 40e0 	mov.w	r0, #1879048192	@ 0x70000000
 8005198:	6018      	str	r0, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800519e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	fa93 f0a3 	rbit	r0, r3
 80051a8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80051ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80051b0:	6018      	str	r0, [r3, #0]
  return(result);
 80051b2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80051b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	fab3 f383 	clz	r3, r3
 80051c0:	fa01 f303 	lsl.w	r3, r1, r3
 80051c4:	491a      	ldr	r1, [pc, #104]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051cc:	4b18      	ldr	r3, [pc, #96]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 80051ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051d6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80051da:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e2:	4913      	ldr	r1, [pc, #76]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051ea:	4b11      	ldr	r3, [pc, #68]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a10      	ldr	r2, [pc, #64]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 80051f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051f4:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f6:	f7fd f811 	bl	800221c <HAL_GetTick>
 80051fa:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051fe:	e009      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x1160>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005200:	f7fd f80c 	bl	800221c <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b64      	cmp	r3, #100	@ 0x64
 800520e:	d901      	bls.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x1160>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e007      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005214:	4b06      	ldr	r3, [pc, #24]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800521c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005220:	d1ee      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x114c>
      }
    }
  }
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800

08005234 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005234:	b480      	push	{r7}
 8005236:	b09b      	sub	sp, #108	@ 0x6c
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	667b      	str	r3, [r7, #100]	@ 0x64
  
  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4ab6      	ldr	r2, [pc, #728]	@ (800551c <HAL_RCCEx_GetPeriphCLKConfig+0x2e8>)
 8005244:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8005246:	4bb6      	ldr	r3, [pc, #728]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005248:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800524c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005250:	4013      	ands	r3, r2
 8005252:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005256:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	fa92 f2a2 	rbit	r2, r2
 800525e:	60fa      	str	r2, [r7, #12]
  return(result);
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	fab2 f282 	clz	r2, r2
 8005266:	fa23 f202 	lsr.w	r2, r3, r2
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800526e:	4bac      	ldr	r3, [pc, #688]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005274:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005278:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800527c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	fa93 f3a3 	rbit	r3, r3
 8005284:	617b      	str	r3, [r7, #20]
  return(result);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	fab3 f383 	clz	r3, r3
 800528c:	40da      	lsrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005292:	4ba3      	ldr	r3, [pc, #652]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005294:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005298:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800529c:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 80052a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	fa93 f3a3 	rbit	r3, r3
 80052a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	fab3 f383 	clz	r3, r3
 80052b0:	40da      	lsrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80052b6:	4b9a      	ldr	r3, [pc, #616]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80052b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052bc:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80052c0:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80052c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c8:	fa93 f3a3 	rbit	r3, r3
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	fab3 f383 	clz	r3, r3
 80052d4:	40da      	lsrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	609a      	str	r2, [r3, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 80052da:	4b91      	ldr	r3, [pc, #580]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80052dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80052e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052e4:	4013      	ands	r3, r2
 80052e6:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80052ea:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ee:	fa92 f2a2 	rbit	r2, r2
 80052f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
  return(result);
 80052f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f6:	fab2 f282 	clz	r2, r2
 80052fa:	fa23 f202 	lsr.w	r2, r3, r2
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8005302:	4b87      	ldr	r3, [pc, #540]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005308:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800530c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8005310:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005314:	fa93 f3a3 	rbit	r3, r3
 8005318:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800531a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531c:	fab3 f383 	clz	r3, r3
 8005320:	40da      	lsrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 8005326:	4b7e      	ldr	r3, [pc, #504]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532c:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005330:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8005334:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005338:	fa93 f3a3 	rbit	r3, r3
 800533c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800533e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005340:	fab3 f383 	clz	r3, r3
 8005344:	40da      	lsrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 800534a:	4b75      	ldr	r3, [pc, #468]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005350:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005354:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8005358:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800535c:	fa93 f3a3 	rbit	r3, r3
 8005360:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005364:	fab3 f383 	clz	r3, r3
 8005368:	40da      	lsrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	61da      	str	r2, [r3, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 800536e:	4b6c      	ldr	r3, [pc, #432]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005370:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005374:	f003 021f 	and.w	r2, r3, #31
 8005378:	231f      	movs	r3, #31
 800537a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800537e:	fa93 f3a3 	rbit	r3, r3
 8005382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8005384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005386:	fab3 f383 	clz	r3, r3
 800538a:	40da      	lsrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 8005390:	4b63      	ldr	r3, [pc, #396]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005392:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005396:	f403 52f8 	and.w	r2, r3, #7936	@ 0x1f00
 800539a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800539e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053a2:	fa93 f3a3 	rbit	r3, r3
 80053a6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80053a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053aa:	fab3 f383 	clz	r3, r3
 80053ae:	40da      	lsrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 80053b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80053b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053be:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80053c2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053c6:	fa93 f3a3 	rbit	r3, r3
 80053ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  return(result);
 80053cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053ce:	fab3 f383 	clz	r3, r3
 80053d2:	40da      	lsrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80053d8:	4b51      	ldr	r3, [pc, #324]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80053da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053de:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80053e6:	4b4e      	ldr	r3, [pc, #312]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80053e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053ec:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80053f4:	4b4a      	ldr	r3, [pc, #296]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	635a      	str	r2, [r3, #52]	@ 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8005400:	4b47      	ldr	r3, [pc, #284]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005406:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	665a      	str	r2, [r3, #100]	@ 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800540e:	4b44      	ldr	r3, [pc, #272]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005414:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	669a      	str	r2, [r3, #104]	@ 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800541c:	4b40      	ldr	r3, [pc, #256]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005422:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	66da      	str	r2, [r3, #108]	@ 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800542a:	4b3d      	ldr	r3, [pc, #244]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005430:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	671a      	str	r2, [r3, #112]	@ 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8005438:	4b39      	ldr	r3, [pc, #228]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543e:	f003 0203 	and.w	r2, r3, #3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8005446:	4b36      	ldr	r3, [pc, #216]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800544c:	f003 020c 	and.w	r2, r3, #12
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	649a      	str	r2, [r3, #72]	@ 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8005454:	4b32      	ldr	r3, [pc, #200]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800545a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	64da      	str	r2, [r3, #76]	@ 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8005462:	4b2f      	ldr	r3, [pc, #188]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005468:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8005470:	4b2b      	ldr	r3, [pc, #172]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005476:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800547e:	4b28      	ldr	r3, [pc, #160]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005484:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	659a      	str	r2, [r3, #88]	@ 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800548c:	4b24      	ldr	r3, [pc, #144]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005492:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800549a:	4b21      	ldr	r3, [pc, #132]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a0:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	661a      	str	r2, [r3, #96]	@ 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80054a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ae:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	675a      	str	r2, [r3, #116]	@ 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80054b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80054b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054bc:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	679a      	str	r2, [r3, #120]	@ 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80054c4:	4b16      	ldr	r3, [pc, #88]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ca:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80054d2:	4b13      	ldr	r3, [pc, #76]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 80054e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e8:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	
  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 80054f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 80054f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054f8:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
 8005502:	4b07      	ldr	r3, [pc, #28]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005508:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005512:	4b03      	ldr	r3, [pc, #12]	@ (8005520 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800551a:	e003      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKConfig+0x2f0>
 800551c:	1cfffff1 	.word	0x1cfffff1
 8005520:	40023800 	.word	0x40023800
 8005524:	667b      	str	r3, [r7, #100]	@ 0x64
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005526:	4b0e      	ldr	r3, [pc, #56]	@ (8005560 <HAL_RCCEx_GetPeriphCLKConfig+0x32c>)
 8005528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552a:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800552e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	631a      	str	r2, [r3, #48]	@ 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8005536:	4b0a      	ldr	r3, [pc, #40]	@ (8005560 <HAL_RCCEx_GetPeriphCLKConfig+0x32c>)
 8005538:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800553c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d103      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKConfig+0x318>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800554a:	e003      	b.n	8005554 <HAL_RCCEx_GetPeriphCLKConfig+0x320>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005552:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005554:	bf00      	nop
 8005556:	376c      	adds	r7, #108	@ 0x6c
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	40023800 	.word	0x40023800

08005564 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	60bb      	str	r3, [r7, #8]
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005582:	f040 80a4 	bne.w	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;   
 8005586:	4ba6      	ldr	r3, [pc, #664]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800558c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005594:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800559c:	f000 808a 	beq.w	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055a6:	f200 8091 	bhi.w	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055b0:	d07d      	beq.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055b8:	f200 8088 	bhi.w	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d004      	beq.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055c8:	d039      	beq.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;       
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
    default :
      {
        break;
 80055ca:	e07f      	b.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80055cc:	4b94      	ldr	r3, [pc, #592]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d108      	bne.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055d8:	4b91      	ldr	r3, [pc, #580]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055e0:	4a90      	ldr	r2, [pc, #576]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80055e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	e007      	b.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80055ea:	4b8d      	ldr	r3, [pc, #564]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055f2:	4a8d      	ldr	r2, [pc, #564]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80055fa:	4b89      	ldr	r3, [pc, #548]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80055fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005600:	0e1b      	lsrs	r3, r3, #24
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005608:	4b85      	ldr	r3, [pc, #532]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560e:	099b      	lsrs	r3, r3, #6
 8005610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	fb03 f202 	mul.w	r2, r3, r2
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005622:	4b7f      	ldr	r3, [pc, #508]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	3301      	adds	r3, #1
 8005630:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg); 
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	fbb2 f3f3 	udiv	r3, r2, r3
 800563a:	617b      	str	r3, [r7, #20]
        break;       
 800563c:	e047      	b.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800563e:	4b78      	ldr	r3, [pc, #480]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d108      	bne.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800564a:	4b75      	ldr	r3, [pc, #468]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005652:	4a74      	ldr	r2, [pc, #464]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005654:	fbb2 f3f3 	udiv	r3, r2, r3
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	e007      	b.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800565c:	4b70      	ldr	r3, [pc, #448]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005664:	4a70      	ldr	r2, [pc, #448]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005666:	fbb2 f3f3 	udiv	r3, r2, r3
 800566a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800566c:	4b6c      	ldr	r3, [pc, #432]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800566e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005672:	0e1b      	lsrs	r3, r3, #24
 8005674:	f003 030f 	and.w	r3, r3, #15
 8005678:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800567a:	4b69      	ldr	r3, [pc, #420]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800567c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005680:	099b      	lsrs	r3, r3, #6
 8005682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	fb03 f202 	mul.w	r2, r3, r2
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005692:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8005694:	4b62      	ldr	r3, [pc, #392]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800569a:	f003 031f 	and.w	r3, r3, #31
 800569e:	3301      	adds	r3, #1
 80056a0:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056aa:	617b      	str	r3, [r7, #20]
        break;
 80056ac:	e00f      	b.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 80056ae:	4b5f      	ldr	r3, [pc, #380]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80056b0:	617b      	str	r3, [r7, #20]
        break;       
 80056b2:	e00c      	b.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80056b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 80056c0:	4b58      	ldr	r3, [pc, #352]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80056c2:	617b      	str	r3, [r7, #20]
        break;       
 80056c4:	e003      	b.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 80056c6:	4b58      	ldr	r3, [pc, #352]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056c8:	617b      	str	r3, [r7, #20]
        break;       
 80056ca:	e000      	b.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 80056cc:	bf00      	nop
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056d4:	f040 80ad 	bne.w	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;   
 80056d8:	4b51      	ldr	r3, [pc, #324]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80056da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056de:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80056e6:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056ee:	f000 808a 	beq.w	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056f8:	f200 809a 	bhi.w	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005702:	d07d      	beq.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800570a:	f200 8091 	bhi.w	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800571a:	d039      	beq.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;       
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
    default :
      {
        break;
 800571c:	e088      	b.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800571e:	4b40      	ldr	r3, [pc, #256]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d108      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800572a:	4b3d      	ldr	r3, [pc, #244]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005732:	4a3c      	ldr	r2, [pc, #240]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005734:	fbb2 f3f3 	udiv	r3, r2, r3
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	e007      	b.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800573c:	4b38      	ldr	r3, [pc, #224]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005744:	4a38      	ldr	r2, [pc, #224]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005746:	fbb2 f3f3 	udiv	r3, r2, r3
 800574a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800574c:	4b34      	ldr	r3, [pc, #208]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005752:	0e1b      	lsrs	r3, r3, #24
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800575a:	4b31      	ldr	r3, [pc, #196]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800575c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005760:	099b      	lsrs	r3, r3, #6
 8005762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	fb03 f202 	mul.w	r2, r3, r2
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005772:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005774:	4b2a      	ldr	r3, [pc, #168]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg); 
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	fbb2 f3f3 	udiv	r3, r2, r3
 800578c:	617b      	str	r3, [r7, #20]
        break;       
 800578e:	e050      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005790:	4b23      	ldr	r3, [pc, #140]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d108      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800579c:	4b20      	ldr	r3, [pc, #128]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80057a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	e007      	b.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80057ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80057b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057bc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80057be:	4b18      	ldr	r3, [pc, #96]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80057c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057c4:	0e1b      	lsrs	r3, r3, #24
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80057cc:	4b14      	ldr	r3, [pc, #80]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80057ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057d2:	099b      	lsrs	r3, r3, #6
 80057d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	fb03 f202 	mul.w	r2, r3, r2
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 80057e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80057e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057ec:	f003 031f 	and.w	r3, r3, #31
 80057f0:	3301      	adds	r3, #1
 80057f2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fc:	617b      	str	r3, [r7, #20]
        break;
 80057fe:	e018      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005800:	4b0a      	ldr	r3, [pc, #40]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005802:	617b      	str	r3, [r7, #20]
        break;       
 8005804:	e015      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005806:	4b06      	ldr	r3, [pc, #24]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d102      	bne.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 8005812:	4b04      	ldr	r3, [pc, #16]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005814:	617b      	str	r3, [r7, #20]
        break;       
 8005816:	e00c      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 8005818:	4b03      	ldr	r3, [pc, #12]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800581a:	617b      	str	r3, [r7, #20]
        break;       
 800581c:	e009      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800581e:	bf00      	nop
 8005820:	40023800 	.word	0x40023800
 8005824:	00f42400 	.word	0x00f42400
 8005828:	017d7840 	.word	0x017d7840
 800582c:	00bb8000 	.word	0x00bb8000
        break;
 8005830:	bf00      	nop
      }
    }
  }
  
  return frequency;
 8005832:	697b      	ldr	r3, [r7, #20]
}
 8005834:	4618      	mov	r0, r3
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_SAI_Init>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005850:	2300      	movs	r3, #0
 8005852:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e14d      	b.n	8005afa <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f95a 	bl	8005b2c <HAL_SAI_MspInit>
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 facd 	bl	8005e20 <SAI_Disable>
  
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d00c      	beq.n	80058a8 <HAL_SAI_Init+0x68>
 800588e:	2b02      	cmp	r3, #2
 8005890:	d80d      	bhi.n	80058ae <HAL_SAI_Init+0x6e>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_SAI_Init+0x5c>
 8005896:	2b01      	cmp	r3, #1
 8005898:	d003      	beq.n	80058a2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800589a:	e008      	b.n	80058ae <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	61fb      	str	r3, [r7, #28]
      break;
 80058a0:	e006      	b.n	80058b0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80058a2:	2310      	movs	r3, #16
 80058a4:	61fb      	str	r3, [r7, #28]
      break;
 80058a6:	e003      	b.n	80058b0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80058a8:	2320      	movs	r3, #32
 80058aa:	61fb      	str	r3, [r7, #28]
      break;
 80058ac:	e000      	b.n	80058b0 <HAL_SAI_Init+0x70>
    break;
 80058ae:	bf00      	nop
  }
  
  switch(hsai->Init.Synchro)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d81e      	bhi.n	80058f6 <HAL_SAI_Init+0xb6>
 80058b8:	a201      	add	r2, pc, #4	@ (adr r2, 80058c0 <HAL_SAI_Init+0x80>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	080058d1 	.word	0x080058d1
 80058c4:	080058d7 	.word	0x080058d7
 80058c8:	080058df 	.word	0x080058df
 80058cc:	080058e7 	.word	0x080058e7
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
      }
      break;
 80058d4:	e010      	b.n	80058f8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80058d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058da:	617b      	str	r3, [r7, #20]
      }
      break;
 80058dc:	e00c      	b.n	80058f8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80058de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80058e2:	617b      	str	r3, [r7, #20]
      }
      break;
 80058e4:	e008      	b.n	80058f8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80058e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80058ea:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f043 0301 	orr.w	r3, r3, #1
 80058f2:	61fb      	str	r3, [r7, #28]
      }
      break;
 80058f4:	e000      	b.n	80058f8 <HAL_SAI_Init+0xb8>
  default:
    break;      
 80058f6:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a81      	ldr	r2, [pc, #516]	@ (8005b04 <HAL_SAI_Init+0x2c4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d004      	beq.n	800590c <HAL_SAI_Init+0xcc>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a80      	ldr	r2, [pc, #512]	@ (8005b08 <HAL_SAI_Init+0x2c8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d103      	bne.n	8005914 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800590c:	4a7f      	ldr	r2, [pc, #508]	@ (8005b0c <HAL_SAI_Init+0x2cc>)
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	e002      	b.n	800591a <HAL_SAI_Init+0xda>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 8005914:	4a7e      	ldr	r2, [pc, #504]	@ (8005b10 <HAL_SAI_Init+0x2d0>)
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d043      	beq.n	80059aa <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a76      	ldr	r2, [pc, #472]	@ (8005b04 <HAL_SAI_Init+0x2c4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_SAI_Init+0xfa>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a74      	ldr	r2, [pc, #464]	@ (8005b08 <HAL_SAI_Init+0x2c8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d104      	bne.n	8005944 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800593a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800593e:	f7ff fe11 	bl	8005564 <HAL_RCCEx_GetPeriphCLKFreq>
 8005942:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a72      	ldr	r2, [pc, #456]	@ (8005b14 <HAL_SAI_Init+0x2d4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <HAL_SAI_Init+0x118>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a71      	ldr	r2, [pc, #452]	@ (8005b18 <HAL_SAI_Init+0x2d8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d104      	bne.n	8005962 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005958:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800595c:	f7ff fe02 	bl	8005564 <HAL_RCCEx_GetPeriphCLKFreq>
 8005960:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	461a      	mov	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	025b      	lsls	r3, r3, #9
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4a67      	ldr	r2, [pc, #412]	@ (8005b1c <HAL_SAI_Init+0x2dc>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	08da      	lsrs	r2, r3, #3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	621a      	str	r2, [r3, #32]
    
    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8005988:	68f9      	ldr	r1, [r7, #12]
 800598a:	4b64      	ldr	r3, [pc, #400]	@ (8005b1c <HAL_SAI_Init+0x2dc>)
 800598c:	fba3 2301 	umull	r2, r3, r3, r1
 8005990:	08da      	lsrs	r2, r3, #3
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	1aca      	subs	r2, r1, r3
 800599c:	2a08      	cmp	r2, #8
 800599e:	d904      	bls.n	80059aa <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	621a      	str	r2, [r3, #32]
    }
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_SAI_Init+0x17a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d109      	bne.n	80059ce <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_SAI_Init+0x186>
 80059c2:	2300      	movs	r3, #0
 80059c4:	e001      	b.n	80059ca <HAL_SAI_Init+0x18a>
 80059c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059ca:	61bb      	str	r3, [r7, #24]
 80059cc:	e008      	b.n	80059e0 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d102      	bne.n	80059dc <HAL_SAI_Init+0x19c>
 80059d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059da:	e000      	b.n	80059de <HAL_SAI_Init+0x19e>
 80059dc:	2300      	movs	r3, #0
 80059de:	61bb      	str	r3, [r7, #24]
  }
  
  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6819      	ldr	r1, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	4b4d      	ldr	r3, [pc, #308]	@ (8005b20 <HAL_SAI_Init+0x2e0>)
 80059ec:	400b      	ands	r3, r1
 80059ee:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6819      	ldr	r1, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fe:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005a04:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ckstr_bits | syncen_bits |                               \
 8005a18:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005a24:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	051b      	lsls	r3, r3, #20
 8005a2c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	601a      	str	r2, [r3, #0]
  
  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6859      	ldr	r1, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	4b38      	ldr	r3, [pc, #224]	@ (8005b24 <HAL_SAI_Init+0x2e4>)
 8005a42:	400b      	ands	r3, r1
 8005a44:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6859      	ldr	r1, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
  
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6899      	ldr	r1, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8005b28 <HAL_SAI_Init+0x2e8>)
 8005a70:	400b      	ands	r3, r1
 8005a72:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6899      	ldr	r1, [r3, #8]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7e:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005a84:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                          hsai->FrameInit.FSOffset |
 8005a8a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                          hsai->FrameInit.FSDefinition |
 8005a90:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a96:	3b01      	subs	r3, #1
 8005a98:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8005a9a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]
  
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68d9      	ldr	r1, [r3, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005ab2:	400b      	ands	r3, r1
 8005ab4:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68d9      	ldr	r1, [r3, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac4:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	60da      	str	r2, [r3, #12]
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	40015804 	.word	0x40015804
 8005b08:	40015824 	.word	0x40015824
 8005b0c:	40015800 	.word	0x40015800
 8005b10:	40015c00 	.word	0x40015c00
 8005b14:	40015c04 	.word	0x40015c04
 8005b18:	40015c24 	.word	0x40015c24
 8005b1c:	cccccccd 	.word	0xcccccccd
 8005b20:	ff05c010 	.word	0xff05c010
 8005b24:	ffff1ff0 	.word	0xffff1ff0
 8005b28:	fff88000 	.word	0xfff88000

08005b2c <HAL_SAI_MspInit>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_SAI_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	80fb      	strh	r3, [r7, #6]
  if((pData == NULL) || (Size == 0))
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <HAL_SAI_Transmit_DMA+0x1a>
 8005b54:	88fb      	ldrh	r3, [r7, #6]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_SAI_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e074      	b.n	8005c48 <HAL_SAI_Transmit_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d16d      	bne.n	8005c46 <HAL_SAI_Transmit_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_SAI_Transmit_DMA+0x38>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e067      	b.n	8005c48 <HAL_SAI_Transmit_DMA+0x108>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	88fa      	ldrh	r2, [r7, #6]
 8005b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	88fa      	ldrh	r2, [r7, #6]
 8005b92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2212      	movs	r2, #18
 8005ba2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005baa:	4a29      	ldr	r2, [pc, #164]	@ (8005c50 <HAL_SAI_Transmit_DMA+0x110>)
 8005bac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bb2:	4a28      	ldr	r2, [pc, #160]	@ (8005c54 <HAL_SAI_Transmit_DMA+0x114>)
 8005bb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bba:	4a27      	ldr	r2, [pc, #156]	@ (8005c58 <HAL_SAI_Transmit_DMA+0x118>)
 8005bbc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bce:	4619      	mov	r1, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	331c      	adds	r3, #28
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005bde:	f7fc fd73 	bl	80026c8 <HAL_DMA_Start_IT>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <HAL_SAI_Transmit_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e029      	b.n	8005c48 <HAL_SAI_Transmit_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <HAL_SAI_Transmit_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005c10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005c12:	2100      	movs	r1, #0
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f8cd 	bl	8005db4 <SAI_InterruptFlag>
 8005c1a:	4601      	mov	r1, r0
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691a      	ldr	r2, [r3, #16]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005c38:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e000      	b.n	8005c48 <HAL_SAI_Transmit_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005c46:	2302      	movs	r3, #2
  }
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	08005ef1 	.word	0x08005ef1
 8005c54:	08005e8d 	.word	0x08005e8d
 8005c58:	08005f8d 	.word	0x08005f8d

08005c5c <HAL_SAI_Receive_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	4613      	mov	r3, r2
 8005c68:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <HAL_SAI_Receive_DMA+0x1a>
 8005c70:	88fb      	ldrh	r3, [r7, #6]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e074      	b.n	8005d64 <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d16d      	bne.n	8005d62 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_SAI_Receive_DMA+0x38>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e067      	b.n	8005d64 <HAL_SAI_Receive_DMA+0x108>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	88fa      	ldrh	r2, [r7, #6]
 8005cae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2222      	movs	r2, #34	@ 0x22
 8005cbe:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc6:	4a29      	ldr	r2, [pc, #164]	@ (8005d6c <HAL_SAI_Receive_DMA+0x110>)
 8005cc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cce:	4a28      	ldr	r2, [pc, #160]	@ (8005d70 <HAL_SAI_Receive_DMA+0x114>)
 8005cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd6:	4a27      	ldr	r2, [pc, #156]	@ (8005d74 <HAL_SAI_Receive_DMA+0x118>)
 8005cd8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cde:	2200      	movs	r2, #0
 8005ce0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	331c      	adds	r3, #28
 8005cec:	4619      	mov	r1, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005cfa:	f7fc fce5 	bl	80026c8 <HAL_DMA_Start_IT>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e029      	b.n	8005d64 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d107      	bne.n	8005d2e <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005d2c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005d2e:	2100      	movs	r1, #0
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f83f 	bl	8005db4 <SAI_InterruptFlag>
 8005d36:	4601      	mov	r1, r0
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005d54:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	e000      	b.n	8005d64 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005d62:	2302      	movs	r3, #2
  }
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	08005f71 	.word	0x08005f71
 8005d70:	08005f0d 	.word	0x08005f0d
 8005d74:	08005f8d 	.word	0x08005f8d

08005d78 <HAL_SAI_TxCpltCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
 __weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_SAI_ErrorCallback>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode: SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]
  
  if(mode == SAI_MODE_IT)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d103      	bne.n	8005dd0 <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f043 0308 	orr.w	r3, r3, #8
 8005dce:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d10b      	bne.n	8005df0 <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d003      	beq.n	8005de8 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d103      	bne.n	8005df0 <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f043 0310 	orr.w	r3, r3, #16
 8005dee:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d003      	beq.n	8005e00 <SAI_InterruptFlag+0x4c>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d104      	bne.n	8005e0a <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	e003      	b.n	8005e12 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f043 0304 	orr.w	r3, r3, #4
 8005e10:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005e12:	68fb      	ldr	r3, [r7, #12]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <SAI_Disable>:
  * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005e20:	b490      	push	{r4, r7}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005e28:	4b16      	ldr	r3, [pc, #88]	@ (8005e84 <SAI_Disable+0x64>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a16      	ldr	r2, [pc, #88]	@ (8005e88 <SAI_Disable+0x68>)
 8005e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e32:	0b1b      	lsrs	r3, r3, #12
 8005e34:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005e48:	601a      	str	r2, [r3, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005e4a:	4623      	mov	r3, r4
 8005e4c:	1e5c      	subs	r4, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <SAI_Disable+0x48>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e58:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	73fb      	strb	r3, [r7, #15]
      break;
 8005e66:	e006      	b.n	8005e76 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e9      	bne.n	8005e4a <SAI_Disable+0x2a>

  return status;
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc90      	pop	{r4, r7}
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	20000068 	.word	0x20000068
 8005e88:	95cbec1b 	.word	0x95cbec1b

08005e8c <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e98:	60fb      	str	r3, [r7, #12]

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d11c      	bne.n	8005ee2 <SAI_DMATxCplt+0x56>
  {
    hsai->XferCount = 0;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005ebe:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f7ff ff76 	bl	8005db4 <SAI_InterruptFlag>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	43d9      	mvns	r1, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691a      	ldr	r2, [r3, #16]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	400a      	ands	r2, r1
 8005ed8:	611a      	str	r2, [r3, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f7ff ff48 	bl	8005d78 <HAL_SAI_TxCpltCallback>
}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <SAI_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efc:	60fb      	str	r3, [r7, #12]

  HAL_SAI_TxHalfCpltCallback(hsai);
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f7ff ff44 	bl	8005d8c <HAL_SAI_TxHalfCpltCallback>
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	60fb      	str	r3, [r7, #12]
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d11c      	bne.n	8005f62 <SAI_DMARxCplt+0x56>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005f36:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005f40:	2100      	movs	r1, #0
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f7ff ff36 	bl	8005db4 <SAI_InterruptFlag>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	43d9      	mvns	r1, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691a      	ldr	r2, [r3, #16]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	400a      	ands	r2, r1
 8005f58:	611a      	str	r2, [r3, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f7fa fe9e 	bl	8000ca4 <HAL_SAI_RxCpltCallback>
}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7c:	60fb      	str	r3, [r7, #12]

  HAL_SAI_RxHalfCpltCallback(hsai);
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7fa fe86 	bl	8000c90 <HAL_SAI_RxHalfCpltCallback>
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fa0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d004      	beq.n	8005fbe <SAI_DMAError+0x32>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d112      	bne.n	8005fe4 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005fcc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7ff ff26 	bl	8005e20 <SAI_Disable>
    
    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff fedb 	bl	8005da0 <HAL_SAI_ErrorCallback>
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <__libc_init_array>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	4d0d      	ldr	r5, [pc, #52]	@ (800602c <__libc_init_array+0x38>)
 8005ff8:	4c0d      	ldr	r4, [pc, #52]	@ (8006030 <__libc_init_array+0x3c>)
 8005ffa:	1b64      	subs	r4, r4, r5
 8005ffc:	10a4      	asrs	r4, r4, #2
 8005ffe:	2600      	movs	r6, #0
 8006000:	42a6      	cmp	r6, r4
 8006002:	d109      	bne.n	8006018 <__libc_init_array+0x24>
 8006004:	4d0b      	ldr	r5, [pc, #44]	@ (8006034 <__libc_init_array+0x40>)
 8006006:	4c0c      	ldr	r4, [pc, #48]	@ (8006038 <__libc_init_array+0x44>)
 8006008:	f000 f818 	bl	800603c <_init>
 800600c:	1b64      	subs	r4, r4, r5
 800600e:	10a4      	asrs	r4, r4, #2
 8006010:	2600      	movs	r6, #0
 8006012:	42a6      	cmp	r6, r4
 8006014:	d105      	bne.n	8006022 <__libc_init_array+0x2e>
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	f855 3b04 	ldr.w	r3, [r5], #4
 800601c:	4798      	blx	r3
 800601e:	3601      	adds	r6, #1
 8006020:	e7ee      	b.n	8006000 <__libc_init_array+0xc>
 8006022:	f855 3b04 	ldr.w	r3, [r5], #4
 8006026:	4798      	blx	r3
 8006028:	3601      	adds	r6, #1
 800602a:	e7f2      	b.n	8006012 <__libc_init_array+0x1e>
 800602c:	08006080 	.word	0x08006080
 8006030:	08006080 	.word	0x08006080
 8006034:	08006080 	.word	0x08006080
 8006038:	08006084 	.word	0x08006084

0800603c <_init>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	bf00      	nop
 8006040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006042:	bc08      	pop	{r3}
 8006044:	469e      	mov	lr, r3
 8006046:	4770      	bx	lr

08006048 <_fini>:
 8006048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604a:	bf00      	nop
 800604c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604e:	bc08      	pop	{r3}
 8006050:	469e      	mov	lr, r3
 8006052:	4770      	bx	lr
